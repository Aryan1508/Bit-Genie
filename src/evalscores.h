
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  99,  181);

constexpr int PAWN_STACKED = S(  -2,  -16);

constexpr int PAWN_ISOLATED = S(  -7,  -11);

constexpr int SUPPORTED_PASSER = S(  13,    9);

constexpr int PASSER_TEMPO = S(  55,   36);

constexpr int PAWN_SUPPORT = S(  18,   16);

constexpr int PASSER_EDGE_DISTANCE = S(  -3,  -16);

constexpr int BLOCKED_PASSER_EDGE_DISTANCE = S(  -8,   -3);

constexpr int PHALANX[8]
{
    S(   0,    0), S(   7,    2), S(  17,   13), S(  30,   27), S(  57,   84), S( 159,  246), S(  91,  213), S(   0,    0), 
};

constexpr int PASSER[8]
{
    S(   0,    0), S( -21,   13), S( -31,   28), S( -37,   71), S( -17,  116), S( -19,  219), S(  76,  171), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[8]
{
    S(   0,    0), S(   3,   11), S(  -1,   25), S(  12,   33), S(  35,   38), S(  34,   47), S(  75,  -46), S(   0,    0), 
};

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -11,  154), S(   9,  143), S(   0,  153), S(  52,   94), S(  33,   88), S(   0,   91), S( -76,  137), S(-126,  163), 
    S( -18,    5), S(  -8,   14), S(  22,  -26), S(  29,  -56), S(  37,  -62), S(  70,  -51), S(  41,  -10), S(   0,  -13), 
    S( -47,  -20), S( -35,  -34), S( -28,  -44), S( -26,  -59), S(  -2,  -62), S(  -6,  -59), S( -13,  -44), S( -21,  -48), 
    S( -59,  -42), S( -46,  -45), S( -35,  -50), S( -26,  -55), S( -19,  -54), S( -19,  -56), S( -25,  -58), S( -37,  -63), 
    S( -64,  -49), S( -53,  -51), S( -42,  -46), S( -38,  -44), S( -24,  -42), S( -34,  -43), S( -16,  -65), S( -37,  -69), 
    S( -57,  -42), S( -39,  -40), S( -38,  -35), S( -46,  -31), S( -34,  -23), S( -19,  -31), S(  -1,  -52), S( -51,  -59), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 329,  490);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-143, -156), S( -42,  -66), S( -20,  -17), S(  -9,   16), S(   3,   31), S(   4,   49), S(  16,   51), S(  28,   55), 
    S(  39,   51), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-145,  -44), S(-177,   15), S(-105,   19), S( -61,    2), S( -38,   10), S( -89,  -24), S(-147,    9), S(-101,  -72), 
    S( -31,   12), S( -13,   11), S(  14,   -8), S(  35,   -9), S(  10,  -14), S(  66,  -33), S( -15,    6), S(   8,  -13), 
    S( -11,    1), S(  22,   -6), S(  27,    7), S(  32,    9), S(  64,   -8), S(  72,  -19), S(  38,  -16), S(  10,   -8), 
    S(  -8,   19), S(  -2,   12), S(  16,   22), S(  47,   21), S(  24,   19), S(  41,   20), S(   6,   12), S(  28,    8), 
    S( -18,   19), S( -13,    5), S(  -4,   22), S(   4,   25), S(   9,   30), S(  11,   11), S(  16,    4), S(   0,   17), 
    S( -38,   -2), S( -28,   -2), S( -21,   -5), S( -14,   18), S(   3,   14), S( -16,   -7), S(  -1,   -7), S( -18,    3), 
    S( -38,   -1), S( -36,    4), S( -28,   -7), S(  -8,   -7), S( -12,   -8), S(  -9,   -9), S( -12,   -1), S( -10,   19), 
    S( -83,   10), S( -29,  -13), S( -49,   -6), S( -34,   -5), S( -27,    3), S( -19,  -10), S( -24,   -4), S( -51,   20), 
};

constexpr int BISHOP_VALUE = S( 361,  464);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -68,   -9), S( -37,  -21), S( -30,   20), S( -14,   31), S(  -8,   44), S(   6,   62), S(  16,   69), 
    S(  23,   79), S(  28,   82), S(  35,   86), S(  39,   81), S(  43,   73), S(  77,   63), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -29,   32), S( -69,   42), S( -66,   34), S(-106,   44), S( -92,   41), S( -74,   22), S( -46,   32), S( -59,   25), 
    S( -17,   18), S(  -7,   18), S( -16,   17), S( -40,   24), S(  -4,    4), S( -23,   16), S( -21,   20), S( -27,   17), 
    S(  -4,   39), S(   7,   23), S(   4,   17), S(  14,    5), S(  -1,   16), S(  40,   22), S(  18,   23), S(  25,   34), 
    S( -12,   31), S(  -7,   27), S(  -1,   20), S(   7,   36), S(   3,   25), S(  -2,   26), S(  -1,   19), S( -15,   36), 
    S(  -7,   23), S( -20,   23), S( -17,   26), S(   1,   28), S(  -4,   25), S( -12,   18), S( -19,   24), S(  10,    5), 
    S(  -2,   17), S(  -4,   20), S(  -4,   17), S(  -9,   18), S(  -4,   24), S(  -1,   18), S(   3,   10), S(  19,    6), 
    S(  13,   11), S(   6,    1), S(  10,   -7), S(  -7,   10), S(  -2,   16), S(   9,    6), S(  30,    6), S(  12,   -6), 
    S(   7,    2), S(  18,    6), S(   5,   12), S(  -6,   18), S(   3,   16), S(  -3,   28), S(  12,    2), S(  25,  -21), 
};

constexpr int ROOK_VALUE = S( 416,  860);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  22,    2);

constexpr int FRIENDLY_FILE = S(   9,   -8);

constexpr int FRIENDLY_RANK = S(  -2,   -5);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -14,   13), S(  -5,   32), S(   2,   41), S(   8,   50), S(  11,   53), S(   7,   60), 
    S(  13,   58), S(  17,   64), S(  20,   72), S(  23,   76), S(  26,   81), S(  24,   87), S(  30,   81), 
};

constexpr int ROOK_PSQT[64]
{
    S(  -1,   36), S( -28,   52), S( -30,   59), S( -29,   52), S( -20,   46), S(  -6,   46), S(  -1,   45), S(  26,   31), 
    S( -20,   42), S( -26,   57), S( -17,   61), S(   0,   45), S( -17,   49), S(   7,   38), S(  10,   34), S(  34,   22), 
    S( -39,   43), S( -10,   38), S( -24,   39), S( -26,   30), S(   9,   17), S(  11,   17), S(  65,    7), S(  31,    5), 
    S( -36,   45), S( -25,   38), S( -36,   46), S( -29,   35), S( -27,   20), S( -16,   21), S(   0,   21), S(   1,   14), 
    S( -46,   34), S( -52,   36), S( -46,   32), S( -42,   27), S( -37,   24), S( -43,   23), S( -14,   11), S( -22,    9), 
    S( -48,   21), S( -48,   18), S( -48,   17), S( -40,   15), S( -29,    9), S( -27,    1), S(  10,  -22), S( -10,  -18), 
    S( -43,    5), S( -40,   13), S( -36,   12), S( -34,    7), S( -26,    0), S( -15,   -7), S(   5,  -19), S( -28,  -12), 
    S( -19,   12), S( -24,    9), S( -28,   14), S( -22,    5), S( -12,   -1), S(  -9,    6), S(  -1,   -4), S(  -9,  -12), 
};

constexpr int QUEEN_VALUE = S( 883, 1714);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S(-106,  -67), S(-115,  -87), S( -51,  -42), S( -31,  -52), S( -32,   14), 
    S( -27,   23), S( -27,   38), S( -21,   37), S( -18,   45), S( -14,   55), S( -10,   56), S(  -5,   60), S(  -3,   67), 
    S(  -2,   73), S(   1,   78), S(   2,   84), S(   4,   86), S(   8,   94), S(  14,   88), S(  22,   80), S(  42,   64), 
    S(  57,   45), S(  95,   25), S( 132,   21), S( 118,   64), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -23,   51), S( -61,   95), S( -38,  113), S(  -5,   91), S( -11,   99), S( -39,  128), S(  24,   40), S( -13,   80), 
    S(  10,   34), S( -19,   66), S( -25,  109), S( -44,  140), S( -46,  168), S(  -1,  113), S(  -3,   92), S(  50,   83), 
    S(   9,   32), S(  -3,   47), S( -13,   87), S( -10,  100), S(  -3,  117), S(  40,  103), S(  53,   62), S(  59,   54), 
    S(  -9,   54), S( -11,   59), S( -20,   74), S( -30,   98), S( -32,  116), S( -10,  103), S(   7,   97), S(  17,   78), 
    S(  -2,   33), S( -20,   67), S( -22,   60), S( -22,   81), S( -22,   82), S( -12,   71), S(   4,   59), S(  15,   54), 
    S(  -6,   10), S(  -4,   22), S( -14,   48), S( -11,   40), S(  -7,   47), S(  -4,   45), S(  16,   22), S(  15,   17), 
    S(   6,   -5), S(   1,    5), S(   8,   -4), S(  11,    5), S(   8,   15), S(  19,  -25), S(  32,  -59), S(  43,  -76), 
    S(   3,  -10), S(  -2,   -9), S(   4,   -8), S(  13,   12), S(  12,   -8), S(  -5,  -13), S(  14,  -32), S(  16,  -33), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -40,   18), S(  -7,    5), S(  18,   -8), S(  34,  -37), 
};

constexpr int KING_PSQT[64]
{
    S( -46, -105), S(  60,  -75), S(  14,  -31), S( -59,   18), S( -20,   -2), S( -15,   14), S(  23,   12), S(  24, -118), 
    S( -48,   -7), S(   8,   31), S( -38,   51), S(  50,   33), S(   5,   60), S(  32,   70), S(  38,   61), S( -34,   31), 
    S(-107,   29), S(  32,   47), S( -36,   77), S( -65,   96), S(  -7,   99), S(  73,   84), S(  60,   74), S(  -7,   33), 
    S( -67,   12), S( -36,   48), S( -72,   84), S(-116,  103), S( -95,  103), S( -50,   93), S( -37,   70), S( -94,   39), 
    S( -59,   -6), S( -33,   24), S( -66,   62), S(-108,   87), S(-100,   84), S( -56,   62), S( -53,   38), S(-113,   27), 
    S(   2,  -30), S(  44,   -8), S( -22,   29), S( -39,   46), S( -33,   45), S( -28,   31), S(  21,   -1), S( -10,  -12), 
    S(  90,  -55), S(  47,  -20), S(  31,   -4), S( -10,   11), S( -10,   16), S(   8,    5), S(  61,  -23), S(  58,  -41), 
    S(  59,  -98), S(  82,  -63), S(  63,  -42), S( -19,  -29), S(  45,  -53), S(  -6,  -23), S(  71,  -59), S(  75, -105), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(   7,  -21), S( -16,   -2), S( -24,   11), S( -37,    5), S( -33,    7), S( -16,  -15), 
    S( -48,   32), S( -31,  -42), S( -90,   19), S( -67,   -3), S( -39,  -38), S(-102,   62), S( -88,  -25), S( -99,  -77), 
    S(-116,   22), S( -95,  -24), S(-145,  113), S(-129,  -28), S(-159,  -38), S(-196,   62), S(-212,   27), S(-172,   62), 
    S(-199,    5), S(-179, -154), S(-197, -129), S(-214,  -86), S(-253,  -13), S(-261,    9), S(-243,  -75), S(-304, -166), 
    S(-268, -193), S(-371, -280), S(-359, -213), S(-164, -110), S(-401, -247), S(-314, -199), S(-382, -227), S(-253, -202), 
    S(-160, -187), S(-227, -234), S(-235, -214), S(-238, -147), S(-322, -224), S(-118,  -46), S(-354, -199), S(-129,  -37), 
    S(-400, -400), S(-400,  -10), S(-399, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-401, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -2,    3);

constexpr int CENTER_CONTROL = S(   4,   -1);

constexpr int CONNECTIVITY[8]
{
    S( -30,    8), S( -25,    5), S( -18,   -1), S( -10,   -5), S(  -3,   -9), S(   3,   -7), S(   8,    1), S(  12,   16), 
};
