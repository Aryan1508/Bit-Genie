
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S(  98,  154);

    constexpr int stacked = S(  -3,  -16);

    constexpr int isolated = S( -17,  -17);

    constexpr int passed_connected = S(  17,    4);

    constexpr int passed_tempo = S(  42,   51);

    constexpr int support = S(  12,   12);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -35,   84), S( -93,   65), S( -76,   28), S( -61,  -32), S( -48,  -14), S(-123,   37), S( -87,   39), S(-137,   79), 
        S( -14,   37), S(  -5,    8), S(  26,    4), S(  40,   16), S(  54,   23), S(  94,   -7), S(  58,   17), S(  22,   37), 
        S( -36,   26), S( -11,   -1), S(   1,   -6), S(   3,  -18), S(  31,  -23), S(  18,  -14), S(   9,   -8), S(  -8,    1), 
        S( -44,    2), S( -23,  -14), S(  -3,  -18), S(  11,  -15), S(  17,  -18), S(  10,  -20), S(  -4,  -19), S( -20,  -18), 
        S( -50,   -3), S( -30,  -18), S( -13,  -14), S(  -8,  -14), S(   9,   -9), S(  -6,   -9), S(  13,  -32), S( -16,  -21), 
        S( -43,   -1), S( -19,  -16), S( -16,   -7), S( -23,   -2), S(  -6,    6), S(   0,    0), S(  19,  -24), S( -35,  -17), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 285,  252), S( 114,  347), S( 152,  366), S( 191,  338), S( 197,  331), S(  89,  322), S( 172,  371), S( 198,  314), 
        S(  26,  265), S(  30,  281), S(  -5,  218), S(   2,  124), S( -18,  125), S( -68,  249), S( -12,  265), S( -42,  271), 
        S(   1,  150), S( -17,  149), S( -22,   88), S( -12,   65), S( -28,   68), S( -19,   96), S( -48,  161), S( -32,  158), 
        S( -21,   83), S( -29,   61), S( -44,   36), S( -43,   13), S( -53,   28), S( -61,   56), S( -59,   90), S( -16,   81), 
        S( -19,   12), S( -61,   15), S( -41,   -5), S( -49,  -10), S( -53,  -12), S( -61,   -4), S( -66,   32), S( -15,   16), 
        S( -19,    6), S( -30,   -1), S( -36,  -12), S( -29,  -22), S( -27,  -33), S( -27,  -22), S( -12,   -9), S(   0,    0), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  64,  190), S( 204,   83), S( 233,   57), S( 229,   86), S( 172,   61), S( 198,   70), S( 134,   15), S(  73,   86), 
        S(  46,  110), S( 109,   75), S(  87,   22), S(  29,    5), S(  13,  -10), S(  50,   26), S(  30,   19), S( -53,   31), 
        S(  37,   75), S(  48,   63), S(  27,   39), S(  21,   33), S(  -5,   33), S(  -2,   35), S(  24,   40), S(  -8,   48), 
        S(  38,   39), S(  22,   33), S( -12,   22), S( -16,   23), S( -22,   32), S( -30,   35), S(  -2,   46), S( -21,   43), 
        S(  21,   -8), S(  19,   30), S( -25,   13), S( -34,   13), S( -41,   24), S( -39,   33), S( -37,   54), S( -28,   32), 
        S(  11,  -12), S(   2,   15), S( -25,   24), S( -25,   25), S(  -2,    1), S( -13,    0), S(   7,   -7), S(   4,   10), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 383,  510);

    constexpr int mobility[9]
    {
        S(-143, -164), S( -34,  -64), S(  -6,   -4), S(   3,   30), S(  16,   46), S(  19,   57), S(  29,   60), S(  40,   60), 
        S(  54,   58), 
    };

    constexpr int psqt[64]
    {
        S(-181,  -26), S(-157,   16), S( -83,   26), S(-132,   39), S( -38,   22), S( -98,  -66), S(-135,  -20), S(-131,  -49), 
        S( -61,   25), S( -44,   33), S(  -1,   11), S(  56,  -19), S( -17,  -13), S(  78,  -33), S( -22,   16), S( -36,    3), 
        S( -38,    9), S(  25,   -1), S(  29,    2), S(  44,   -1), S(  89,  -30), S(  93,  -21), S(  45,   -7), S(  -2,    4), 
        S(  -8,   41), S(   6,   17), S(  41,    7), S(  72,    5), S(  47,    1), S(  63,    9), S(  14,   13), S(  30,    6), 
        S( -22,   29), S(  -2,   13), S(  19,    1), S(  26,   12), S(  35,    9), S(  33,   -9), S(  20,    9), S(  -6,   29), 
        S( -50,    9), S( -21,    1), S(   2,  -31), S(   4,    0), S(  24,  -10), S(   6,  -31), S(  11,   -9), S( -29,    9), 
        S( -50,   38), S( -40,   13), S( -24,   -9), S(   3,  -12), S(  -3,  -18), S(  -1,  -23), S( -14,   16), S( -23,   53), 
        S( -91,   65), S( -42,   14), S( -63,   17), S( -38,   11), S( -31,    7), S( -26,    0), S( -36,   17), S( -67,   43), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 422,  481);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -84,    3), S( -60,   32), S( -42,   65), S( -14,   61), S(  -3,   69), S(  19,   76), S(  36,   74), 
        S(  50,   72), S(  59,   65), S(  68,   64), S(  75,   46), S(  79,   35), S( 121,   14), 
    };

    constexpr int psqt[64]
    {
        S( -40,   35), S( -85,   64), S( -41,   36), S(-119,   53), S(-107,   52), S( -66,   28), S( -32,   18), S( -51,   18), 
        S( -22,   15), S( -24,   21), S( -26,   28), S( -42,   32), S( -13,    8), S( -29,   14), S( -26,   15), S( -18,   -1), 
        S(   6,   38), S(  18,   29), S(   9,   21), S(  23,    1), S(  12,   -1), S(  57,   21), S(  23,   31), S(  34,   26), 
        S( -15,   40), S(  -4,   41), S(   8,   17), S(  22,   29), S(  32,   18), S(   3,   22), S(   9,   16), S( -22,   42), 
        S(  -1,   35), S( -14,   26), S(  -8,   24), S(  15,   29), S(  14,   16), S(  -1,   11), S(  -8,   15), S(  16,    7), 
        S(   9,    2), S(  10,   28), S(   4,   24), S(   3,   18), S(   5,   26), S(  10,   16), S(  17,    6), S(  20,   15), 
        S(  22,   18), S(  17,    4), S(  17,   -4), S(  -3,   11), S(   6,   15), S(  18,   -2), S(  43,    6), S(  26,  -20), 
        S(  26,   17), S(  28,   -5), S(  12,    9), S(  -2,   22), S(   7,   28), S(   1,   30), S(  12,    1), S(  45,  -23), 
    };
}

namespace RookEval
{
    constexpr int value = S( 507,  907);

    constexpr int open_file = S(  27,   10);

    constexpr int semi_open_file = S(  24,   -2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -37,   90), S( -19,   99), S(  -7,  101), S(   5,   97), S(  13,   89), S(  16,   85), 
        S(  28,   69), S(  40,   63), S(  47,   63), S(  55,   54), S(  66,   47), S(  65,   43), S(  79,   20), 
    };

    constexpr int psqt[64]
    {
        S(   1,   46), S( -49,   68), S(   2,   60), S( -29,   72), S( -24,   57), S(   5,   61), S(  -1,   49), S(  37,   36), 
        S( -24,   56), S( -41,   82), S( -22,   88), S(   2,   66), S( -20,   70), S(   0,   60), S(   5,   59), S(  51,   26), 
        S( -38,   57), S(  -6,   54), S( -21,   62), S( -20,   37), S(  22,   16), S(  27,   24), S(  93,    4), S(  37,    2), 
        S( -35,   54), S( -37,   60), S( -24,   53), S( -20,   37), S( -17,   21), S(  -9,   22), S(  11,   22), S(  -8,   25), 
        S( -37,   39), S( -41,   33), S( -39,   33), S( -30,   33), S( -29,   30), S( -37,   31), S(   9,   -7), S( -10,    7), 
        S( -39,   25), S( -38,   19), S( -39,   28), S( -31,   22), S( -15,    6), S( -12,    2), S(  16,  -19), S(   2,  -24), 
        S( -28,    5), S( -37,   16), S( -26,   14), S( -23,   11), S( -13,    8), S(  -4,   -5), S(   7,  -16), S( -13,  -14), 
        S( -16,   12), S( -21,    9), S( -24,   18), S( -16,    4), S(  -8,    0), S(  -2,    5), S(  15,  -12), S(  -7,  -13), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1038, 1846);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -52,  -56), S( -87,  -73), S( -75,  -10), S( -46,   -1), S( -53,   96), 
        S( -36,   96), S( -32,  113), S( -23,  114), S( -13,  104), S(  -4,  111), S(   5,  100), S(  15,   93), S(  20,   96), 
        S(  26,   95), S(  35,   92), S(  40,   85), S(  49,   73), S(  58,   68), S(  64,   64), S(  71,   49), S(  73,   50), 
        S(  88,   18), S(  88,   17), S(  88,   55), S(  84,   80), 
    };

    constexpr int psqt[64]
    {
        S(   0,   22), S( -41,   75), S( -20,   88), S(  55,   25), S( -43,  137), S(  20,  103), S(  -2,  104), S( -31,  102), 
        S(  -9,   44), S( -38,   95), S( -41,  134), S( -42,  140), S( -37,  159), S( -17,  163), S( -39,  158), S(  28,  121), 
        S(   5,   40), S(  11,   36), S( -10,  103), S(   6,   90), S(   1,  134), S(  40,  151), S(  41,  136), S(  67,   53), 
        S( -15,   87), S(   4,   61), S( -23,  105), S(  -6,  106), S( -19,  135), S(   2,   96), S(   5,  120), S(  14,   87), 
        S(  -3,   65), S( -12,   79), S(  -1,   53), S(  -3,   87), S(   3,   69), S(   0,   66), S(   9,   76), S(  27,   46), 
        S(  -7,   42), S(  11,   23), S(   0,   64), S(   4,   44), S(  11,   45), S(   6,   65), S(  30,   30), S(  27,   -2), 
        S(   1,   44), S(  14,   11), S(  18,   15), S(  22,   17), S(  21,   18), S(  29,   -4), S(  44,  -56), S(  65,  -88), 
        S(  15,    1), S(   8,    7), S(  11,   23), S(  18,   31), S(  19,    5), S(   6,   -2), S(  37,  -11), S(  20,   16), 
    };
}

namespace KingEval
{
    constexpr int pawn_shield[4]
    {
        S( -47,   17), S( -11,    3), S(  21,   -6), S(  45,  -34), 
    };

    constexpr int psqt[64]
    {
        S(-140, -242), S(  80, -101), S(   0,  -38), S( -39,    8), S(  11,   24), S(  -9,    8), S( -22,  -36), S( -32, -145), 
        S(  14,   19), S(  54,   45), S(  30,   79), S(  47,   57), S( -20,   99), S(  17,   71), S(  10,   90), S( -92,   41), 
        S(-118,   49), S(  31,   74), S(  28,   85), S( -87,  112), S( -49,  101), S(  19,   91), S(  26,   74), S( -85,   55), 
        S(-108,   36), S( -26,   55), S( -87,   89), S(-148,  116), S( -69,   99), S( -47,   91), S( -94,   74), S(-129,   48), 
        S( -94,   28), S( -64,   34), S(  -6,   54), S( -60,   71), S( -46,   64), S( -70,   49), S( -65,   28), S(-155,   33), 
        S(  -8,   -7), S(  49,  -12), S(  18,   14), S(   2,   29), S(  -7,   30), S(   9,    5), S(  47,  -23), S( -11,   -3), 
        S(  83,  -30), S(  69,  -34), S(  52,  -17), S(  17,   -7), S(  14,   -4), S(  36,  -17), S(  82,  -49), S(  62,  -39), 
        S(  49,  -57), S(  92,  -54), S(  78,  -36), S( -17,  -14), S(  53,  -53), S(  -5,  -10), S(  76,  -57), S(  72,  -82), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  23,  -29), S( -40,   16), S( -29,   17), S( -36,    9), S( -45,   16), S( -18,  -17), 
        S( -54,   42), S( -28,  -48), S( -87,   12), S( -70,  -14), S( -43,  -44), S(-105,   41), S( -74,  -62), S(-131,  -65), 
        S(-127,   32), S(-106,  -28), S(-126,   38), S(-137,  -37), S(-205,  -93), S(-226,   23), S(-218,   -1), S(-163,  -30), 
        S(-189,  -94), S(-206, -199), S(-237, -241), S(-223, -172), S(-285,  -73), S(-237, -117), S(-249,  -80), S(-287, -182), 
        S(-291, -208), S(-367, -277), S(-408, -280), S( -79,  -77), S(-368, -220), S(-309, -204), S(-360, -224), S(-240, -198), 
        S(-165, -190), S(-224, -233), S(-234, -214), S(-235, -145), S(-323, -224), S( -96,  -40), S(-349, -196), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -3,    7);
}
