
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S(  98,  155);

    constexpr int stacked = S(  -4,  -17);

    constexpr int passed_connected = S(  17,    4);

    constexpr int passed_tempo = S(  45,   48);

    constexpr int support = S(  12,   11);

    constexpr int isolated[8]
    {
        S( -12,  -10), S( -16,  -19), S( -17,  -16), S( -22,  -22), S( -25,  -22), S( -12,  -13), S( -15,  -18), S( -18,  -11), 
    };

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -25,   71), S( -86,   61), S( -69,   22), S( -51,  -36), S( -35,  -19), S(-112,   29), S( -77,   34), S(-125,   71), 
        S( -15,   37), S(  -7,   16), S(  20,   11), S(  39,   17), S(  54,   26), S(  92,   -7), S(  58,   24), S(  25,   34), 
        S( -37,   25), S( -12,    7), S(  -2,   -5), S(   0,  -15), S(  29,  -20), S(  17,  -16), S(   8,   -3), S(  -5,   -2), 
        S( -44,    1), S( -22,   -6), S(  -6,  -18), S(   9,  -13), S(  16,  -15), S(   7,  -21), S(  -3,  -14), S( -17,  -21), 
        S( -50,   -3), S( -29,  -10), S( -15,  -13), S(  -9,  -13), S(   7,   -7), S(  -7,  -11), S(  14,  -27), S( -13,  -24), 
        S( -44,    0), S( -18,   -8), S( -18,   -7), S( -26,    0), S(  -7,    8), S(  -4,   -1), S(  21,  -20), S( -33,  -19), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 300,  242), S( 125,  338), S( 167,  354), S( 205,  329), S( 216,  322), S( 106,  308), S( 191,  359), S( 217,  301), 
        S(  37,  247), S(  43,  266), S(   5,  205), S(   6,  124), S( -13,  123), S( -57,  235), S(  19,  245), S( -37,  259), 
        S(   2,  139), S( -16,  141), S( -20,   85), S(  -9,   64), S( -25,   67), S( -19,   93), S( -46,  155), S( -30,  151), 
        S( -25,   75), S( -31,   56), S( -43,   35), S( -41,   14), S( -53,   30), S( -62,   55), S( -63,   88), S( -18,   78), 
        S( -22,    5), S( -64,   12), S( -40,   -5), S( -48,   -7), S( -51,  -10), S( -65,   -3), S( -73,   33), S( -16,   13), 
        S( -24,   -1), S( -31,   -4), S( -36,  -13), S( -26,  -21), S( -26,  -30), S( -28,  -21), S( -16,  -10), S(  -1,   -2), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  59,  187), S( 200,   90), S( 225,   63), S( 223,   93), S( 166,   66), S( 187,   78), S( 123,   24), S(  64,   89), 
        S(  52,   96), S( 119,   63), S(  97,   11), S(  32,    5), S(  18,  -12), S(  57,   18), S(  35,    9), S( -50,   24), 
        S(  37,   64), S(  50,   56), S(  29,   38), S(  23,   32), S(  -4,   33), S(  -1,   33), S(  27,   35), S(  -5,   43), 
        S(  37,   30), S(  21,   28), S( -11,   21), S( -16,   24), S( -21,   33), S( -29,   33), S(  -2,   40), S( -21,   39), 
        S(  16,  -15), S(  18,   26), S( -26,   13), S( -34,   16), S( -41,   27), S( -40,   33), S( -37,   50), S( -27,   28), 
        S(   8,  -18), S(   0,   11), S( -25,   24), S( -26,   28), S(  -1,    2), S( -12,   -2), S(   7,  -11), S(   7,    5), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 396,  498);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-174,  -32), S(-122,  -13), S( -75,   15), S(-116,   22), S( -35,   12), S(-103,  -71), S( -98,  -44), S(-123,  -53), 
        S( -50,   -1), S( -40,   25), S(  -7,   17), S(  51,  -12), S( -25,   -6), S(  77,  -29), S( -14,    5), S( -25,  -20), 
        S( -33,    0), S(  22,    7), S(  18,   26), S(  34,   21), S(  83,  -10), S(  84,    0), S(  44,   -1), S(   4,   -7), 
        S(  -1,   27), S(   2,   25), S(  30,   28), S(  60,   24), S(  34,   20), S(  53,   30), S(  10,   21), S(  38,   -8), 
        S( -13,   12), S(  -5,   20), S(   8,   23), S(  14,   31), S(  24,   29), S(  20,   10), S(  17,   13), S(   4,    8), 
        S( -43,   -6), S( -24,    7), S(  -9,   -8), S(  -7,   24), S(  13,   13), S(  -4,   -6), S(   8,   -3), S( -22,   -6), 
        S( -35,   16), S( -32,    0), S( -27,   -1), S(   0,   -5), S(  -7,  -10), S(  -7,  -15), S(  -6,    5), S(  -9,   30), 
        S( -68,   39), S( -28,   -5), S( -58,    9), S( -34,    4), S( -24,   -2), S( -20,   -7), S( -23,    1), S( -43,   15), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 432,  468);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -48,   43), S( -90,   64), S( -47,   39), S(-119,   53), S(-112,   53), S( -75,   31), S( -29,   17), S( -52,   23), 
        S( -25,   16), S( -20,   21), S( -24,   28), S( -43,   31), S( -14,    7), S( -31,   14), S( -24,   14), S( -23,    1), 
        S(   4,   38), S(  21,   28), S(  12,   19), S(  29,   -1), S(  18,   -3), S(  63,   18), S(  27,   28), S(  34,   24), 
        S( -17,   42), S(  -1,   37), S(  13,   16), S(  28,   29), S(  38,   19), S(   9,   20), S(  12,   13), S( -24,   44), 
        S(  -3,   38), S( -10,   22), S(  -3,   23), S(  21,   29), S(  21,   17), S(   5,   10), S(  -5,   12), S(  13,    9), 
        S(   7,    3), S(  11,   28), S(   7,   23), S(   8,   17), S(   9,   25), S(  13,   15), S(  18,    7), S(  18,   18), 
        S(  19,   22), S(  16,    8), S(  18,   -4), S(  -2,   11), S(   8,   15), S(  17,   -2), S(  43,    8), S(  24,  -17), 
        S(  22,   22), S(  25,   -1), S(   9,   13), S(  -5,   26), S(   4,   32), S(  -4,   36), S(   9,    3), S(  42,  -15), 
    };
}

namespace RookEval
{
    constexpr int value = S( 538,  879);

    constexpr int open_file = S(  28,   12);

    constexpr int semi_open_file = S(  26,   -1);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   0,   48), S( -54,   72), S(   2,   63), S( -32,   75), S( -24,   60), S(   6,   62), S(  -4,   52), S(  38,   37), 
        S( -23,   56), S( -39,   83), S( -19,   88), S(   5,   67), S( -17,   70), S(   6,   61), S(  10,   60), S(  58,   26), 
        S( -40,   59), S(  -7,   55), S( -21,   63), S( -21,   39), S(  24,   17), S(  32,   24), S( 103,    1), S(  44,    1), 
        S( -38,   56), S( -39,   62), S( -26,   54), S( -21,   39), S( -16,   22), S(  -6,   22), S(  14,   21), S(  -4,   25), 
        S( -38,   41), S( -43,   35), S( -42,   36), S( -31,   34), S( -26,   29), S( -35,   30), S(  12,   -8), S(  -8,    8), 
        S( -41,   28), S( -38,   20), S( -39,   30), S( -31,   23), S( -14,    6), S(  -9,    2), S(  21,  -22), S(   5,  -23), 
        S( -29,    8), S( -37,   17), S( -26,   16), S( -22,   12), S( -11,    7), S(   0,   -5), S(  11,  -16), S(  -9,  -13), 
        S( -15,   18), S( -18,   17), S( -20,   27), S( -10,   12), S(   0,    7), S(   3,   10), S(  23,   -9), S(  -5,   -8), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1253, 1669);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   8,   25), S( -33,   68), S( -11,   79), S(  57,   23), S( -26,  119), S(  36,   82), S(  19,   85), S( -16,   80), 
        S(  -2,   55), S( -31,   98), S( -36,  130), S( -35,  133), S( -32,  156), S( -13,  160), S( -32,  152), S(  36,  125), 
        S(  12,   46), S(  18,   33), S(  -2,   90), S(  14,   73), S(  10,  112), S(  48,  133), S(  51,  124), S(  77,   46), 
        S(  -6,   90), S(  15,   49), S( -13,   88), S(   6,   77), S(  -9,  107), S(  13,   76), S(  12,  115), S(  24,   88), 
        S(   9,   63), S(  -2,   68), S(  11,   35), S(  10,   60), S(  17,   41), S(  11,   48), S(  21,   67), S(  38,   47), 
        S(   5,   42), S(  23,   13), S(  12,   48), S(  17,   24), S(  23,   25), S(  18,   49), S(  43,   19), S(  39,    0), 
        S(  15,   45), S(  25,    7), S(  30,    6), S(  34,    8), S(  33,    5), S(  40,  -16), S(  55,  -59), S(  76,  -80), 
        S(  28,   -2), S(  24,    1), S(  25,   15), S(  29,   23), S(  32,   -2), S(  21,   -6), S(  47,   -7), S(  34,   11), 
    };
}

namespace KingEval
{
    constexpr int pawn_shield[4]
    {
        S( -49,   18), S( -11,    3), S(  22,   -7), S(  45,  -35), 
    };

    constexpr int psqt[64]
    {
        S(-124, -195), S(  27,  -85), S(  -6,  -35), S( -29,    5), S(  -2,   25), S(  -1,    6), S( -12,  -33), S( -32, -114), 
        S(   7,   13), S(  46,   44), S(  33,   76), S(  47,   58), S(   2,   92), S(  26,   68), S(  20,   87), S( -56,   28), 
        S( -76,   35), S(  30,   71), S(  27,   83), S( -65,  107), S( -35,   98), S(  23,   89), S(  30,   73), S( -64,   44), 
        S( -88,   25), S( -26,   54), S( -80,   87), S(-123,  112), S( -67,   99), S( -48,   91), S( -87,   72), S(-122,   40), 
        S( -86,   20), S( -73,   36), S( -13,   55), S( -67,   72), S( -54,   65), S( -76,   51), S( -72,   29), S(-158,   28), 
        S( -14,  -11), S(  36,   -8), S(   8,   16), S(  -8,   31), S( -16,   32), S(   0,    7), S(  37,  -20), S( -12,   -8), 
        S(  82,  -35), S(  57,  -29), S(  40,  -13), S(   3,   -2), S(   0,    0), S(  21,  -12), S(  69,  -44), S(  60,  -44), 
        S(  54,  -67), S(  88,  -58), S(  73,  -41), S( -25,  -15), S(  50,  -57), S( -11,  -14), S(  72,  -61), S(  78,  -93), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  21,  -29), S( -48,   16), S( -32,   17), S( -43,   13), S( -47,   14), S( -18,  -14), 
        S( -28,   10), S( -35,  -19), S( -83,   71), S( -84,   47), S( -70,   80), S(-108,   77), S(-107,    1), S(-147,    3), 
        S(-159,    2), S(-156,   -1), S(-169,  -13), S(-191,  -64), S(-247, -120), S(-237,  -12), S(-261,  -89), S(-257, -160), 
        S(-207, -214), S(-355, -303), S(-279, -326), S(-249, -218), S(-275, -111), S(-243, -145), S(-212,  -70), S(-282, -176), 
        S(-277, -200), S(-380, -276), S(-379, -294), S( -16,  -57), S(-357, -196), S(-273, -190), S(-316, -212), S(-226, -194), 
        S(-179, -198), S(-209, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    5);
}
