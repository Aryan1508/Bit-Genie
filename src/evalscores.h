
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  91,  142);

constexpr int PAWN_STACKED = S(  -2,  -15);

constexpr int PAWN_ISOLATED = S(  -8,  -13);

constexpr int SUPPORTED_PASSER = S(  13,    6);

constexpr int PASSER_TEMPO = S(  53,   37);

constexpr int PAWN_SUPPORT = S(  19,   17);

constexpr int PHALANX = S(  24,   24);

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -77,   67), S( -75,   41), S( -98,   28), S( -74,  -37), S( -64,  -29), S( -96,    6), S(-104,   26), S(-127,   61), 
    S(  -7,   31), S(   5,   24), S(  34,    7), S(  37,   22), S(  50,    4), S(  95,   -9), S(  70,   35), S(  29,   26), 
    S( -33,   19), S(  -7,   -2), S(  -2,   -6), S(   1,  -22), S(  28,  -22), S(  21,  -20), S(  16,  -11), S(  -2,   -8), 
    S( -45,   -3), S( -19,  -12), S(  -8,  -15), S(   3,  -18), S(  11,  -19), S(   8,  -22), S(   2,  -25), S( -20,  -23), 
    S( -52,  -10), S( -32,  -21), S( -20,  -13), S( -15,  -10), S(   1,   -9), S( -12,  -11), S(   6,  -36), S( -23,  -32), 
    S( -39,   -3), S( -10,   -8), S( -10,   -2), S( -20,    5), S(  -4,   12), S(  10,    3), S(  31,  -18), S( -31,  -21), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 225,  257), S( 147,  315), S( 135,  334), S( 183,  318), S( 174,  296), S( 116,  291), S( 153,  348), S( 209,  296), 
    S(  -1,  238), S(  -2,  249), S( -19,  209), S(  -9,  129), S( -12,  139), S( -60,  194), S( -50,  222), S( -54,  238), 
    S( -13,  126), S( -20,  122), S( -19,   85), S( -15,   64), S( -31,   59), S( -27,   88), S( -62,  129), S( -36,  126), 
    S( -38,   74), S( -47,   63), S( -47,   39), S( -39,   16), S( -50,   25), S( -43,   41), S( -63,   75), S( -37,   68), 
    S( -29,   12), S( -45,   20), S( -49,    4), S( -37,   -6), S( -43,   -4), S( -40,    2), S( -50,   36), S( -12,   10), 
    S( -35,   12), S( -30,    4), S( -33,   -5), S( -33,  -11), S( -15,  -25), S(  -8,  -21), S( -19,   -6), S( -12,    4), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S(  97,  167), S( 184,   94), S( 227,   88), S( 222,  103), S( 183,   90), S( 199,   69), S( 132,   26), S(  73,   84), 
    S(  36,   96), S(  76,   73), S(  53,   37), S(  26,   12), S(  19,   21), S(  28,   36), S(   9,    2), S( -47,   42), 
    S(  41,   57), S(  39,   56), S(  33,   29), S(  20,   34), S(  -2,   31), S(  17,   28), S(  12,   41), S(  -7,   35), 
    S(  31,   34), S(  23,   38), S( -15,   24), S(  -8,   21), S( -21,   31), S( -17,   34), S(   2,   54), S(  -7,   34), 
    S(  10,   14), S(  -2,   39), S( -21,   21), S( -23,   15), S( -26,   21), S( -11,   20), S( -20,   53), S(  -8,   21), 
    S(   2,   -4), S(  -2,   22), S( -23,   17), S( -13,   19), S(  -4,    0), S( -14,    3), S(  11,    4), S(  -7,   16), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 367,  484);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-141, -172), S( -35,  -63), S( -12,  -12), S(  -1,   20), S(  11,   33), S(  13,   48), S(  25,   51), S(  36,   53), 
    S(  46,   49), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-176,  -42), S(-173,    9), S(-101,   14), S(-107,   20), S( -43,    9), S( -85,  -36), S(-144,   -4), S(-130,  -65), 
    S( -54,   13), S( -29,   14), S(  15,   -6), S(  38,   -9), S(   8,  -11), S(  67,  -32), S( -29,    8), S( -16,  -11), 
    S( -28,    4), S(  21,   -4), S(  46,    6), S(  54,    8), S(  86,   -8), S(  90,  -18), S(  35,  -12), S(  -7,   -6), 
    S( -24,   24), S(   1,   14), S(  40,   20), S(  70,   19), S(  47,   16), S(  63,   18), S(   8,   14), S(  11,   11), 
    S( -33,   23), S(  -8,    7), S(  23,   18), S(  33,   19), S(  38,   23), S(  38,    7), S(  22,    4), S( -16,   20), 
    S( -53,    0), S( -21,   -3), S(   6,  -11), S(  12,   12), S(  29,    8), S(  11,  -14), S(   6,   -9), S( -33,    4), 
    S( -64,    5), S( -51,    5), S( -23,  -11), S(  -4,   -9), S(  -7,  -11), S(  -4,  -12), S( -25,   -2), S( -35,   20), 
    S(-115,   30), S( -56,   -5), S( -65,   -3), S( -49,   -4), S( -43,    5), S( -35,   -9), S( -50,    2), S( -78,   22), 
};

constexpr int BISHOP_VALUE = S( 401,  461);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -97,    7), S( -71,   -8), S( -54,   30), S( -28,   37), S( -12,   47), S(  11,   62), S(  30,   66), 
    S(  47,   74), S(  60,   74), S(  76,   76), S(  87,   68), S(  96,   61), S( 124,   54), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -29,   30), S( -76,   44), S( -56,   31), S(-110,   47), S( -98,   43), S( -71,   22), S( -36,   30), S( -57,   21), 
    S( -13,   17), S(  -2,   17), S( -12,   15), S( -35,   22), S(   0,    2), S( -17,   15), S( -16,   20), S( -21,   15), 
    S(  -2,   37), S(  11,   22), S(  10,   14), S(  21,    3), S(   6,   13), S(  45,   21), S(  20,   24), S(  24,   34), 
    S( -12,   30), S(  -1,   27), S(   5,   18), S(  20,   35), S(  16,   23), S(   5,   25), S(   4,   17), S( -15,   35), 
    S(  -3,   23), S( -14,   24), S( -10,   24), S(  13,   26), S(   8,   23), S(  -4,   14), S( -12,   22), S(  13,    3), 
    S(   1,   18), S(   5,   21), S(   2,   17), S(  -1,   17), S(   4,   22), S(   6,   17), S(  11,    8), S(  22,    5), 
    S(  18,   13), S(  13,    2), S(  16,   -9), S(  -3,    8), S(   4,   13), S(  16,    5), S(  37,    7), S(  19,   -8), 
    S(  12,    5), S(  24,    7), S(   8,   13), S(  -3,   17), S(   5,   15), S(   2,   27), S(  16,   -1), S(  32,  -26), 
};

constexpr int ROOK_VALUE = S( 467,  858);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    1);

constexpr int FRIENDLY_FILE = S(  11,   -9);

constexpr int FRIENDLY_RANK = S(  -1,   -6);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -61,   30), S( -42,   50), S( -26,   56), S( -11,   62), S(   3,   61), S(   9,   65), 
    S(  25,   59), S(  39,   61), S(  52,   66), S(  65,   67), S(  76,   69), S(  84,   72), S(  97,   64), 
};

constexpr int ROOK_PSQT[64]
{
    S( -12,   44), S( -38,   59), S( -27,   62), S( -35,   58), S( -24,   51), S(  -6,   48), S(  -5,   48), S(  21,   34), 
    S( -29,   48), S( -36,   62), S( -22,   67), S(  -6,   51), S( -23,   54), S(   3,   42), S(   6,   35), S(  27,   26), 
    S( -41,   46), S( -11,   42), S( -21,   43), S( -23,   34), S(  12,   21), S(  12,   20), S(  67,    8), S(  28,    9), 
    S( -36,   47), S( -25,   40), S( -31,   47), S( -24,   37), S( -20,   20), S( -12,   20), S(   2,   21), S(   0,   16), 
    S( -43,   33), S( -50,   36), S( -41,   32), S( -36,   26), S( -32,   23), S( -39,   22), S( -12,   10), S( -22,    9), 
    S( -45,   20), S( -46,   19), S( -42,   16), S( -36,   15), S( -24,    9), S( -21,    0), S(  12,  -23), S(  -9,  -19), 
    S( -41,    6), S( -39,   13), S( -31,   12), S( -30,    9), S( -22,    1), S( -11,   -7), S(   9,  -22), S( -27,  -14), 
    S( -18,   13), S( -23,   10), S( -24,   16), S( -18,    6), S(  -9,   -1), S(  -7,    7), S(   0,   -5), S(  -9,  -11), 
};

constexpr int QUEEN_VALUE = S( 937, 1763);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -67,  -60), S(-128,  -84), S(-117,  -14), S(-103,  -25), S( -96,   46), 
    S( -80,   40), S( -70,   51), S( -56,   48), S( -42,   53), S( -29,   60), S( -16,   59), S(  -2,   61), S(   9,   66), 
    S(  20,   68), S(  33,   72), S(  42,   76), S(  54,   75), S(  65,   81), S(  79,   76), S(  92,   73), S( 111,   65), 
    S( 126,   54), S( 143,   55), S( 132,   71), S( 107,   89), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -29,   40), S( -58,   79), S( -32,   98), S(  29,   49), S( -38,  118), S( -13,   96), S( -18,   76), S( -36,   90), 
    S(  -1,   36), S( -31,   68), S( -34,  114), S( -51,  144), S( -50,  167), S( -15,  127), S( -26,  116), S(  27,   95), 
    S(   3,   36), S(  -7,   49), S( -14,   90), S(  -8,   99), S(  -4,  123), S(  31,  117), S(  36,   87), S(  45,   55), 
    S( -18,   61), S( -13,   62), S( -18,   76), S( -20,  103), S( -21,  118), S(  -8,  102), S(   2,  100), S(   6,   80), 
    S(  -7,   35), S( -20,   68), S( -16,   58), S( -11,   82), S( -12,   81), S(  -8,   68), S(   2,   58), S(  10,   50), 
    S(  -8,   16), S(  -2,   25), S(  -6,   46), S(  -5,   37), S(  -1,   44), S(   2,   43), S(  17,   22), S(  13,   11), 
    S(   2,    6), S(   3,    6), S(  11,   -1), S(  15,    5), S(  11,   14), S(  23,  -22), S(  36,  -60), S(  45,  -91), 
    S(  -3,    3), S(  -2,    0), S(   6,    2), S(  13,   20), S(  12,   -3), S(  -4,   -7), S(  14,  -30), S(   0,   -8), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -41,   16), S(  -8,    7), S(  19,   -7), S(  39,  -35), 
};

constexpr int KING_PSQT[64]
{
    S(-105, -181), S(  94,  -89), S(   8,  -30), S( -43,   13), S(   1,   -1), S( -10,   11), S(  -6,   -3), S( -18, -137), 
    S(  -8,  -14), S(  40,   28), S(   3,   45), S(  45,   38), S( -24,   74), S(  22,   76), S(  13,   70), S( -83,   43), 
    S(-122,   34), S(  28,   51), S(   3,   71), S( -79,  103), S( -31,  108), S(  43,   93), S(  44,   81), S( -64,   49), 
    S( -94,   20), S( -27,   49), S( -75,   86), S(-126,  107), S( -79,  101), S( -40,   93), S( -57,   79), S(-111,   46), 
    S( -81,    3), S( -36,   28), S( -37,   57), S( -83,   83), S( -75,   80), S( -37,   59), S( -35,   37), S(-126,   31), 
    S(  -3,  -26), S(  69,   -9), S(   4,   25), S( -12,   43), S(  -6,   42), S(  -1,   27), S(  49,   -4), S( -14,   -9), 
    S(  86,  -54), S(  72,  -26), S(  56,  -10), S(  16,    6), S(  16,    9), S(  33,   -1), S(  86,  -30), S(  51,  -40), 
    S(  39,  -92), S(  79,  -60), S(  62,  -38), S( -23,  -25), S(  40,  -50), S( -10,  -20), S(  67,  -56), S(  51,  -97), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(   9,  -21), S( -18,   -1), S( -25,   12), S( -38,    5), S( -33,    8), S( -16,  -15), 
    S( -48,   33), S( -31,  -42), S( -89,   20), S( -66,   -6), S( -40,  -39), S( -98,   52), S( -82,  -37), S(-101,  -72), 
    S(-119,   29), S( -95,  -25), S(-124,   65), S(-126,  -32), S(-167,  -71), S(-190,   51), S(-203,   15), S(-152,   13), 
    S(-170,  -45), S(-190, -181), S(-200, -195), S(-199, -138), S(-271,  -48), S(-215,  -75), S(-250,  -79), S(-293, -181), 
    S(-290, -207), S(-366, -278), S(-395, -260), S(-112,  -88), S(-377, -231), S(-320, -207), S(-375, -227), S(-245, -200), 
    S(-161, -188), S(-228, -235), S(-234, -214), S(-236, -145), S(-323, -224), S(-100,  -41), S(-352, -198), S(-127,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    3);
