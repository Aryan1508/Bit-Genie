
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  96,  147);

constexpr int PAWN_STACKED = S(  -3,  -14);

constexpr int PAWN_ISOLATED = S( -12,  -17);

constexpr int SUPPORTED_PASSER = S(  14,    6);

constexpr int PASSER_TEMPO = S(  54,   37);

constexpr int PAWN_SUPPORT = S(  11,   10);

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -73,   67), S( -78,   42), S( -98,   27), S( -74,  -38), S( -64,  -30), S(-100,    7), S(-105,   25), S(-129,   63), 
    S( -12,   29), S(   0,   21), S(  29,    7), S(  33,   22), S(  46,    6), S(  92,  -13), S(  65,   31), S(  25,   25), 
    S( -36,   18), S( -10,   -1), S(  -1,   -5), S(   2,  -20), S(  27,  -21), S(  21,  -19), S(  13,  -10), S(  -4,   -8), 
    S( -46,   -2), S( -19,  -10), S(  -5,  -12), S(   8,  -16), S(  12,  -17), S(  11,  -19), S(   0,  -22), S( -21,  -22), 
    S( -51,   -9), S( -26,  -18), S( -14,  -10), S(  -9,   -8), S(   6,   -7), S(  -4,   -8), S(  13,  -32), S( -18,  -30), 
    S( -44,   -6), S( -16,  -12), S( -14,   -4), S( -23,    4), S(  -7,   10), S(   5,    1), S(  23,  -23), S( -34,  -24), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 236,  254), S( 142,  319), S( 133,  337), S( 182,  319), S( 174,  298), S( 111,  294), S( 155,  350), S( 207,  298), 
    S(   2,  242), S(   1,  253), S( -17,  211), S( -10,  130), S( -11,  137), S( -63,  203), S( -45,  228), S( -53,  242), 
    S( -13,  128), S( -20,  123), S( -21,   84), S( -17,   63), S( -31,   59), S( -28,   88), S( -63,  131), S( -38,  127), 
    S( -37,   75), S( -48,   63), S( -50,   37), S( -44,   15), S( -52,   24), S( -45,   39), S( -64,   74), S( -37,   69), 
    S( -29,   12), S( -48,   17), S( -52,    2), S( -41,   -9), S( -46,   -6), S( -43,   -2), S( -53,   31), S( -14,    8), 
    S( -32,   13), S( -28,    7), S( -33,   -5), S( -33,  -12), S( -16,  -25), S(  -8,  -21), S( -18,   -5), S( -11,    5), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S(  89,  170), S( 186,   91), S( 229,   85), S( 223,  101), S( 183,   87), S( 200,   68), S( 129,   23), S(  73,   83), 
    S(  38,   98), S(  80,   75), S(  57,   36), S(  27,   12), S(  20,   18), S(  31,   39), S(  12,    5), S( -44,   44), 
    S(  42,   59), S(  39,   57), S(  31,   28), S(  18,   32), S(  -2,   31), S(  15,   28), S(  12,   41), S(  -7,   37), 
    S(  31,   35), S(  22,   37), S( -18,   22), S( -13,   21), S( -23,   30), S( -20,   32), S(   2,   54), S(  -7,   35), 
    S(  11,   14), S(  -5,   36), S( -25,   19), S( -28,   14), S( -30,   19), S( -15,   19), S( -23,   51), S( -10,   21), 
    S(   4,   -2), S(   0,   25), S( -23,   18), S( -15,   20), S(  -6,   -1), S( -13,    4), S(  13,    6), S(  -6,   18), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 367,  489);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-142, -173), S( -36,  -64), S( -14,  -13), S(  -2,   20), S(  11,   34), S(  13,   50), S(  24,   53), S(  36,   56), 
    S(  49,   52), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-176,  -39), S(-172,   11), S( -99,   14), S(-111,   23), S( -43,   11), S( -85,  -39), S(-144,   -5), S(-130,  -62), 
    S( -53,   16), S( -29,   15), S(  16,   -6), S(  40,  -10), S(   7,  -10), S(  69,  -32), S( -28,    9), S( -16,   -7), 
    S( -28,    5), S(  21,   -5), S(  45,    5), S(  54,    7), S(  87,  -10), S(  91,  -20), S(  36,  -13), S(  -6,   -4), 
    S( -23,   25), S(   2,   13), S(  39,   19), S(  72,   18), S(  47,   15), S(  64,   17), S(   8,   14), S(  12,   12), 
    S( -32,   25), S(  -9,    7), S(  23,   16), S(  33,   19), S(  38,   22), S(  38,    6), S(  21,    4), S( -16,   22), 
    S( -53,    2), S( -21,   -3), S(   5,  -13), S(  11,   11), S(  28,    7), S(   9,  -16), S(   6,   -9), S( -33,    5), 
    S( -63,    8), S( -51,    6), S( -23,  -12), S(  -4,   -9), S(  -7,  -11), S(  -4,  -13), S( -25,   -1), S( -36,   23), 
    S(-114,   35), S( -55,   -6), S( -65,   -3), S( -48,   -3), S( -43,    6), S( -35,   -9), S( -49,    2), S( -77,   25), 
};

constexpr int BISHOP_VALUE = S( 401,  467);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -95,    9), S( -70,   -6), S( -54,   31), S( -27,   38), S( -12,   48), S(  11,   63), S(  30,   67), 
    S(  48,   75), S(  60,   75), S(  75,   77), S(  85,   69), S(  95,   61), S( 125,   52), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -30,   31), S( -78,   45), S( -54,   30), S(-112,   47), S(-100,   44), S( -71,   22), S( -35,   29), S( -57,   20), 
    S( -14,   16), S(  -3,   16), S( -12,   15), S( -36,   23), S(   0,    3), S( -16,   16), S( -16,   20), S( -23,   14), 
    S(  -2,   38), S(  10,   22), S(  10,   15), S(  22,    3), S(   7,   14), S(  46,   21), S(  21,   24), S(  24,   34), 
    S( -12,   30), S(  -1,   28), S(   5,   18), S(  22,   35), S(  17,   24), S(   6,   26), S(   3,   18), S( -16,   35), 
    S(  -4,   23), S( -14,   24), S( -10,   25), S(  14,   28), S(   9,   25), S(  -4,   16), S( -12,   22), S(  11,    4), 
    S(   1,   18), S(   6,   21), S(   3,   18), S(   0,   17), S(   4,   23), S(   6,   17), S(  11,    9), S(  21,    6), 
    S(  16,   13), S(  12,    2), S(  17,  -10), S(  -3,    9), S(   4,   13), S(  16,    4), S(  37,    8), S(  18,   -9), 
    S(  12,    4), S(  24,    6), S(   8,   12), S(  -4,   17), S(   3,   16), S(   2,   26), S(  17,   -2), S(  32,  -27), 
};

constexpr int ROOK_VALUE = S( 466,  869);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    2);

constexpr int FRIENDLY_FILE = S(  11,   -9);

constexpr int FRIENDLY_RANK = S(  -1,   -6);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -62,   36), S( -42,   52), S( -26,   58), S( -11,   62), S(   3,   62), S(   9,   65), 
    S(  25,   59), S(  39,   61), S(  52,   66), S(  65,   67), S(  77,   69), S(  84,   73), S(  98,   63), 
};

constexpr int ROOK_PSQT[64]
{
    S( -12,   45), S( -39,   60), S( -24,   61), S( -35,   59), S( -24,   52), S(  -5,   49), S(  -4,   49), S(  23,   34), 
    S( -28,   49), S( -36,   64), S( -22,   68), S(  -6,   52), S( -23,   55), S(   3,   43), S(   5,   37), S(  29,   27), 
    S( -41,   47), S( -11,   42), S( -22,   43), S( -23,   34), S(  13,   21), S(  12,   20), S(  69,    7), S(  28,    9), 
    S( -37,   47), S( -25,   40), S( -32,   48), S( -25,   37), S( -20,   19), S( -12,   20), S(   2,   20), S(  -1,   15), 
    S( -44,   33), S( -51,   36), S( -41,   32), S( -37,   27), S( -32,   24), S( -40,   23), S( -11,   10), S( -22,    9), 
    S( -44,   20), S( -45,   19), S( -42,   16), S( -36,   15), S( -24,    9), S( -22,    0), S(  12,  -23), S(  -8,  -19), 
    S( -41,    6), S( -39,   14), S( -31,   13), S( -31,    9), S( -23,    2), S( -11,   -7), S(   9,  -22), S( -27,  -14), 
    S( -18,   13), S( -24,   10), S( -25,   16), S( -18,    7), S( -10,    0), S(  -7,    7), S(   0,   -5), S(  -9,  -12), 
};

constexpr int QUEEN_VALUE = S( 951, 1778);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -64,  -60), S(-120,  -82), S(-111,  -11), S(-101,  -20), S( -95,   56), 
    S( -80,   49), S( -70,   60), S( -55,   55), S( -42,   56), S( -28,   62), S( -15,   59), S(  -1,   61), S(  10,   65), 
    S(  21,   67), S(  33,   70), S(  43,   74), S(  55,   73), S(  67,   79), S(  80,   73), S(  93,   69), S( 110,   64), 
    S( 125,   50), S( 138,   52), S( 125,   67), S( 103,   86), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -27,   36), S( -56,   77), S( -30,   97), S(  35,   45), S( -39,  121), S( -10,   95), S( -19,   79), S( -37,   91), 
    S(   0,   35), S( -32,   70), S( -34,  116), S( -50,  144), S( -48,  167), S( -15,  132), S( -28,  123), S(  27,   98), 
    S(   3,   35), S(  -6,   48), S( -14,   91), S(  -6,   99), S(  -3,  125), S(  30,  121), S(  35,   94), S(  45,   52), 
    S( -19,   62), S( -12,   62), S( -18,   79), S( -19,  105), S( -20,  120), S(  -7,  102), S(   2,  101), S(   6,   78), 
    S(  -7,   35), S( -20,   68), S( -16,   59), S( -11,   84), S( -12,   82), S(  -8,   68), S(   2,   58), S(  11,   48), 
    S(  -8,   18), S(  -1,   25), S(  -5,   46), S(  -5,   38), S(   0,   45), S(   2,   43), S(  18,   21), S(  14,    8), 
    S(   0,    9), S(   3,    5), S(  12,   -2), S(  14,    6), S(  11,   14), S(  24,  -23), S(  36,  -62), S(  46,  -93), 
    S(  -3,    2), S(  -2,   -1), S(   5,    2), S(  14,   18), S(  12,   -4), S(  -4,   -8), S(  14,  -29), S(  -2,   -6), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -41,   15), S(  -9,    5), S(  19,   -4), S(  40,  -34), 
};

constexpr int KING_PSQT[64]
{
    S(-112, -195), S(  95,  -91), S(   8,  -30), S( -42,   13), S(   3,    2), S( -10,   11), S(  -9,   -8), S( -20, -139), 
    S(  -5,  -11), S(  42,   28), S(   6,   46), S(  44,   39), S( -26,   76), S(  21,   77), S(  11,   72), S( -86,   45), 
    S(-123,   35), S(  27,   52), S(   7,   70), S( -81,  104), S( -34,  109), S(  39,   95), S(  42,   82), S( -68,   51), 
    S( -97,   21), S( -27,   49), S( -77,   87), S(-130,  109), S( -78,  101), S( -41,   94), S( -63,   81), S(-114,   47), 
    S( -84,    4), S( -40,   29), S( -33,   57), S( -81,   83), S( -73,   80), S( -40,   60), S( -38,   38), S(-130,   33), 
    S(  -4,  -26), S(  69,   -8), S(   5,   25), S( -11,   43), S(  -5,   42), S(   0,   27), S(  51,   -5), S( -14,  -10), 
    S(  88,  -54), S(  74,  -26), S(  58,  -10), S(  17,    6), S(  18,   10), S(  35,   -2), S(  88,  -30), S(  54,  -40), 
    S(  40,  -91), S(  81,  -61), S(  64,  -40), S( -22,  -26), S(  42,  -50), S(  -8,  -21), S(  68,  -57), S(  53,  -98), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(   8,  -21), S( -20,    1), S( -25,   12), S( -38,    5), S( -33,    8), S( -16,  -16), 
    S( -47,   34), S( -31,  -43), S( -88,   19), S( -66,   -7), S( -40,  -39), S( -98,   51), S( -82,  -41), S(-103,  -72), 
    S(-120,   30), S( -96,  -25), S(-123,   61), S(-127,  -32), S(-173,  -74), S(-193,   49), S(-205,   14), S(-154,   10), 
    S(-170,  -50), S(-192, -183), S(-207, -201), S(-203, -143), S(-275,  -51), S(-217,  -82), S(-251,  -79), S(-292, -182), 
    S(-291, -208), S(-366, -278), S(-399, -263), S(-109,  -87), S(-376, -230), S(-320, -207), S(-375, -227), S(-245, -200), 
    S(-161, -188), S(-228, -235), S(-234, -214), S(-236, -145), S(-323, -224), S( -99,  -41), S(-352, -198), S(-127,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    3);
