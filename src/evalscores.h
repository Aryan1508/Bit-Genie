
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  89,  140);

constexpr int PAWN_STACKED = S(  -2,  -15);

constexpr int PAWN_ISOLATED = S(  -7,  -12);

constexpr int SUPPORTED_PASSER = S(  13,    8);

constexpr int PASSER_TEMPO = S(  54,   36);

constexpr int PAWN_SUPPORT = S(  19,   16);

constexpr int PHALANX[8]
{
    S(   0,    0), S(   7,    2), S(  16,   13), S(  29,   28), S(  57,   85), S(  90,  111), S(  21,   54), S(   0,    0), 
};

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -83,   67), S( -71,   39), S( -97,   28), S( -72,  -38), S( -64,  -29), S( -87,    3), S(-104,   26), S(-122,   59), 
    S(  -5,   33), S(   7,   25), S(  37,    5), S(  40,   20), S(  54,   -5), S(  95,   -5), S(  72,   39), S(  30,   29), 
    S( -33,   18), S(  -9,   -4), S(  -2,   -8), S(   3,  -23), S(  29,  -23), S(  20,  -23), S(  14,  -11), S(  -3,   -7), 
    S( -44,   -3), S( -20,  -12), S(  -9,  -15), S(   2,  -18), S(  10,  -19), S(   8,  -21), S(   2,  -24), S( -19,  -23), 
    S( -49,   -9), S( -26,  -18), S( -17,  -11), S( -11,   -9), S(   4,   -7), S(  -8,   -9), S(  11,  -32), S( -19,  -29), 
    S( -41,   -3), S( -14,   -7), S( -13,   -1), S( -21,    7), S(  -8,   13), S(   7,    4), S(  25,  -17), S( -32,  -21), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 196,  268), S( 160,  307), S( 143,  328), S( 187,  314), S( 177,  292), S( 131,  283), S( 151,  345), S( 216,  292), 
    S(  -2,  235), S(  -4,  243), S( -21,  207), S( -11,  127), S( -14,  146), S( -50,  182), S( -61,  216), S( -53,  233), 
    S( -12,  124), S( -18,  120), S( -17,   82), S( -17,   60), S( -33,   56), S( -25,   85), S( -58,  124), S( -33,  121), 
    S( -37,   74), S( -44,   61), S( -45,   37), S( -38,   14), S( -50,   24), S( -40,   40), S( -61,   73), S( -37,   67), 
    S( -30,   12), S( -45,   17), S( -48,    2), S( -37,   -8), S( -42,   -5), S( -39,   -1), S( -51,   32), S( -13,    8), 
    S( -34,   11), S( -27,    3), S( -32,   -6), S( -34,   -9), S( -12,  -27), S(  -7,  -22), S( -18,   -6), S( -12,    4), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 121,  155), S( 175,  101), S( 222,   94), S( 219,  106), S( 182,   94), S( 193,   74), S( 136,   29), S(  71,   86), 
    S(  35,   92), S(  73,   71), S(  51,   40), S(  24,   13), S(  16,   31), S(  29,   31), S(   8,   -7), S( -47,   41), 
    S(  42,   55), S(  42,   54), S(  34,   28), S(  18,   32), S(  -4,   29), S(  20,   27), S(  14,   37), S(  -6,   33), 
    S(  32,   33), S(  25,   36), S( -13,   22), S(  -8,   20), S( -21,   30), S( -15,   32), S(   3,   53), S(  -7,   33), 
    S(  10,   13), S(  -3,   37), S( -21,   19), S( -24,   14), S( -26,   19), S(  -7,   16), S( -20,   50), S(  -8,   19), 
    S(   3,   -4), S(   2,   20), S( -22,   16), S( -10,   16), S(  -2,   -2), S( -12,    2), S(  14,    3), S(  -6,   15), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 368,  481);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-140, -169), S( -37,  -59), S( -14,  -10), S(  -2,   20), S(  11,   32), S(  13,   46), S(  24,   48), S(  36,   51), 
    S(  47,   47), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-172,  -49), S(-177,    8), S(-107,   17), S( -89,   12), S( -42,    8), S( -88,  -29), S(-145,   -1), S(-127,  -74), 
    S( -53,   12), S( -29,   15), S(  14,   -5), S(  36,   -6), S(  10,  -11), S(  66,  -29), S( -28,    8), S( -13,  -14), 
    S( -27,    3), S(  21,   -3), S(  45,    7), S(  53,    8), S(  85,   -7), S(  88,  -17), S(  35,  -10), S(  -6,   -6), 
    S( -23,   23), S(   1,   15), S(  39,   20), S(  71,   19), S(  47,   16), S(  63,   18), S(   8,   15), S(  12,   10), 
    S( -32,   23), S(  -9,    7), S(  22,   18), S(  32,   19), S(  37,   24), S(  36,    7), S(  22,    5), S( -15,   19), 
    S( -52,    0), S( -22,   -2), S(   4,  -11), S(  10,   12), S(  27,    8), S(   9,  -14), S(   5,   -8), S( -32,    3), 
    S( -62,    2), S( -51,    5), S( -23,   -9), S(  -5,   -8), S(  -7,  -10), S(  -4,  -11), S( -25,   -3), S( -34,   19), 
    S(-110,   19), S( -55,   -4), S( -65,   -3), S( -49,   -2), S( -43,    6), S( -35,   -9), S( -48,    3), S( -76,   14), 
};

constexpr int BISHOP_VALUE = S( 401,  457);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -96,    0), S( -70,   -6), S( -53,   31), S( -27,   38), S( -12,   48), S(  11,   62), S(  30,   66), 
    S(  47,   73), S(  60,   72), S(  76,   74), S(  87,   66), S(  95,   58), S( 122,   52), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -27,   29), S( -70,   42), S( -61,   32), S(-106,   44), S( -93,   41), S( -71,   22), S( -41,   30), S( -59,   23), 
    S( -15,   16), S(  -4,   16), S( -13,   15), S( -34,   22), S(   0,    2), S( -17,   15), S( -17,   20), S( -22,   15), 
    S(  -3,   37), S(  11,   22), S(  10,   15), S(  21,    3), S(   6,   14), S(  45,   21), S(  20,   24), S(  24,   33), 
    S( -12,   29), S(  -2,   27), S(   4,   18), S(  20,   34), S(  16,   22), S(   5,   25), S(   4,   17), S( -15,   35), 
    S(  -3,   23), S( -14,   23), S( -10,   24), S(  12,   26), S(   8,   23), S(  -4,   14), S( -12,   21), S(  13,    3), 
    S(   1,   18), S(   5,   21), S(   2,   17), S(  -1,   17), S(   3,   22), S(   5,   16), S(  11,    8), S(  21,    5), 
    S(  18,   12), S(  13,    1), S(  16,   -9), S(  -3,    8), S(   4,   13), S(  15,    4), S(  37,    6), S(  19,   -9), 
    S(  12,    5), S(  24,    6), S(   8,   13), S(  -3,   17), S(   4,   15), S(   2,   26), S(  15,    0), S(  31,  -24), 
};

constexpr int ROOK_VALUE = S( 466,  851);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    2);

constexpr int RR_FILE = S(  11,   -6);

constexpr int RR_RANK = S(  22,   18);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -60,   30), S( -42,   52), S( -26,   57), S( -11,   62), S(   3,   62), S(   9,   65), 
    S(  24,   59), S(  38,   60), S(  51,   65), S(  64,   65), S(  75,   66), S(  83,   70), S(  96,   61), 
};

constexpr int ROOK_PSQT[64]
{
    S( -11,   44), S( -34,   58), S( -31,   64), S( -33,   57), S( -22,   51), S(  -7,   49), S(  -5,   49), S(  18,   36), 
    S( -30,   47), S( -36,   61), S( -23,   65), S(  -7,   49), S( -24,   51), S(   1,   40), S(   5,   33), S(  25,   25), 
    S( -40,   46), S(  -9,   41), S( -21,   43), S( -22,   34), S(  12,   21), S(  13,   20), S(  66,    9), S(  29,    9), 
    S( -36,   46), S( -24,   40), S( -31,   48), S( -23,   36), S( -19,   20), S( -11,   21), S(   3,   21), S(   1,   16), 
    S( -42,   33), S( -49,   36), S( -40,   32), S( -36,   27), S( -31,   24), S( -38,   23), S( -10,   11), S( -20,    9), 
    S( -44,   21), S( -44,   19), S( -41,   16), S( -35,   15), S( -24,    9), S( -20,    0), S(  14,  -22), S(  -7,  -18), 
    S( -41,    7), S( -39,   14), S( -31,   13), S( -30,    9), S( -22,    2), S( -11,   -6), S(   9,  -21), S( -27,  -13), 
    S( -20,   11), S( -25,    9), S( -27,   15), S( -20,    5), S( -11,   -2), S(  -9,    5), S(  -1,   -6), S( -11,  -13), 
};

constexpr int QUEEN_VALUE = S( 944, 1741);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -79,  -62), S(-148,  -90), S(-117,  -24), S( -99,  -42), S( -90,   20), 
    S( -76,   26), S( -67,   46), S( -54,   47), S( -41,   54), S( -28,   61), S( -15,   60), S(  -2,   62), S(   9,   67), 
    S(  20,   70), S(  32,   74), S(  41,   78), S(  52,   78), S(  63,   85), S(  77,   80), S(  88,   79), S( 108,   70), 
    S( 120,   63), S( 145,   55), S( 148,   72), S( 122,   98), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -35,   53), S( -62,   86), S( -38,  105), S(  12,   67), S( -29,  110), S( -23,  106), S(  -7,   65), S( -31,   88), 
    S(  -3,   40), S( -32,   69), S( -32,  111), S( -51,  143), S( -51,  169), S( -10,  119), S( -20,  101), S(  30,   93), 
    S(   2,   39), S(  -8,   50), S( -14,   88), S(  -7,   97), S(  -3,  119), S(  35,  108), S(  42,   73), S(  44,   61), 
    S( -18,   60), S( -12,   60), S( -16,   71), S( -18,   96), S( -19,  112), S(  -6,   99), S(   3,   98), S(   5,   83), 
    S(  -7,   37), S( -20,   67), S( -15,   54), S( -10,   76), S( -11,   75), S(  -6,   65), S(   3,   58), S(   9,   55), 
    S(  -7,   15), S(  -1,   25), S(  -6,   44), S(  -4,   34), S(   0,   42), S(   3,   42), S(  17,   23), S(  11,   18), 
    S(   3,    3), S(   3,    7), S(  11,   -1), S(  15,    5), S(  12,   13), S(  23,  -21), S(  33,  -56), S(  43,  -81), 
    S(  -2,    6), S(  -2,    3), S(   5,    3), S(  12,   23), S(  11,   -1), S(  -5,   -5), S(  15,  -29), S(   5,  -16), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -42,   17), S(  -7,    6), S(  20,   -6), S(  37,  -36), 
};

constexpr int KING_PSQT[64]
{
    S( -81, -136), S(  87,  -84), S(  10,  -31), S( -46,   14), S(  -5,   -6), S( -11,   11), S(   4,    7), S(  -8, -129), 
    S( -20,  -14), S(  31,   28), S(  -9,   45), S(  48,   35), S( -15,   69), S(  26,   73), S(  22,   67), S( -70,   39), 
    S(-117,   32), S(  31,   48), S( -11,   72), S( -71,   99), S( -20,  103), S(  57,   88), S(  52,   77), S( -45,   44), 
    S( -82,   16), S( -27,   47), S( -68,   82), S(-114,  102), S( -82,   99), S( -39,   90), S( -40,   72), S(-103,   43), 
    S( -70,   -1), S( -25,   23), S( -48,   57), S( -88,   81), S( -80,   78), S( -37,   56), S( -33,   34), S(-118,   28), 
    S(  -2,  -28), S(  67,  -11), S(   0,   24), S( -16,   41), S( -10,   40), S(  -5,   25), S(  45,   -5), S( -17,  -10), 
    S(  82,  -52), S(  68,  -26), S(  52,  -10), S(  12,    6), S(  12,   10), S(  29,   -2), S(  81,  -30), S(  48,  -39), 
    S(  35,  -89), S(  75,  -58), S(  57,  -37), S( -27,  -24), S(  35,  -48), S( -14,  -19), S(  63,  -54), S(  48,  -94), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  10,  -22), S( -15,   -1), S( -26,   12), S( -38,    5), S( -33,    9), S( -16,  -14), 
    S( -48,   34), S( -33,  -32), S( -90,   25), S( -66,   -4), S( -40,  -37), S(-100,   57), S( -86,  -29), S( -99,  -72), 
    S(-117,   26), S( -94,  -26), S(-129,   80), S(-124,  -33), S(-152,  -60), S(-189,   54), S(-202,   15), S(-154,   25), 
    S(-177,  -29), S(-182, -174), S(-182, -175), S(-192, -123), S(-259,  -37), S(-219,  -52), S(-247,  -78), S(-295, -178), 
    S(-284, -204), S(-367, -278), S(-379, -247), S(-124,  -93), S(-382, -234), S(-319, -206), S(-376, -227), S(-247, -200), 
    S(-161, -188), S(-228, -235), S(-234, -214), S(-236, -145), S(-323, -224), S(-103,  -42), S(-352, -198), S(-127,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    3);
