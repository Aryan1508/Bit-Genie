
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  89,  141);

constexpr int PAWN_STACKED = S(  -2,  -15);

constexpr int PAWN_ISOLATED = S(  -7,  -13);

constexpr int SUPPORTED_PASSER = S(  13,    8);

constexpr int PASSER_TEMPO = S(  53,   36);

constexpr int PAWN_SUPPORT = S(  19,   16);

constexpr int PHALANX[8]
{
    S(   0,    0), S(   7,    2), S(  16,   13), S(  29,   28), S(  58,   64), S(  60,   71), S(  14,   36), S(   0,    0), 
};

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -82,   67), S( -71,   39), S( -97,   28), S( -73,  -38), S( -64,  -29), S( -89,    3), S(-104,   26), S(-123,   59), 
    S(  -6,   32), S(   7,   24), S(  37,    5), S(  40,   21), S(  53,   -3), S(  95,   -6), S(  72,   38), S(  30,   28), 
    S( -33,   18), S(  -9,   -3), S(  -3,   -7), S(   3,  -23), S(  29,  -23), S(  20,  -22), S(  15,  -11), S(  -3,   -7), 
    S( -44,   -4), S( -20,  -13), S(  -9,  -15), S(   2,  -18), S(  10,  -20), S(   7,  -22), S(   2,  -25), S( -19,  -24), 
    S( -49,   -9), S( -27,  -18), S( -17,  -12), S( -11,   -9), S(   4,   -8), S(  -8,   -9), S(  11,  -33), S( -20,  -30), 
    S( -41,   -3), S( -14,   -8), S( -13,   -2), S( -22,    6), S(  -8,   13), S(   7,    3), S(  25,  -18), S( -33,  -21), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 203,  265), S( 157,  308), S( 141,  329), S( 186,  315), S( 176,  293), S( 127,  285), S( 151,  345), S( 214,  293), 
    S(  -2,  236), S(  -3,  245), S( -20,  208), S( -10,  128), S( -13,  144), S( -51,  185), S( -58,  218), S( -53,  234), 
    S( -12,  125), S( -19,  120), S( -18,   83), S( -17,   61), S( -33,   57), S( -25,   86), S( -59,  125), S( -34,  122), 
    S( -37,   75), S( -44,   62), S( -45,   38), S( -38,   14), S( -49,   25), S( -40,   40), S( -61,   74), S( -37,   68), 
    S( -29,   12), S( -45,   18), S( -48,    3), S( -37,   -7), S( -43,   -5), S( -39,   -1), S( -51,   33), S( -13,    9), 
    S( -33,   12), S( -27,    4), S( -32,   -5), S( -34,   -9), S( -12,  -26), S(  -7,  -21), S( -18,   -5), S( -12,    4), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 115,  159), S( 177,   99), S( 223,   93), S( 220,  105), S( 182,   93), S( 195,   72), S( 135,   29), S(  72,   85), 
    S(  35,   93), S(  73,   72), S(  51,   39), S(  25,   13), S(  17,   29), S(  29,   33), S(   8,   -4), S( -47,   41), 
    S(  42,   56), S(  42,   54), S(  34,   28), S(  18,   33), S(  -4,   30), S(  20,   27), S(  14,   38), S(  -6,   34), 
    S(  32,   34), S(  25,   37), S( -13,   23), S(  -8,   20), S( -21,   31), S( -15,   32), S(   3,   54), S(  -7,   34), 
    S(  10,   13), S(  -3,   38), S( -21,   19), S( -24,   14), S( -26,   19), S(  -7,   17), S( -20,   51), S(  -8,   19), 
    S(   4,   -4), S(   1,   21), S( -22,   17), S( -11,   17), S(  -2,   -1), S( -12,    3), S(  14,    4), S(  -6,   16), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 367,  481);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-140, -170), S( -37,  -59), S( -13,  -10), S(  -2,   20), S(  11,   32), S(  13,   46), S(  25,   49), S(  36,   51), 
    S(  47,   47), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-173,  -47), S(-176,    8), S(-105,   16), S( -94,   14), S( -43,    8), S( -87,  -31), S(-145,   -2), S(-128,  -72), 
    S( -53,   13), S( -29,   15), S(  14,   -5), S(  36,   -7), S(  10,  -11), S(  66,  -30), S( -28,    8), S( -14,  -14), 
    S( -27,    3), S(  21,   -3), S(  45,    6), S(  53,    8), S(  85,   -7), S(  88,  -17), S(  35,  -10), S(  -6,   -6), 
    S( -23,   23), S(   1,   14), S(  39,   20), S(  71,   18), S(  47,   16), S(  63,   18), S(   8,   15), S(  12,   10), 
    S( -32,   23), S(  -8,    8), S(  22,   18), S(  32,   19), S(  37,   23), S(  37,    7), S(  22,    5), S( -15,   19), 
    S( -52,    0), S( -22,   -2), S(   5,  -11), S(  11,   12), S(  28,    8), S(  10,  -14), S(   5,   -8), S( -32,    3), 
    S( -62,    2), S( -51,    5), S( -23,  -10), S(  -5,   -8), S(  -7,  -10), S(  -4,  -11), S( -25,   -3), S( -34,   19), 
    S(-112,   21), S( -55,   -4), S( -65,   -3), S( -49,   -2), S( -43,    6), S( -35,   -9), S( -48,    2), S( -77,   16), 
};

constexpr int BISHOP_VALUE = S( 401,  457);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -97,    2), S( -70,   -7), S( -53,   31), S( -27,   38), S( -12,   48), S(  11,   62), S(  30,   66), 
    S(  47,   73), S(  60,   72), S(  76,   74), S(  87,   66), S(  95,   59), S( 122,   53), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -28,   29), S( -71,   42), S( -60,   32), S(-107,   45), S( -94,   41), S( -71,   22), S( -40,   30), S( -58,   22), 
    S( -14,   17), S(  -3,   17), S( -12,   15), S( -34,   22), S(   0,    2), S( -17,   15), S( -16,   20), S( -22,   15), 
    S(  -3,   37), S(  11,   22), S(  10,   15), S(  21,    3), S(   6,   14), S(  45,   21), S(  20,   24), S(  24,   33), 
    S( -12,   30), S(  -2,   27), S(   5,   18), S(  20,   34), S(  17,   22), S(   5,   25), S(   4,   17), S( -15,   34), 
    S(  -3,   23), S( -14,   23), S( -10,   23), S(  12,   26), S(   8,   23), S(  -4,   14), S( -12,   21), S(  13,    3), 
    S(   1,   18), S(   5,   21), S(   2,   17), S(  -1,   17), S(   4,   22), S(   6,   16), S(  11,    8), S(  21,    5), 
    S(  18,   12), S(  13,    1), S(  16,   -9), S(  -3,    9), S(   4,   13), S(  15,    5), S(  37,    6), S(  19,   -9), 
    S(  12,    5), S(  24,    6), S(   8,   13), S(  -3,   17), S(   5,   15), S(   2,   27), S(  15,    0), S(  31,  -24), 
};

constexpr int ROOK_VALUE = S( 467,  852);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    1);

constexpr int FRIENDLY_FILE = S(  11,   -9);

constexpr int FRIENDLY_RANK = S(  -1,   -6);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -61,   30), S( -42,   51), S( -26,   57), S( -11,   62), S(   3,   62), S(   9,   65), 
    S(  25,   59), S(  38,   61), S(  51,   65), S(  64,   65), S(  76,   67), S(  83,   70), S(  96,   61), 
};

constexpr int ROOK_PSQT[64]
{
    S( -12,   44), S( -36,   58), S( -32,   63), S( -35,   57), S( -24,   50), S(  -7,   49), S(  -6,   48), S(  18,   35), 
    S( -29,   48), S( -35,   62), S( -22,   66), S(  -5,   51), S( -22,   53), S(   3,   42), S(   7,   35), S(  27,   26), 
    S( -41,   46), S( -10,   41), S( -22,   43), S( -23,   33), S(  11,   21), S(  12,   20), S(  65,    9), S(  28,    9), 
    S( -37,   46), S( -25,   40), S( -32,   47), S( -24,   36), S( -21,   20), S( -12,   20), S(   2,   20), S(   0,   15), 
    S( -43,   33), S( -50,   36), S( -41,   31), S( -37,   26), S( -32,   23), S( -39,   22), S( -11,   10), S( -22,    8), 
    S( -45,   20), S( -45,   18), S( -42,   16), S( -36,   15), S( -25,    8), S( -21,   -1), S(  13,  -23), S(  -8,  -19), 
    S( -41,    6), S( -40,   13), S( -31,   12), S( -31,    9), S( -23,    1), S( -11,   -7), S(   8,  -22), S( -27,  -14), 
    S( -18,   13), S( -23,    9), S( -25,   15), S( -18,    6), S(  -9,   -1), S(  -7,    7), S(   1,   -6), S(  -9,  -12), 
};

constexpr int QUEEN_VALUE = S( 939, 1746);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -75,  -61), S(-144,  -89), S(-118,  -21), S(-100,  -37), S( -92,   26), 
    S( -77,   28), S( -68,   46), S( -54,   47), S( -41,   53), S( -28,   61), S( -15,   60), S(  -2,   62), S(   9,   67), 
    S(  19,   70), S(  32,   74), S(  41,   78), S(  52,   78), S(  63,   84), S(  77,   79), S(  89,   77), S( 109,   69), 
    S( 121,   60), S( 145,   55), S( 144,   73), S( 118,   96), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -34,   50), S( -61,   84), S( -37,  103), S(  16,   61), S( -32,  112), S( -20,  103), S( -11,   68), S( -32,   88), 
    S(  -2,   40), S( -32,   69), S( -33,  111), S( -51,  143), S( -51,  169), S( -11,  120), S( -21,  104), S(  29,   93), 
    S(   2,   38), S(  -8,   50), S( -14,   89), S(  -7,   98), S(  -3,  120), S(  34,  110), S(  41,   75), S(  44,   60), 
    S( -18,   60), S( -12,   61), S( -16,   72), S( -18,   98), S( -19,  113), S(  -7,  100), S(   3,   99), S(   5,   82), 
    S(  -7,   37), S( -20,   67), S( -15,   55), S( -11,   77), S( -11,   77), S(  -7,   65), S(   3,   58), S(   9,   54), 
    S(  -7,   15), S(  -1,   25), S(  -6,   44), S(  -5,   34), S(   0,   42), S(   2,   42), S(  17,   23), S(  12,   17), 
    S(   3,    2), S(   2,    7), S(  11,   -1), S(  15,    5), S(  12,   14), S(  23,  -21), S(  33,  -57), S(  44,  -84), 
    S(  -2,    6), S(  -2,    3), S(   5,    3), S(  13,   23), S(  11,   -1), S(  -4,   -5), S(  15,  -30), S(   4,  -13), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -42,   16), S(  -7,    6), S(  20,   -6), S(  37,  -36), 
};

constexpr int KING_PSQT[64]
{
    S( -88, -149), S(  89,  -85), S(   9,  -31), S( -45,   14), S(  -3,   -5), S( -11,   11), S(   1,    5), S( -11, -131), 
    S( -16,  -14), S(  34,   28), S(  -5,   45), S(  47,   36), S( -18,   70), S(  25,   74), S(  19,   68), S( -74,   40), 
    S(-118,   32), S(  30,   49), S(  -7,   71), S( -73,  100), S( -23,  104), S(  53,   89), S(  50,   78), S( -51,   45), 
    S( -85,   17), S( -27,   47), S( -70,   83), S(-117,  103), S( -81,  100), S( -39,   91), S( -44,   74), S(-105,   44), 
    S( -73,    0), S( -27,   24), S( -45,   57), S( -87,   82), S( -78,   79), S( -36,   57), S( -33,   35), S(-119,   29), 
    S(  -2,  -27), S(  68,  -10), S(   1,   24), S( -14,   41), S(  -9,   41), S(  -3,   25), S(  46,   -5), S( -16,   -9), 
    S(  83,  -52), S(  69,  -26), S(  54,  -10), S(  13,    6), S(  13,   10), S(  30,   -2), S(  83,  -30), S(  49,  -39), 
    S(  36,  -90), S(  76,  -59), S(  58,  -37), S( -26,  -24), S(  37,  -48), S( -13,  -19), S(  64,  -55), S(  49,  -95), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  11,  -22), S( -16,   -2), S( -25,   12), S( -38,    5), S( -33,    8), S( -16,  -15), 
    S( -48,   33), S( -31,  -41), S( -90,   21), S( -66,   -5), S( -40,  -38), S( -99,   56), S( -85,  -31), S( -99,  -72), 
    S(-117,   27), S( -94,  -26), S(-128,   75), S(-125,  -33), S(-155,  -63), S(-189,   53), S(-202,   15), S(-153,   21), 
    S(-175,  -34), S(-184, -176), S(-186, -181), S(-193, -127), S(-262,  -40), S(-216,  -59), S(-248,  -78), S(-294, -179), 
    S(-286, -205), S(-367, -278), S(-384, -251), S(-120,  -91), S(-380, -233), S(-319, -206), S(-376, -227), S(-246, -200), 
    S(-161, -188), S(-228, -235), S(-234, -214), S(-236, -145), S(-323, -224), S(-102,  -42), S(-352, -198), S(-127,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    3);
