
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  96,  146);

constexpr int PAWN_STACKED = S(  -3,  -15);

constexpr int PAWN_ISOLATED = S( -12,  -16);

constexpr int SUPPORTED_PASSER = S(  14,    8);

constexpr int PASSER_TEMPO = S(  53,   37);

constexpr int PAWN_SUPPORT = S(  11,   11);

constexpr int CONNECTED_PASSER = S(  26,   34);

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -80,   66), S( -77,   39), S(-100,   26), S( -76,  -39), S( -66,  -31), S( -96,    3), S(-107,   24), S(-127,   60), 
    S( -11,   29), S(   1,   22), S(  31,    5), S(  34,   20), S(  48,    1), S(  91,  -10), S(  66,   33), S(  25,   25), 
    S( -35,   18), S( -10,    0), S(  -1,   -5), S(   2,  -20), S(  27,  -21), S(  21,  -18), S(  13,   -9), S(  -4,   -7), 
    S( -46,   -2), S( -19,   -9), S(  -5,  -12), S(   8,  -16), S(  12,  -16), S(  11,  -18), S(   0,  -20), S( -21,  -22), 
    S( -51,   -9), S( -25,  -16), S( -14,  -10), S(  -8,   -8), S(   7,   -6), S(  -4,   -7), S(  14,  -31), S( -18,  -29), 
    S( -43,   -5), S( -16,  -11), S( -14,   -4), S( -23,    5), S(  -7,   10), S(   5,    2), S(  23,  -21), S( -34,  -23), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 221,  258), S( 148,  313), S( 135,  333), S( 182,  316), S( 173,  294), S( 117,  289), S( 152,  347), S( 209,  295), 
    S(   1,  239), S(  -1,  249), S( -19,  209), S( -10,  128), S( -12,  140), S( -57,  192), S( -51,  222), S( -52,  237), 
    S( -12,  125), S( -21,  118), S( -21,   81), S( -18,   60), S( -32,   56), S( -29,   84), S( -63,  125), S( -36,  123), 
    S( -37,   72), S( -49,   58), S( -51,   35), S( -45,   13), S( -52,   21), S( -46,   35), S( -65,   68), S( -37,   65), 
    S( -29,   11), S( -48,   15), S( -53,    1), S( -42,  -10), S( -47,   -7), S( -44,   -4), S( -55,   28), S( -14,    7), 
    S( -36,   10), S( -40,   -1), S( -36,   -7), S( -36,  -12), S( -17,  -27), S( -12,  -23), S( -32,  -11), S( -15,    2), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 100,  165), S( 181,   95), S( 226,   89), S( 221,  103), S( 182,   90), S( 197,   69), S( 130,   26), S(  72,   83), 
    S(  37,   96), S(  75,   74), S(  53,   38), S(  26,   12), S(  18,   23), S(  29,   37), S(  10,    1), S( -45,   43), 
    S(  42,   56), S(  38,   53), S(  30,   26), S(  18,   30), S(  -3,   28), S(  15,   25), S(  10,   38), S(  -7,   34), 
    S(  30,   33), S(  20,   33), S( -19,   20), S( -14,   19), S( -23,   28), S( -21,   29), S(   0,   49), S(  -8,   32), 
    S(  11,   13), S(  -6,   35), S( -26,   17), S( -28,   13), S( -31,   18), S( -14,   15), S( -23,   48), S(  -9,   19), 
    S(   2,   -4), S(  -9,   20), S( -25,   16), S( -15,   18), S(  -7,   -2), S( -18,    2), S(  -1,   -1), S( -10,   15), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 366,  483);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-142, -172), S( -37,  -62), S( -14,  -12), S(  -2,   20), S(  10,   33), S(  12,   48), S(  24,   50), S(  36,   53), 
    S(  49,   49), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-173,  -42), S(-174,    9), S(-102,   14), S(-104,   18), S( -43,    9), S( -85,  -35), S(-144,   -3), S(-128,  -66), 
    S( -52,   14), S( -29,   15), S(  16,   -6), S(  38,   -8), S(   9,  -11), S(  68,  -30), S( -28,    9), S( -14,  -11), 
    S( -27,    4), S(  21,   -3), S(  45,    6), S(  53,    8), S(  86,   -9), S(  90,  -19), S(  36,  -12), S(  -6,   -5), 
    S( -23,   24), S(   2,   14), S(  39,   20), S(  71,   18), S(  47,   16), S(  63,   18), S(   8,   15), S(  12,   11), 
    S( -32,   24), S(  -9,    8), S(  23,   17), S(  33,   19), S(  38,   23), S(  37,    7), S(  20,    5), S( -16,   20), 
    S( -53,    1), S( -21,   -3), S(   5,  -12), S(  11,   11), S(  28,    8), S(   9,  -16), S(   6,   -9), S( -33,    4), 
    S( -62,    5), S( -51,    5), S( -24,  -11), S(  -4,   -9), S(  -7,  -10), S(  -4,  -12), S( -25,   -2), S( -35,   20), 
    S(-115,   29), S( -55,   -4), S( -65,   -3), S( -48,   -4), S( -43,    5), S( -35,   -9), S( -49,    3), S( -77,   21), 
};

constexpr int BISHOP_VALUE = S( 400,  460);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -97,    6), S( -70,   -7), S( -54,   30), S( -27,   37), S( -12,   47), S(  11,   62), S(  30,   66), 
    S(  48,   74), S(  60,   73), S(  75,   76), S(  85,   68), S(  95,   61), S( 123,   54), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -28,   30), S( -75,   44), S( -56,   31), S(-110,   46), S( -97,   43), S( -71,   22), S( -37,   30), S( -57,   21), 
    S( -14,   16), S(  -3,   16), S( -12,   15), S( -35,   22), S(   0,    2), S( -16,   15), S( -16,   20), S( -23,   15), 
    S(  -2,   37), S(  10,   22), S(  10,   14), S(  22,    3), S(   8,   13), S(  46,   21), S(  21,   24), S(  24,   33), 
    S( -12,   30), S(  -1,   27), S(   5,   18), S(  22,   34), S(  17,   23), S(   6,   25), S(   3,   18), S( -15,   35), 
    S(  -4,   23), S( -14,   24), S( -10,   24), S(  14,   26), S(   9,   23), S(  -4,   15), S( -12,   22), S(  11,    4), 
    S(   0,   18), S(   5,   21), S(   3,   17), S(   0,   17), S(   4,   22), S(   6,   17), S(  11,    8), S(  21,    6), 
    S(  16,   13), S(  12,    2), S(  17,  -10), S(  -3,    9), S(   4,   13), S(  16,    4), S(  37,    7), S(  18,   -8), 
    S(  11,    5), S(  24,    7), S(   7,   13), S(  -4,   17), S(   3,   16), S(   2,   27), S(  16,   -1), S(  31,  -26), 
};

constexpr int ROOK_VALUE = S( 466,  857);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    2);

constexpr int FRIENDLY_FILE = S(  11,   -9);

constexpr int FRIENDLY_RANK = S(   0,   -6);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -61,   30), S( -42,   51), S( -26,   57), S( -11,   62), S(   3,   61), S(   9,   65), 
    S(  25,   58), S(  39,   61), S(  52,   66), S(  65,   66), S(  76,   68), S(  84,   72), S(  97,   62), 
};

constexpr int ROOK_PSQT[64]
{
    S( -13,   44), S( -37,   58), S( -28,   62), S( -35,   58), S( -24,   51), S(  -6,   49), S(  -5,   48), S(  21,   35), 
    S( -28,   48), S( -36,   63), S( -21,   67), S(  -6,   51), S( -23,   54), S(   3,   42), S(   6,   36), S(  28,   27), 
    S( -40,   46), S( -11,   42), S( -22,   43), S( -23,   33), S(  12,   21), S(  12,   20), S(  66,    8), S(  28,    9), 
    S( -37,   46), S( -25,   40), S( -32,   47), S( -24,   36), S( -20,   19), S( -12,   20), S(   2,   20), S(  -1,   15), 
    S( -44,   33), S( -51,   36), S( -41,   32), S( -37,   27), S( -32,   23), S( -40,   22), S( -12,   10), S( -22,    9), 
    S( -44,   20), S( -45,   19), S( -42,   16), S( -36,   14), S( -24,    8), S( -21,   -1), S(  12,  -23), S(  -8,  -19), 
    S( -41,    6), S( -39,   13), S( -31,   12), S( -31,    9), S( -22,    1), S( -11,   -7), S(   9,  -22), S( -27,  -14), 
    S( -18,   13), S( -23,   10), S( -25,   15), S( -18,    6), S(  -9,   -1), S(  -7,    7), S(   0,   -5), S(  -9,  -11), 
};

constexpr int QUEEN_VALUE = S( 935, 1759);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -68,  -61), S(-131,  -85), S(-118,  -16), S(-102,  -27), S( -95,   42), 
    S( -79,   37), S( -70,   50), S( -55,   47), S( -42,   53), S( -29,   61), S( -16,   59), S(  -2,   62), S(   9,   66), 
    S(  20,   69), S(  32,   73), S(  42,   76), S(  54,   75), S(  65,   82), S(  78,   77), S(  91,   73), S( 111,   65), 
    S( 125,   54), S( 143,   55), S( 134,   72), S( 109,   91), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -30,   43), S( -58,   80), S( -33,  100), S(  27,   51), S( -36,  117), S( -15,   97), S( -16,   74), S( -35,   90), 
    S(  -1,   37), S( -32,   69), S( -33,  113), S( -51,  144), S( -50,  168), S( -13,  126), S( -25,  114), S(  29,   95), 
    S(   3,   37), S(  -8,   50), S( -14,   90), S(  -7,   99), S(  -3,  122), S(  32,  115), S(  38,   84), S(  44,   56), 
    S( -18,   60), S( -13,   62), S( -17,   75), S( -19,  102), S( -20,  116), S(  -7,  101), S(   2,  100), S(   6,   80), 
    S(  -8,   36), S( -20,   67), S( -16,   58), S( -11,   81), S( -12,   79), S(  -8,   67), S(   2,   58), S(  10,   51), 
    S(  -8,   16), S(  -1,   26), S(  -6,   45), S(  -5,   36), S(   0,   43), S(   2,   42), S(  17,   22), S(  13,   12), 
    S(   2,    4), S(   3,    6), S(  11,   -2), S(  14,    6), S(  11,   15), S(  23,  -23), S(  35,  -60), S(  45,  -90), 
    S(  -3,    4), S(  -2,    1), S(   5,    3), S(  13,   21), S(  11,   -2), S(  -4,   -7), S(  14,  -30), S(   0,   -9), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -41,   16), S(  -9,    5), S(  19,   -5), S(  40,  -35), 
};

constexpr int KING_PSQT[64]
{
    S(-102, -175), S(  93,  -88), S(   9,  -30), S( -43,   13), S(   0,   -2), S( -10,   11), S(  -5,   -1), S( -17, -136), 
    S( -10,  -14), S(  39,   27), S(   1,   44), S(  45,   37), S( -23,   73), S(  22,   76), S(  14,   70), S( -81,   43), 
    S(-121,   34), S(  28,   51), S(   1,   70), S( -78,  102), S( -30,  107), S(  44,   92), S(  46,   80), S( -61,   49), 
    S( -92,   19), S( -27,   49), S( -74,   85), S(-125,  106), S( -80,  101), S( -40,   92), S( -55,   78), S(-110,   46), 
    S( -79,    2), S( -34,   27), S( -40,   57), S( -85,   83), S( -77,   80), S( -37,   59), S( -35,   36), S(-124,   31), 
    S(  -3,  -27), S(  69,   -9), S(   3,   25), S( -13,   42), S(  -7,   41), S(  -1,   26), S(  49,   -5), S( -15,  -10), 
    S(  86,  -53), S(  72,  -25), S(  56,  -10), S(  15,    6), S(  16,    9), S(  33,   -2), S(  85,  -30), S(  52,  -39), 
    S(  39,  -91), S(  79,  -60), S(  62,  -39), S( -24,  -25), S(  40,  -49), S( -10,  -20), S(  66,  -56), S(  50,  -96), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  10,  -21), S( -17,   -1), S( -25,   12), S( -37,    5), S( -33,    8), S( -16,  -15), 
    S( -47,   33), S( -31,  -42), S( -89,   20), S( -66,   -6), S( -40,  -38), S( -98,   53), S( -84,  -36), S(-100,  -72), 
    S(-119,   29), S( -95,  -25), S(-125,   66), S(-126,  -32), S(-164,  -69), S(-190,   51), S(-203,   15), S(-152,   15), 
    S(-171,  -43), S(-189, -181), S(-197, -193), S(-198, -136), S(-270,  -47), S(-214,  -73), S(-250,  -79), S(-293, -181), 
    S(-289, -207), S(-366, -278), S(-393, -258), S(-113,  -89), S(-378, -231), S(-320, -207), S(-375, -227), S(-246, -200), 
    S(-161, -188), S(-228, -235), S(-234, -214), S(-236, -145), S(-323, -224), S(-100,  -41), S(-352, -198), S(-127,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    3);
