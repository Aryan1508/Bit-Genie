
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S( 110,  176);

constexpr int PAWN_STACKED = S(  -2,  -16);

constexpr int PAWN_ISOLATED = S(  -8,  -11);

constexpr int SUPPORTED_PASSER = S(  13,   10);

constexpr int PASSER_TEMPO = S(  53,   37);

constexpr int PAWN_SUPPORT = S(  19,   16);

constexpr int PASSER_EDGE_DISTANCE = S(  -4,  -14);

constexpr int BLOCKED_PASSER_EDGE_DISTANCE = S(  -8,   -2);

constexpr int PHALANX[8]
{
    S(   0,    0), S(   8,    1), S(  16,   14), S(  29,   28), S(  57,   86), S( 164,  236), S(  84,  185), S(   0,    0), 
};

constexpr int PASSER[8]
{
    S(   0,    0), S( -19,    9), S( -29,   23), S( -34,   66), S( -14,  112), S(  -4,  195), S(  81,  167), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[8]
{
    S(   0,    0), S(   6,    7), S(   2,   22), S(  14,   30), S(  38,   35), S(  46,   28), S(  74,  -45), S(   0,    0), 
};

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -16,  158), S(   6,  145), S(   2,  151), S(  54,   92), S(  36,   84), S(   0,   90), S( -71,  134), S(-125,  164), 
    S( -32,   24), S( -15,   28), S(  15,  -11), S(  22,  -40), S(  30,  -48), S(  67,  -42), S(  34,    4), S( -14,    3), 
    S( -55,  -15), S( -32,  -35), S( -24,  -47), S( -18,  -64), S(   6,  -66), S(  -2,  -62), S( -10,  -46), S( -29,  -44), 
    S( -65,  -38), S( -43,  -47), S( -32,  -54), S( -19,  -59), S( -13,  -58), S( -15,  -59), S( -23,  -59), S( -44,  -60), 
    S( -70,  -45), S( -50,  -53), S( -39,  -50), S( -33,  -48), S( -19,  -46), S( -31,  -46), S( -13,  -68), S( -44,  -66), 
    S( -63,  -38), S( -37,  -42), S( -36,  -38), S( -44,  -33), S( -30,  -26), S( -16,  -34), S(   1,  -53), S( -57,  -56), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 365,  474);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-142, -157), S( -38,  -61), S( -14,  -15), S(  -2,   15), S(  10,   27), S(  13,   41), S(  24,   43), S(  36,   46), 
    S(  47,   42), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-168,  -46), S(-181,   14), S(-111,   21), S( -68,    5), S( -42,   11), S( -92,  -25), S(-149,    8), S(-119,  -76), 
    S( -52,   15), S( -29,   17), S(  14,   -7), S(  35,   -8), S(  10,  -13), S(  66,  -31), S( -27,   10), S( -10,  -11), 
    S( -26,    5), S(  21,   -4), S(  43,    2), S(  52,    3), S(  82,  -13), S(  87,  -23), S(  35,  -12), S(  -5,   -5), 
    S( -23,   25), S(   0,   12), S(  37,   16), S(  69,   13), S(  45,   11), S(  61,   13), S(   7,   14), S(  13,   12), 
    S( -31,   23), S(  -9,    5), S(  20,   13), S(  30,   14), S(  35,   19), S(  35,    2), S(  21,    3), S( -14,   20), 
    S( -51,    0), S( -23,   -4), S(   2,  -17), S(   8,    7), S(  26,    3), S(   7,  -19), S(   5,  -10), S( -31,    5), 
    S( -60,    2), S( -50,    6), S( -24,  -10), S(  -6,   -9), S(  -8,  -11), S(  -5,  -12), S( -25,    0), S( -32,   23), 
    S(-105,   11), S( -54,   -1), S( -65,    0), S( -48,    0), S( -43,    9), S( -34,   -7), S( -47,    7), S( -74,   21), 
};

constexpr int BISHOP_VALUE = S( 398,  444);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -86,   -8), S( -67,    0), S( -51,   37), S( -26,   41), S( -11,   50), S(  12,   62), S(  30,   64), 
    S(  47,   69), S(  59,   67), S(  74,   67), S(  84,   57), S(  93,   48), S( 120,   39), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -28,   28), S( -67,   39), S( -63,   32), S(-104,   42), S( -90,   38), S( -71,   20), S( -45,   30), S( -59,   23), 
    S( -16,   15), S(  -4,   15), S( -12,   13), S( -35,   20), S(   0,    1), S( -17,   13), S( -16,   19), S( -21,   13), 
    S(  -4,   36), S(  10,   21), S(   9,   14), S(  21,    2), S(   6,   13), S(  45,   20), S(  20,   22), S(  24,   31), 
    S( -12,   28), S(  -2,   25), S(   4,   17), S(  20,   33), S(  16,   21), S(   4,   24), S(   4,   16), S( -15,   33), 
    S(  -4,   20), S( -14,   21), S( -10,   23), S(  12,   25), S(   7,   22), S(  -5,   13), S( -13,   20), S(  13,    1), 
    S(   0,   15), S(   5,   19), S(   1,   16), S(  -2,   16), S(   3,   21), S(   5,   16), S(  11,    7), S(  21,    4), 
    S(  18,    8), S(  12,   -1), S(  15,  -10), S(  -3,    7), S(   4,   12), S(  15,    3), S(  37,    4), S(  19,   -9), 
    S(  11,    1), S(  23,    5), S(   7,   12), S(  -4,   15), S(   4,   13), S(   2,   25), S(  14,    2), S(  29,  -21), 
};

constexpr int ROOK_VALUE = S( 464,  838);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    1);

constexpr int FRIENDLY_FILE = S(  11,   -8);

constexpr int FRIENDLY_RANK = S(  -1,   -6);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -57,   37), S( -39,   57), S( -23,   61), S(  -9,   65), S(   4,   62), S(   9,   64), 
    S(  24,   55), S(  37,   56), S(  50,   59), S(  62,   57), S(  73,   56), S(  80,   58), S(  92,   47), 
};

constexpr int ROOK_PSQT[64]
{
    S( -12,   41), S( -35,   55), S( -34,   62), S( -33,   54), S( -24,   48), S(  -9,   47), S(  -5,   46), S(  19,   33), 
    S( -29,   46), S( -35,   60), S( -21,   64), S(  -4,   48), S( -22,   51), S(   4,   39), S(   5,   34), S(  28,   23), 
    S( -41,   45), S( -11,   40), S( -21,   40), S( -23,   31), S(  12,   18), S(  13,   18), S(  64,    7), S(  28,    6), 
    S( -37,   45), S( -25,   37), S( -32,   45), S( -24,   34), S( -21,   18), S( -12,   19), S(   2,   18), S(   1,   12), 
    S( -45,   30), S( -50,   33), S( -40,   29), S( -37,   25), S( -32,   21), S( -39,   21), S( -12,    8), S( -21,    5), 
    S( -46,   18), S( -45,   15), S( -42,   14), S( -37,   12), S( -25,    6), S( -21,   -3), S(  13,  -26), S(  -7,  -21), 
    S( -41,    2), S( -40,   10), S( -32,   10), S( -31,    6), S( -23,   -1), S( -12,   -9), S(   7,  -23), S( -26,  -15), 
    S( -17,    9), S( -23,    7), S( -24,   13), S( -17,    3), S(  -9,   -3), S(  -6,    4), S(   1,   -7), S(  -8,  -14), 
};

constexpr int QUEEN_VALUE = S( 942, 1705);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S(-107,  -67), S(-146,  -94), S(-105,  -48), S( -89,  -59), S( -83,   13), 
    S( -70,   31), S( -63,   51), S( -49,   52), S( -37,   57), S( -25,   63), S( -13,   61), S(   0,   62), S(  10,   65), 
    S(  19,   67), S(  31,   69), S(  39,   72), S(  50,   71), S(  60,   77), S(  73,   71), S(  83,   69), S( 101,   60), 
    S( 111,   54), S( 138,   41), S( 157,   43), S( 130,   79), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -39,   57), S( -70,   93), S( -45,  111), S( -11,   87), S( -19,   97), S( -42,  124), S(  14,   41), S( -27,   83), 
    S(  -6,   40), S( -33,   67), S( -32,  108), S( -50,  139), S( -51,  166), S(  -9,  115), S( -17,   95), S(  35,   90), 
    S(   0,   38), S(  -8,   47), S( -13,   84), S(  -6,   92), S(  -1,  113), S(  38,  103), S(  44,   67), S(  45,   61), 
    S( -19,   57), S( -12,   55), S( -14,   65), S( -16,   90), S( -17,  106), S(  -5,   95), S(   5,   95), S(   6,   81), 
    S(  -7,   32), S( -19,   62), S( -14,   51), S(  -9,   71), S(  -9,   70), S(  -5,   60), S(   3,   55), S(  10,   53), 
    S(  -7,   12), S(  -1,   21), S(  -5,   40), S(  -4,   29), S(   1,   38), S(   3,   38), S(  18,   19), S(  12,   18), 
    S(   3,    1), S(   2,    3), S(  12,   -5), S(  15,    1), S(  12,   10), S(  23,  -24), S(  33,  -59), S(  41,  -71), 
    S(  -2,    4), S(  -3,    3), S(   5,    1), S(  13,   20), S(  11,   -3), S(  -4,   -6), S(  14,  -28), S(  14,  -29), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -42,   17), S(  -8,    5), S(  19,   -7), S(  37,  -36), 
};

constexpr int KING_PSQT[64]
{
    S( -49, -100), S(  63,  -74), S(  13,  -29), S( -58,   19), S( -18,   -2), S( -15,   15), S(  20,   13), S(  18, -114), 
    S( -44,   -4), S(  12,   29), S( -33,   48), S(  50,   30), S(   3,   58), S(  32,   68), S(  36,   60), S( -41,   36), 
    S(-109,   33), S(  34,   44), S( -30,   72), S( -62,   92), S(  -5,   95), S(  75,   79), S(  61,   71), S( -13,   37), 
    S( -71,   17), S( -31,   43), S( -65,   77), S(-107,   96), S( -86,   96), S( -40,   86), S( -29,   65), S( -98,   43), 
    S( -63,   -2), S( -25,   19), S( -54,   55), S( -93,   78), S( -83,   75), S( -41,   54), S( -38,   32), S(-117,   30), 
    S(  -4,  -26), S(  63,  -14), S(  -5,   21), S( -20,   38), S( -14,   38), S(  -9,   23), S(  40,   -8), S( -19,   -6), 
    S(  79,  -51), S(  63,  -29), S(  47,  -12), S(   7,    3), S(   8,    7), S(  24,   -4), S(  77,  -31), S(  46,  -35), 
    S(  32,  -84), S(  72,  -55), S(  54,  -34), S( -31,  -21), S(  32,  -44), S( -17,  -15), S(  60,  -51), S(  46,  -87), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  10,  -22), S( -16,   -2), S( -26,   12), S( -38,    5), S( -33,    8), S( -17,  -14), 
    S( -48,   34), S( -32,  -41), S( -90,   21), S( -67,   -3), S( -40,  -36), S(-101,   62), S( -88,  -25), S( -98,  -76), 
    S(-116,   21), S( -94,  -26), S(-142,  109), S(-126,  -32), S(-156,  -41), S(-193,   61), S(-209,   25), S(-168,   55), 
    S(-195,    0), S(-176, -157), S(-191, -137), S(-209,  -92), S(-250,  -16), S(-253,   -1), S(-243,  -75), S(-302, -168), 
    S(-270, -194), S(-370, -279), S(-358, -216), S(-157, -107), S(-398, -245), S(-315, -200), S(-381, -227), S(-252, -202), 
    S(-160, -187), S(-227, -234), S(-235, -214), S(-238, -147), S(-322, -224), S(-116,  -45), S(-354, -199), S(-129,  -37), 
    S(-400, -400), S(-400,  -10), S(-399, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-401, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    4);
