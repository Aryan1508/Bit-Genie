
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S( 101,  181);

constexpr int PAWN_STACKED = S(  -2,  -16);

constexpr int PAWN_ISOLATED = S(  -7,  -11);

constexpr int SUPPORTED_PASSER = S(  13,    9);

constexpr int PASSER_TEMPO = S(  55,   35);

constexpr int PAWN_SUPPORT = S(  18,   15);

constexpr int PASSER_EDGE_DISTANCE = S(  -2,  -16);

constexpr int BLOCKED_PASSER_EDGE_DISTANCE = S(  -8,   -2);

constexpr int PHALANX[8]
{
    S(   0,    0), S(   7,    1), S(  18,   12), S(  31,   26), S(  59,   83), S( 160,  245), S(  90,  210), S(   0,    0), 
};

constexpr int PASSER[8]
{
    S(   0,    0), S( -22,   12), S( -31,   28), S( -38,   70), S( -17,  115), S( -20,  218), S(  76,  170), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[8]
{
    S(   0,    0), S(   4,   10), S(  -1,   25), S(  12,   32), S(  36,   37), S(  34,   46), S(  74,  -47), S(   0,    0), 
};

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -12,  154), S(   8,  142), S(   0,  152), S(  52,   94), S(  34,   88), S(   0,   91), S( -76,  136), S(-127,  163), 
    S( -20,    6), S( -11,   14), S(  21,  -26), S(  29,  -56), S(  36,  -62), S(  69,  -51), S(  39,  -10), S(  -1,  -13), 
    S( -49,  -19), S( -35,  -34), S( -27,  -45), S( -22,  -61), S(   2,  -63), S(  -6,  -60), S( -13,  -45), S( -23,  -48), 
    S( -61,  -41), S( -46,  -46), S( -36,  -51), S( -24,  -56), S( -16,  -55), S( -19,  -56), S( -25,  -58), S( -38,  -63), 
    S( -65,  -49), S( -54,  -51), S( -43,  -47), S( -37,  -44), S( -23,  -42), S( -34,  -43), S( -16,  -65), S( -38,  -69), 
    S( -57,  -42), S( -39,  -41), S( -38,  -35), S( -46,  -30), S( -33,  -23), S( -18,  -31), S(  -1,  -52), S( -51,  -60), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 334,  485);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-143, -156), S( -40,  -67), S( -17,  -19), S(  -7,   14), S(   4,   30), S(   5,   48), S(  16,   51), S(  28,   55), 
    S(  39,   51), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-147,  -43), S(-177,   15), S(-106,   20), S( -62,    3), S( -38,   10), S( -89,  -24), S(-147,    9), S(-103,  -72), 
    S( -33,   13), S( -13,   11), S(  14,   -9), S(  36,   -9), S(  11,  -14), S(  66,  -34), S( -16,    7), S(   6,  -12), 
    S( -13,    2), S(  21,   -7), S(  27,    5), S(  33,    8), S(  66,   -9), S(  73,  -21), S(  38,  -17), S(   9,   -7), 
    S(  -9,   20), S(  -1,   11), S(  18,   21), S(  49,   20), S(  25,   18), S(  42,   19), S(   7,   12), S(  28,    9), 
    S( -19,   21), S( -12,    5), S(  -2,   20), S(   8,   23), S(  14,   28), S(  13,   10), S(  18,    4), S(  -1,   19), 
    S( -40,   -1), S( -28,   -2), S( -20,   -7), S( -13,   17), S(   5,   13), S( -14,  -10), S(  -1,   -7), S( -20,    4), 
    S( -39,    0), S( -37,    5), S( -28,   -8), S(  -8,   -7), S( -11,   -8), S(  -9,   -9), S( -14,   -1), S( -13,   20), 
    S( -85,   11), S( -30,  -13), S( -48,   -6), S( -34,   -5), S( -26,    4), S( -19,  -10), S( -25,   -3), S( -53,   21), 
};

constexpr int BISHOP_VALUE = S( 368,  458);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -70,   -9), S( -39,  -20), S( -32,   22), S( -14,   32), S(  -9,   45), S(   6,   62), S(  17,   69), 
    S(  25,   77), S(  29,   80), S(  37,   84), S(  41,   79), S(  47,   69), S(  81,   59), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -28,   32), S( -69,   42), S( -66,   34), S(-106,   44), S( -92,   40), S( -74,   22), S( -46,   32), S( -59,   25), 
    S( -17,   18), S(  -7,   18), S( -17,   17), S( -40,   24), S(  -4,    4), S( -23,   16), S( -21,   20), S( -28,   17), 
    S(  -6,   39), S(   6,   23), S(   3,   17), S(  13,    5), S(  -2,   16), S(  39,   22), S(  16,   22), S(  23,   33), 
    S( -14,   30), S(  -7,   27), S(  -2,   20), S(  11,   36), S(   7,   25), S(  -3,   26), S(  -1,   18), S( -19,   36), 
    S(  -8,   23), S( -20,   23), S( -18,   27), S(   3,   28), S(  -2,   26), S( -12,   18), S( -19,   24), S(  11,    4), 
    S(  -1,   16), S(  -3,   20), S(  -6,   18), S( -10,   19), S(  -4,   24), S(  -2,   18), S(   4,    9), S(  20,    6), 
    S(  16,   10), S(   8,    1), S(  10,   -7), S(  -8,   10), S(  -2,   16), S(   9,    6), S(  30,    8), S(  14,   -6), 
    S(   9,    2), S(  20,    5), S(   8,    6), S(  -7,   17), S(   4,   15), S(  -2,   26), S(  13,    2), S(  27,  -21), 
};

constexpr int ROOK_VALUE = S( 424,  852);

constexpr int OPEN_FILE = S(  19,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    2);

constexpr int FRIENDLY_FILE = S(   8,   -8);

constexpr int FRIENDLY_RANK = S(  -3,   -4);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -18,   20), S(  -8,   39), S(   1,   44), S(   7,   51), S(  11,   53), S(   7,   60), 
    S(  13,   58), S(  18,   63), S(  22,   71), S(  26,   73), S(  29,   77), S(  28,   82), S(  35,   76), 
};

constexpr int ROOK_PSQT[64]
{
    S(  -3,   34), S( -30,   51), S( -30,   59), S( -30,   51), S( -20,   46), S(  -6,   46), S(  -2,   44), S(  25,   29), 
    S( -24,   41), S( -30,   56), S( -17,   61), S(   0,   45), S( -17,   48), S(   7,   37), S(   8,   32), S(  33,   20), 
    S( -39,   43), S(  -9,   38), S( -20,   40), S( -22,   31), S(  13,   18), S(  14,   18), S(  66,    7), S(  31,    5), 
    S( -37,   45), S( -25,   38), S( -33,   47), S( -25,   36), S( -23,   21), S( -13,   22), S(   1,   21), S(   1,   14), 
    S( -47,   34), S( -52,   36), S( -43,   33), S( -40,   28), S( -35,   26), S( -41,   25), S( -14,   11), S( -23,    9), 
    S( -49,   21), S( -48,   19), S( -46,   18), S( -38,   16), S( -27,   10), S( -25,    2), S(   9,  -21), S( -11,  -18), 
    S( -44,    4), S( -42,   12), S( -35,   12), S( -33,    7), S( -25,    0), S( -15,   -7), S(   3,  -20), S( -30,  -13), 
    S( -20,   10), S( -26,    8), S( -27,   14), S( -21,    5), S( -12,   -2), S(  -9,    5), S(  -2,   -5), S( -10,  -13), 
};

constexpr int QUEEN_VALUE = S( 893, 1706);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S(-106,  -67), S(-119,  -88), S( -57,  -42), S( -37,  -51), S( -37,   17), 
    S( -31,   27), S( -30,   42), S( -24,   40), S( -20,   47), S( -15,   56), S( -11,   56), S(  -6,   61), S(  -3,   67), 
    S(  -1,   72), S(   3,   77), S(   4,   82), S(   8,   83), S(  12,   89), S(  20,   82), S(  29,   75), S(  49,   60), 
    S(  64,   43), S( 100,   24), S( 135,   23), S( 120,   66), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -25,   50), S( -63,   93), S( -39,  112), S(  -6,   90), S( -13,   98), S( -39,  128), S(  23,   40), S( -14,   80), 
    S(   5,   31), S( -25,   63), S( -26,  108), S( -44,  140), S( -46,  168), S(  -1,  113), S(  -6,   91), S(  47,   82), 
    S(   8,   31), S(  -3,   47), S( -11,   87), S(  -7,  101), S(   0,  118), S(  42,  104), S(  53,   62), S(  57,   53), 
    S( -12,   53), S( -12,   59), S( -17,   75), S( -22,  101), S( -25,  118), S(  -7,  104), S(   8,   97), S(  15,   77), 
    S(  -4,   32), S( -21,   67), S( -19,   61), S( -17,   83), S( -17,   84), S( -10,   72), S(   4,   60), S(  14,   54), 
    S(  -6,   10), S(  -5,   23), S( -13,   49), S( -11,   42), S(  -6,   49), S(  -3,   48), S(  15,   23), S(  14,   16), 
    S(   5,   -6), S(   0,    4), S(   8,   -3), S(  10,    5), S(   8,   15), S(  19,  -25), S(  30,  -60), S(  42,  -76), 
    S(   3,  -10), S(   0,  -11), S(   6,  -11), S(  14,    6), S(  13,  -11), S(  -4,  -14), S(  14,  -32), S(  16,  -33), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -40,   17), S(  -6,    6), S(  18,   -8), S(  33,  -37), 
};

constexpr int KING_PSQT[64]
{
    S( -46, -104), S(  60,  -75), S(  14,  -31), S( -59,   18), S( -20,   -2), S( -15,   14), S(  23,   12), S(  23, -117), 
    S( -48,   -7), S(   8,   31), S( -37,   51), S(  50,   33), S(   5,   60), S(  32,   70), S(  38,   61), S( -35,   32), 
    S(-107,   30), S(  32,   47), S( -35,   76), S( -64,   96), S(  -6,   99), S(  74,   84), S(  60,   74), S(  -8,   33), 
    S( -68,   12), S( -35,   48), S( -71,   83), S(-114,  103), S( -93,  103), S( -48,   93), S( -36,   70), S( -95,   40), 
    S( -60,   -5), S( -32,   24), S( -64,   62), S(-105,   86), S( -97,   84), S( -54,   62), S( -52,   38), S(-114,   27), 
    S(   1,  -30), S(  45,   -8), S( -21,   28), S( -37,   46), S( -31,   45), S( -28,   31), S(  20,   -1), S( -11,  -11), 
    S(  88,  -55), S(  46,  -21), S(  31,   -4), S(  -9,   11), S(  -9,   16), S(   7,    5), S(  59,  -23), S(  56,  -40), 
    S(  56,  -98), S(  80,  -63), S(  62,  -42), S( -20,  -29), S(  46,  -54), S(  -7,  -23), S(  69,  -59), S(  72, -104), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(   7,  -21), S( -16,   -2), S( -24,   11), S( -37,    4), S( -32,    7), S( -15,  -16), 
    S( -47,   32), S( -30,  -42), S( -90,   19), S( -67,   -3), S( -39,  -38), S(-102,   62), S( -88,  -25), S( -99,  -77), 
    S(-116,   22), S( -95,  -24), S(-145,  113), S(-129,  -28), S(-159,  -38), S(-196,   62), S(-212,   27), S(-172,   61), 
    S(-199,    5), S(-179, -154), S(-197, -130), S(-214,  -87), S(-253,  -13), S(-260,    8), S(-243,  -75), S(-304, -166), 
    S(-268, -193), S(-371, -280), S(-359, -213), S(-163, -110), S(-401, -247), S(-314, -199), S(-382, -227), S(-253, -202), 
    S(-160, -187), S(-227, -234), S(-235, -214), S(-238, -147), S(-322, -224), S(-118,  -46), S(-354, -199), S(-129,  -37), 
    S(-400, -400), S(-400,  -10), S(-399, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-401, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -1,    2);

constexpr int CONNECTIVITY[8]
{
    S( -30,    8), S( -27,    6), S( -19,    0), S( -11,   -5), S(  -3,   -9), S(   4,   -7), S(   9,    1), S(  13,   14), 
};
