
/*
Bit-Genie is an open-source, UCI-compliant chess engine written by
Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

Bit-Genie is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Bit-Genie is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  98,  154);

constexpr int PAWN_STACKED = S(  -3,  -16);

constexpr int PAWN_ISOLATED = S( -17,  -17);

constexpr int SUPPORTED_PASSER = S(  17,    5);

constexpr int PASSER_TEMPO = S(  43,   50);

constexpr int PAWN_SUPPORT = S(  12,   12);

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -35,   84), S( -93,   65), S( -77,   28), S( -61,  -32), S( -48,  -14), S(-123,   37), S( -87,   39), S(-137,   79), 
    S( -13,   36), S(  -5,    8), S(  26,    4), S(  40,   16), S(  54,   23), S(  94,   -8), S(  59,   17), S(  23,   36), 
    S( -36,   25), S( -11,   -1), S(   1,   -6), S(   3,  -18), S(  31,  -23), S(  18,  -14), S(   9,   -8), S(  -8,    1), 
    S( -44,    2), S( -24,  -14), S(  -3,  -18), S(  11,  -16), S(  17,  -18), S(  10,  -20), S(  -4,  -20), S( -20,  -19), 
    S( -50,   -4), S( -30,  -18), S( -13,  -14), S(  -8,  -14), S(   9,   -9), S(  -6,  -10), S(  13,  -32), S( -16,  -22), 
    S( -43,   -1), S( -19,  -16), S( -16,   -7), S( -23,   -2), S(  -6,    6), S(   0,    0), S(  19,  -24), S( -35,  -18), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 285,  252), S( 114,  347), S( 151,  366), S( 191,  339), S( 196,  332), S(  88,  323), S( 171,  372), S( 198,  314), 
    S(  26,  265), S(  30,  282), S(  -5,  218), S(   2,  125), S( -18,  125), S( -68,  249), S( -13,  265), S( -42,  271), 
    S(   1,  150), S( -17,  149), S( -22,   88), S( -12,   65), S( -28,   67), S( -19,   96), S( -48,  161), S( -32,  158), 
    S( -21,   83), S( -29,   61), S( -44,   36), S( -42,   13), S( -53,   28), S( -60,   56), S( -59,   90), S( -16,   81), 
    S( -19,   12), S( -61,   15), S( -40,   -5), S( -49,  -10), S( -53,  -12), S( -61,   -4), S( -66,   33), S( -15,   16), 
    S( -19,    6), S( -30,   -1), S( -36,  -12), S( -29,  -21), S( -27,  -33), S( -28,  -22), S( -12,   -9), S(   0,    0), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S(  64,  190), S( 204,   83), S( 233,   57), S( 229,   85), S( 173,   60), S( 198,   70), S( 134,   14), S(  73,   86), 
    S(  46,  110), S( 109,   75), S(  86,   22), S(  29,    5), S(  13,   -9), S(  49,   27), S(  29,   19), S( -53,   31), 
    S(  36,   75), S(  48,   63), S(  27,   39), S(  21,   33), S(  -5,   33), S(  -2,   35), S(  24,   40), S(  -8,   48), 
    S(  37,   40), S(  22,   34), S( -12,   22), S( -16,   23), S( -22,   32), S( -31,   35), S(  -2,   46), S( -21,   43), 
    S(  20,   -8), S(  18,   30), S( -26,   13), S( -34,   13), S( -42,   24), S( -39,   33), S( -37,   54), S( -28,   32), 
    S(  11,  -11), S(   2,   14), S( -25,   24), S( -25,   25), S(  -2,    1), S( -14,    0), S(   7,   -7), S(   4,   11), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 382,  510);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-142, -170), S( -34,  -63), S(  -6,   -3), S(   3,   30), S(  16,   47), S(  19,   58), S(  29,   61), S(  40,   61), 
    S(  54,   59), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-181,  -27), S(-161,   18), S( -83,   26), S(-133,   39), S( -39,   22), S( -97,  -66), S(-141,  -18), S(-131,  -49), 
    S( -61,   24), S( -44,   33), S(  -1,   11), S(  56,  -19), S( -16,  -13), S(  78,  -34), S( -22,   15), S( -36,    2), 
    S( -38,    9), S(  25,   -1), S(  29,    2), S(  44,   -1), S(  89,  -29), S(  93,  -21), S(  45,   -7), S(  -1,    4), 
    S(  -8,   41), S(   6,   17), S(  41,    7), S(  72,    6), S(  47,    1), S(  63,    9), S(  15,   13), S(  30,    6), 
    S( -22,   29), S(  -2,   13), S(  19,    1), S(  26,   12), S(  35,   10), S(  33,   -9), S(  20,    9), S(  -6,   28), 
    S( -50,    9), S( -21,    1), S(   2,  -31), S(   4,    0), S(  24,  -10), S(   6,  -30), S(  11,   -9), S( -29,    9), 
    S( -50,   38), S( -40,   13), S( -24,   -9), S(   3,  -12), S(  -3,  -18), S(  -1,  -23), S( -14,   16), S( -22,   53), 
    S( -91,   65), S( -42,   13), S( -63,   16), S( -38,   11), S( -31,    6), S( -26,    0), S( -35,   17), S( -66,   43), 
};

constexpr int BISHOP_VALUE = S( 422,  482);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -87,   11), S( -60,   31), S( -42,   64), S( -14,   60), S(  -3,   68), S(  19,   75), S(  36,   73), 
    S(  50,   72), S(  59,   65), S(  68,   64), S(  75,   45), S(  78,   36), S( 121,   15), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -40,   35), S( -85,   64), S( -41,   36), S(-119,   53), S(-107,   52), S( -66,   28), S( -32,   18), S( -50,   18), 
    S( -21,   15), S( -24,   22), S( -26,   28), S( -42,   32), S( -13,    8), S( -29,   14), S( -26,   15), S( -18,   -1), 
    S(   5,   38), S(  18,   29), S(   8,   21), S(  23,    2), S(  12,   -1), S(  56,   21), S(  23,   31), S(  34,   26), 
    S( -15,   40), S(  -4,   41), S(   8,   17), S(  22,   29), S(  32,   18), S(   3,   22), S(   9,   16), S( -22,   42), 
    S(  -1,   36), S( -14,   26), S(  -8,   25), S(  15,   29), S(  14,   16), S(  -1,   11), S(  -8,   15), S(  16,    7), 
    S(   9,    2), S(  10,   28), S(   4,   24), S(   3,   18), S(   5,   26), S(  10,   16), S(  17,    6), S(  20,   15), 
    S(  22,   18), S(  17,    4), S(  17,   -4), S(  -3,   11), S(   6,   15), S(  18,   -2), S(  43,    6), S(  26,  -20), 
    S(  26,   17), S(  28,   -5), S(  12,    9), S(  -2,   22), S(   7,   27), S(   1,   30), S(  12,    1), S(  45,  -23), 
};

constexpr int ROOK_VALUE = S( 505,  909);

constexpr int OPEN_FILE = S(  27,   11);

constexpr int SEMI_OPEN_FILE = S(  24,   -2);

constexpr int FRIENDLY_FILE = S(  10,   -8);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -36,   89), S( -19,   99), S(  -7,  101), S(   5,   96), S(  14,   89), S(  17,   85), 
    S(  28,   69), S(  40,   63), S(  47,   64), S(  54,   55), S(  65,   48), S(  64,   44), S(  78,   21), 
};

constexpr int ROOK_PSQT[64]
{
    S(   1,   46), S( -50,   69), S(   2,   60), S( -30,   72), S( -24,   57), S(   5,   61), S(  -2,   49), S(  36,   37), 
    S( -24,   56), S( -41,   82), S( -22,   88), S(   1,   67), S( -21,   70), S(  -1,   60), S(   5,   59), S(  50,   26), 
    S( -38,   57), S(  -7,   54), S( -21,   62), S( -22,   38), S(  21,   16), S(  25,   25), S(  92,    4), S(  37,    2), 
    S( -35,   54), S( -37,   59), S( -25,   53), S( -21,   37), S( -17,   22), S( -11,   23), S(  10,   22), S(  -8,   25), 
    S( -37,   39), S( -41,   33), S( -39,   33), S( -31,   33), S( -29,   29), S( -39,   31), S(   9,   -7), S( -10,    7), 
    S( -39,   25), S( -38,   19), S( -39,   28), S( -32,   23), S( -16,    6), S( -13,    2), S(  16,  -19), S(   3,  -24), 
    S( -27,    4), S( -37,   17), S( -28,   15), S( -25,   12), S( -15,    8), S(  -5,   -5), S(   6,  -15), S( -14,  -14), 
    S( -15,   11), S( -19,    9), S( -23,   17), S( -15,    4), S(  -7,    0), S(  -1,    5), S(  16,  -12), S(  -7,  -13), 
};

constexpr int QUEEN_VALUE = S(1033, 1851);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -53,  -57), S( -88,  -73), S( -77,   -2), S( -47,    4), S( -54,   99), 
    S( -36,   96), S( -32,  113), S( -23,  114), S( -13,  104), S(  -4,  111), S(   5,  100), S(  15,   94), S(  20,   96), 
    S(  26,   95), S(  35,   92), S(  39,   86), S(  49,   73), S(  57,   68), S(  63,   65), S(  70,   50), S(  73,   50), 
    S(  88,   17), S(  90,   13), S(  91,   50), S(  86,   77), 
};

constexpr int QUEEN_PSQT[64]
{
    S(   0,   22), S( -42,   75), S( -20,   88), S(  55,   25), S( -44,  138), S(  18,  105), S(  -3,  105), S( -31,  102), 
    S(  -9,   43), S( -38,   95), S( -41,  134), S( -42,  140), S( -36,  159), S( -17,  163), S( -39,  158), S(  28,  120), 
    S(   5,   40), S(  11,   36), S( -10,  103), S(   6,   90), S(   1,  135), S(  40,  152), S(  41,  136), S(  67,   53), 
    S( -15,   87), S(   4,   62), S( -23,  105), S(  -6,  107), S( -20,  135), S(   2,   97), S(   5,  120), S(  14,   87), 
    S(  -3,   65), S( -13,   79), S(  -1,   54), S(  -3,   88), S(   3,   70), S(   0,   67), S(   9,   76), S(  27,   45), 
    S(  -7,   42), S(  11,   23), S(   0,   64), S(   4,   45), S(  11,   45), S(   6,   65), S(  30,   30), S(  27,   -3), 
    S(   1,   44), S(  14,   11), S(  18,   15), S(  22,   17), S(  21,   18), S(  29,   -4), S(  44,  -56), S(  65,  -89), 
    S(  15,    1), S(   8,    6), S(  11,   23), S(  18,   31), S(  19,    5), S(   6,   -2), S(  37,  -11), S(  20,   16), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -48,   17), S( -11,    3), S(  21,   -6), S(  45,  -34), 
};

constexpr int KING_PSQT[64]
{
    S(-142, -247), S(  89, -103), S(   1,  -38), S( -40,    8), S(  13,   23), S( -10,    8), S( -24,  -36), S( -31, -148), 
    S(  15,   19), S(  55,   45), S(  30,   79), S(  47,   58), S( -23,  100), S(  16,   72), S(   9,   91), S( -97,   42), 
    S(-123,   50), S(  31,   74), S(  28,   85), S( -89,  112), S( -50,  102), S(  19,   92), S(  26,   75), S( -87,   55), 
    S(-110,   36), S( -26,   55), S( -87,   89), S(-149,  117), S( -69,   99), S( -47,   91), S( -94,   74), S(-129,   48), 
    S( -94,   28), S( -64,   34), S(  -6,   54), S( -60,   72), S( -46,   64), S( -70,   49), S( -65,   28), S(-155,   33), 
    S(  -8,   -8), S(  49,  -12), S(  18,   14), S(   2,   29), S(  -7,   30), S(   9,    5), S(  46,  -23), S( -10,   -3), 
    S(  83,  -31), S(  70,  -34), S(  52,  -17), S(  17,   -6), S(  14,   -4), S(  36,  -17), S(  82,  -49), S(  62,  -40), 
    S(  50,  -58), S(  92,  -54), S(  78,  -37), S( -16,  -14), S(  53,  -53), S(  -5,  -11), S(  77,  -57), S(  72,  -82), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  22,  -29), S( -39,   16), S( -28,   17), S( -37,   10), S( -42,   15), S( -17,  -17), 
    S( -55,   42), S( -28,  -48), S( -87,   11), S( -70,  -15), S( -43,  -44), S(-105,   40), S( -73,  -62), S(-128,  -74), 
    S(-126,   31), S(-105,  -28), S(-127,   40), S(-137,  -38), S(-206,  -92), S(-227,   25), S(-219,    4), S(-168,  -17), 
    S(-193,  -86), S(-202, -193), S(-239, -233), S(-224, -168), S(-288,  -67), S(-239, -115), S(-252,  -80), S(-287, -183), 
    S(-293, -209), S(-365, -277), S(-412, -277), S( -90,  -80), S(-370, -224), S(-315, -206), S(-368, -226), S(-242, -199), 
    S(-163, -189), S(-226, -234), S(-234, -214), S(-235, -145), S(-323, -224), S( -96,  -40), S(-351, -197), S(-126,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -3,    7);