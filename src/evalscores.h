
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  74,  144);

constexpr int PAWN_STACKED = S(  -3,  -14);

constexpr int PAWN_ISOLATED = S( -12,  -17);

constexpr int SUPPORTED_PASSER = S(  14,    6);

constexpr int PASSER_TEMPO = S(  55,   36);

constexpr int PAWN_SUPPORT = S(  12,   10);

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -76,   67), S( -75,   36), S( -99,   23), S( -73,  -42), S( -66,  -34), S( -87,   -3), S(-108,   22), S(-114,   57), 
    S(  -4,   30), S(  -6,   18), S(  32,   -1), S(  35,   17), S(  49,  -10), S(  85,  -11), S(  64,   31), S(  35,   26), 
    S( -26,   18), S( -13,   -4), S(  -4,   -8), S(   1,  -24), S(  28,  -25), S(  18,  -22), S(  11,  -13), S(   5,   -8), 
    S( -37,   -2), S( -24,  -13), S(  -9,  -15), S(   5,  -20), S(   9,  -21), S(   6,  -22), S(  -4,  -25), S( -11,  -22), 
    S( -42,   -9), S( -32,  -20), S( -18,  -15), S( -14,  -11), S(   0,   -9), S(  -6,  -12), S(   7,  -34), S(  -9,  -29), 
    S( -37,   -5), S( -24,  -14), S( -20,   -6), S( -30,    1), S( -13,    7), S(  -3,   -1), S(  17,  -25), S( -27,  -22), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 200,  266), S( 159,  304), S( 141,  327), S( 188,  312), S( 176,  291), S( 131,  281), S( 151,  343), S( 221,  291), 
    S(   7,  236), S(   3,  248), S( -21,  212), S( -11,  128), S( -12,  148), S( -43,  185), S( -55,  221), S( -48,  234), 
    S(  -9,  125), S( -21,  121), S( -21,   83), S( -18,   62), S( -33,   59), S( -28,   86), S( -61,  128), S( -32,  123), 
    S( -36,   73), S( -49,   62), S( -50,   36), S( -45,   15), S( -55,   24), S( -44,   38), S( -65,   73), S( -36,   66), 
    S( -28,   11), S( -47,   16), S( -55,    3), S( -41,   -9), S( -49,   -5), S( -46,   -1), S( -55,   31), S( -12,    7), 
    S( -30,   11), S( -27,    5), S( -32,   -6), S( -38,   -9), S( -18,  -27), S(  -6,  -22), S( -18,   -4), S(  -9,    3), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 125,  156), S( 172,  100), S( 219,   93), S( 217,  104), S( 180,   92), S( 192,   72), S( 130,   27), S(  74,   85), 
    S(  41,   94), S(  78,   74), S(  52,   40), S(  24,   12), S(  18,   31), S(  35,   34), S(  13,   -2), S( -40,   40), 
    S(  45,   55), S(  41,   55), S(  30,   28), S(  18,   32), S(  -4,   31), S(  17,   27), S(  12,   40), S(  -4,   34), 
    S(  32,   33), S(  23,   35), S( -19,   21), S( -13,   20), S( -24,   30), S( -20,   31), S(   2,   51), S(  -5,   32), 
    S(  11,   13), S(  -5,   37), S( -25,   18), S( -27,   13), S( -32,   20), S( -12,   16), S( -22,   49), S(  -8,   18), 
    S(   6,   -3), S(   2,   23), S( -22,   17), S( -16,   15), S(  -7,   -1), S( -13,    3), S(  12,    5), S(  -5,   15), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 335,  490);

constexpr int KNIGHT_MOBILITY[9]
{
    S( -72, -104), S( -49,  -45), S( -37,  -12), S( -32,    2), S( -27,   11), S( -22,   18), S( -17,   21), S( -12,   23), 
    S(  -6,   20), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-168,  -56), S(-174,   10), S( -97,   21), S( -79,   18), S( -33,   14), S( -81,  -27), S(-144,   -1), S(-123,  -81), 
    S( -29,   13), S(  -8,   17), S(  10,   -2), S(  33,   -4), S(   3,   -8), S(  70,  -29), S( -14,   13), S(  11,  -16), 
    S(  -8,    9), S(  21,    0), S(  25,    5), S(  36,    7), S(  72,  -12), S(  75,  -21), S(  37,   -8), S(  19,   -4), 
    S(  -2,   28), S(   0,   21), S(  14,   21), S(  42,   21), S(  21,   18), S(  43,   18), S(  11,   23), S(  35,   14), 
    S( -14,   26), S( -12,   13), S(  -3,   19), S(   1,   22), S(  10,   25), S(   6,   10), S(  19,   10), S(   2,   20), 
    S( -35,    0), S( -26,    1), S( -19,  -11), S( -10,   12), S(   5,    9), S( -12,  -16), S(   2,   -6), S( -14,    4), 
    S( -37,    1), S( -33,    7), S( -28,   -5), S(  -8,   -5), S(  -9,   -6), S(  -8,   -8), S(  -7,   -2), S(  -5,   14), 
    S( -88,   11), S( -29,   -5), S( -44,    1), S( -24,    4), S( -25,   11), S( -12,   -6), S( -25,    1), S( -47,    5), 
};

constexpr int BISHOP_VALUE = S( 354,  454);

constexpr int BISHOP_MOBILITY[14]
{
    S( -38,    1), S( -24,   14), S( -24,   14), S( -20,   34), S( -15,   36), S( -14,   48), S( -11,   54), S(  -8,   52), 
    S(  -9,   54), S( -11,   52), S( -12,   47), S( -16,   41), S(  10,   13), S(  39,    1), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -40,   27), S( -75,   39), S( -69,   31), S(-116,   44), S(-102,   39), S( -78,   21), S( -44,   27), S( -70,   19), 
    S( -20,   11), S(  -4,   14), S( -14,   15), S( -37,   22), S(  -2,    2), S( -14,   13), S( -19,   18), S( -30,    9), 
    S( -10,   36), S(   9,   21), S(   9,   16), S(  23,    3), S(  10,   13), S(  46,   21), S(  20,   21), S(  20,   30), 
    S( -19,   27), S(  -4,   28), S(   6,   19), S(  22,   35), S(  15,   24), S(   7,   25), S(   0,   19), S( -20,   31), 
    S( -11,   21), S( -16,   24), S(  -9,   25), S(  13,   28), S(   8,   24), S(  -6,   17), S( -14,   22), S(   3,    3), 
    S(  -8,   16), S(   5,   22), S(   1,   20), S(   0,   19), S(   3,   24), S(   3,   19), S(   7,   11), S(  12,    3), 
    S(   8,   10), S(   5,   -1), S(  15,  -10), S(  -9,   10), S(  -1,   14), S(  12,    4), S(  29,    6), S(   8,  -10), 
    S(  -3,    0), S(  17,    5), S(  -5,   12), S( -12,   16), S(  -7,   14), S( -11,   26), S(   9,   -4), S(  16,  -32), 
};

constexpr int ROOK_VALUE = S( 412,  857);

constexpr int OPEN_FILE = S(  19,    8);

constexpr int SEMI_OPEN_FILE = S(  22,    2);

constexpr int FRIENDLY_FILE = S(  11,   -9);

constexpr int FRIENDLY_RANK = S(  -1,   -6);

constexpr int ROOK_MOBILITY[15]
{
    S( -44,   -5), S(  -4,   24), S(   4,   37), S(  -2,   36), S(  -7,   42), S(  -7,   40), S( -11,   38), S( -14,   37), 
    S( -15,   31), S( -16,   32), S( -17,   32), S( -18,   31), S( -17,   28), S( -27,   29), S( -26,   17), 
};

constexpr int ROOK_PSQT[64]
{
    S( -15,   44), S( -38,   58), S( -36,   65), S( -38,   58), S( -27,   51), S( -10,   50), S(  -5,   48), S(  18,   35), 
    S( -29,   47), S( -37,   61), S( -22,   65), S(  -3,   49), S( -19,   50), S(   5,   39), S(   9,   33), S(  29,   25), 
    S( -44,   46), S( -13,   40), S( -26,   42), S( -26,   32), S(  11,   19), S(  14,   17), S(  70,    5), S(  28,    7), 
    S( -41,   46), S( -28,   39), S( -36,   47), S( -30,   36), S( -26,   19), S( -15,   19), S(   1,   18), S(  -4,   14), 
    S( -49,   34), S( -55,   35), S( -48,   32), S( -43,   27), S( -38,   23), S( -44,   22), S( -14,    9), S( -26,    9), 
    S( -49,   21), S( -49,   19), S( -47,   16), S( -42,   15), S( -30,    8), S( -26,   -1), S(  12,  -25), S( -12,  -19), 
    S( -46,    7), S( -44,   14), S( -36,   13), S( -36,    9), S( -28,    2), S( -17,   -6), S(   5,  -22), S( -34,  -11), 
    S( -22,   14), S( -27,   10), S( -28,   16), S( -21,    6), S( -12,   -1), S( -11,    8), S(  -3,   -5), S( -14,  -10), 
};

constexpr int QUEEN_VALUE = S( 864, 1692);

constexpr int QUEEN_MOBILITY[28]
{
    S( -89,  -53), S( -87,  -53), S( -81,  -54), S( -54,  -41), S( -27,  -11), S( -23,   24), S( -24,   40), S( -26,   55), 
    S( -27,   63), S( -28,   57), S( -30,   58), S( -32,   54), S( -35,   54), S( -37,   54), S( -39,   55), S( -44,   58), 
    S( -46,   56), S( -47,   53), S( -48,   56), S( -46,   41), S( -38,   33), S( -27,   13), S( -11,   -4), S(   8,  -21), 
    S(  40,  -30), S(  65,  -25), S(  85,   24), S(  77,   55), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -37,   50), S( -65,   86), S( -39,  106), S(  12,   67), S( -26,  109), S( -19,  106), S(  -5,   63), S( -30,   86), 
    S(  -3,   36), S( -35,   66), S( -36,  111), S( -54,  144), S( -49,  165), S(  -5,  113), S( -17,   96), S(  34,   88), 
    S(  -1,   37), S( -12,   50), S( -20,   84), S( -12,   91), S(  -5,  112), S(  36,  100), S(  46,   65), S(  51,   51), 
    S( -21,   57), S( -17,   59), S( -22,   66), S( -26,   83), S( -26,   97), S( -11,   94), S(   1,   96), S(   9,   75), 
    S( -12,   35), S( -25,   64), S( -23,   51), S( -17,   66), S( -19,   63), S( -14,   61), S(   0,   53), S(   8,   51), 
    S( -11,   14), S(  -5,   22), S( -10,   38), S( -10,   29), S(  -7,   37), S(  -2,   35), S(  14,   16), S(  11,   11), 
    S(  -1,    0), S(  -1,    3), S(   8,   -6), S(  10,    1), S(   7,   10), S(  19,  -28), S(  30,  -59), S(  41,  -83), 
    S(  -4,    2), S(  -7,    3), S(   0,    5), S(  11,   17), S(   7,   -3), S(  -7,   -8), S(  12,  -34), S(   1,  -18), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -41,   16), S(  -9,    5), S(  19,   -5), S(  41,  -35), 
};

constexpr int KING_PSQT[64]
{
    S( -76, -130), S(  91,  -78), S(  15,  -25), S( -42,   20), S(  -3,    0), S(  -8,   16), S(   6,   12), S(  -4, -124), 
    S( -15,   -7), S(  26,   20), S( -15,   38), S(  43,   28), S( -20,   61), S(  21,   66), S(  18,   59), S( -65,   44), 
    S(-111,   38), S(  24,   41), S( -19,   65), S( -78,   91), S( -25,   95), S(  51,   80), S(  47,   70), S( -40,   50), 
    S( -75,   22), S( -36,   40), S( -80,   76), S(-126,   97), S( -96,   94), S( -52,   84), S( -52,   66), S( -96,   50), 
    S( -63,    5), S( -39,   17), S( -66,   53), S(-108,   78), S(-104,   76), S( -61,   54), S( -57,   30), S(-108,   34), 
    S(   9,  -22), S(  42,  -14), S( -25,   20), S( -45,   39), S( -40,   38), S( -33,   23), S(  16,   -7), S(  -4,   -5), 
    S( 102,  -49), S(  43,  -29), S(  28,  -14), S( -15,    3), S( -16,    7), S(   1,   -4), S(  54,  -32), S(  68,  -36), 
    S(  85,  -82), S(  97,  -57), S(  82,  -37), S(  -7,  -22), S(  59,  -46), S(   5,  -16), S(  82,  -52), S(  98,  -89), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  -6,  -15), S( -31,    5), S( -25,    8), S( -39,    3), S( -39,    7), S( -15,  -25), 
    S( -62,   36), S( -41,  -38), S(-106,   31), S( -74,  -17), S( -54,  -46), S(-111,   52), S( -93,  -43), S(-123,  -79), 
    S(-131,   16), S(-116,  -22), S(-144,   55), S(-140,  -18), S(-177,  -73), S(-203,   41), S(-224,   -2), S(-181,    2), 
    S(-190,  -51), S(-191, -182), S(-224, -206), S(-200, -128), S(-282,  -52), S(-223,  -62), S(-260,  -83), S(-303, -188), 
    S(-289, -206), S(-369, -279), S(-382, -248), S(-117,  -90), S(-379, -232), S(-323, -207), S(-375, -227), S(-245, -200), 
    S(-162, -188), S(-228, -235), S(-234, -214), S(-237, -145), S(-323, -224), S(-102,  -41), S(-352, -198), S(-127,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(   2,    4);
