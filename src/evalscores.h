
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  86,  146);

constexpr int PAWN_STACKED = S(  -3,  -14);

constexpr int PAWN_ISOLATED = S( -12,  -17);

constexpr int SUPPORTED_PASSER = S(  14,    6);

constexpr int PASSER_TEMPO = S(  53,   37);

constexpr int PAWN_SUPPORT = S(  11,   10);

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -79,   67), S( -76,   39), S(-100,   26), S( -72,  -40), S( -66,  -31), S( -90,    0), S(-107,   24), S(-119,   58), 
    S(  -9,   30), S(  -5,   20), S(  32,    2), S(  34,   20), S(  50,   -4), S(  85,  -10), S(  63,   33), S(  28,   25), 
    S( -33,   19), S( -10,   -3), S(  -3,   -6), S(   1,  -23), S(  28,  -24), S(  18,  -20), S(  11,  -11), S(  -1,   -8), 
    S( -41,   -3), S( -22,  -12), S(  -6,  -14), S(   8,  -19), S(  10,  -19), S(   8,  -20), S(  -2,  -23), S( -18,  -22), 
    S( -46,  -10), S( -28,  -19), S( -15,  -13), S( -11,   -9), S(   3,   -8), S(  -3,  -11), S(  10,  -33), S( -14,  -30), 
    S( -39,   -6), S( -20,  -13), S( -17,   -6), S( -26,    3), S( -10,   10), S(  -1,    1), S(  20,  -24), S( -30,  -24), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 208,  261), S( 154,  307), S( 138,  328), S( 186,  313), S( 174,  292), S( 126,  284), S( 151,  343), S( 216,  291), 
    S(   6,  238), S(   2,  249), S( -20,  211), S( -11,  128), S( -14,  143), S( -48,  188), S( -53,  221), S( -47,  236), 
    S(  -7,  125), S( -22,  121), S( -20,   82), S( -16,   63), S( -32,   59), S( -27,   87), S( -60,  128), S( -32,  124), 
    S( -36,   74), S( -49,   62), S( -50,   37), S( -45,   15), S( -54,   24), S( -43,   38), S( -64,   73), S( -34,   67), 
    S( -29,   12), S( -50,   17), S( -55,    2), S( -40,   -9), S( -48,   -6), S( -46,   -1), S( -55,   31), S( -10,    7), 
    S( -32,   12), S( -28,    6), S( -32,   -5), S( -35,  -11), S( -16,  -28), S(  -6,  -22), S( -20,   -4), S(  -8,    3), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 115,  161), S( 176,  101), S( 222,   94), S( 220,  105), S( 181,   93), S( 194,   72), S( 131,   29), S(  75,   86), 
    S(  41,   96), S(  78,   76), S(  53,   40), S(  26,   12), S(  17,   27), S(  35,   36), S(  13,    0), S( -39,   43), 
    S(  46,   56), S(  41,   56), S(  32,   27), S(  18,   32), S(  -4,   31), S(  18,   27), S(  12,   41), S(  -3,   35), 
    S(  32,   33), S(  23,   35), S( -20,   21), S( -14,   20), S( -23,   30), S( -18,   30), S(   4,   52), S(  -6,   33), 
    S(  11,   13), S(  -6,   37), S( -25,   17), S( -27,   12), S( -31,   19), S( -12,   16), S( -22,   49), S(  -9,   19), 
    S(   3,   -2), S(   2,   23), S( -25,   18), S( -15,   14), S(  -5,   -3), S( -14,    3), S(  11,    5), S( -10,   18), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 373,  497);

constexpr int KNIGHT_MOBILITY[9]
{
    S( -70, -104), S( -47,  -24), S( -36,    1), S( -29,   10), S( -24,   18), S( -18,   22), S( -10,   18), S(  -6,   14), 
    S(  -2,    1), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-191,  -67), S(-179,    1), S(-103,   12), S( -91,   14), S( -39,    7), S( -85,  -34), S(-147,   -8), S(-141,  -86), 
    S( -46,    2), S( -21,   10), S(  11,   -3), S(  36,   -5), S(   3,   -8), S(  79,  -30), S( -27,    5), S(  -2,  -27), 
    S( -21,    2), S(  18,    2), S(  38,   17), S(  53,   16), S(  91,   -3), S(  89,  -10), S(  39,   -8), S(  10,  -11), 
    S( -16,   23), S(   2,   22), S(  28,   32), S(  55,   31), S(  38,   25), S(  59,   28), S(  16,   24), S(  27,    9), 
    S( -25,   20), S( -11,   15), S(  12,   28), S(  16,   30), S(  25,   33), S(  24,   18), S(  23,   12), S(  -8,   18), 
    S( -48,   -5), S( -19,    1), S(  -2,   -4), S(   7,   21), S(  24,   16), S(  10,   -9), S(   6,   -6), S( -20,    3), 
    S( -54,   -6), S( -39,   -1), S( -22,   -4), S(  -2,   -4), S(   0,   -5), S(  -5,   -7), S( -18,   -6), S( -22,    9), 
    S(-106,    8), S( -43,   -2), S( -49,   -4), S( -27,    0), S( -22,    6), S( -17,  -10), S( -36,    1), S( -65,    5), 
};

constexpr int BISHOP_VALUE = S( 398,  466);

constexpr int BISHOP_MOBILITY[14]
{
    S( -60,  -10), S( -49,    9), S( -37,   24), S( -29,   35), S( -18,   44), S( -11,   54), S(  -3,   54), S(   0,   54), 
    S(   4,   55), S(   9,   49), S(  15,   40), S(  19,   38), S(  55,   29), S(  77,   15), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -42,   24), S( -79,   36), S( -68,   27), S(-118,   41), S(-103,   37), S( -79,   18), S( -44,   24), S( -71,   15), 
    S( -24,    9), S(  -2,   16), S( -13,   17), S( -36,   25), S(  -1,    5), S(  -9,   15), S(  -9,   19), S( -22,    3), 
    S( -14,   34), S(   9,   22), S(  12,   20), S(  28,    7), S(  14,   18), S(  49,   26), S(  20,   25), S(  16,   28), 
    S( -23,   27), S(  -1,   30), S(  12,   23), S(  36,   36), S(  31,   25), S(  13,   30), S(   1,   21), S( -21,   29), 
    S( -13,   18), S( -15,   28), S(   0,   29), S(  29,   29), S(  21,   27), S(   0,   21), S( -11,   24), S(   1,    0), 
    S( -12,   15), S(   9,   23), S(   9,   22), S(   6,   23), S(  10,   28), S(  12,   20), S(  11,   13), S(   9,    2), 
    S(   1,   10), S(  10,    0), S(  15,   -7), S(  -4,   11), S(   9,   11), S(  16,    5), S(  32,    7), S(   7,  -13), 
    S(  -6,   -3), S(  18,    2), S(  -6,   17), S( -13,   15), S(  -7,   13), S(  -9,   26), S(   8,   -7), S(  10,  -33), 
};

constexpr int ROOK_VALUE = S( 458,  872);

constexpr int OPEN_FILE = S(  18,    7);

constexpr int SEMI_OPEN_FILE = S(  22,    2);

constexpr int FRIENDLY_FILE = S(  12,   -9);

constexpr int FRIENDLY_RANK = S(  -1,   -7);

constexpr int ROOK_MOBILITY[15]
{
    S( -46,   -5), S( -32,   21), S( -28,   34), S( -20,   35), S( -16,   39), S( -19,   41), S( -11,   38), S(  -6,   33), 
    S(  -1,   35), S(   6,   35), S(  12,   34), S(  14,   35), S(  13,   38), S(  22,   28), S(  25,   25), 
};

constexpr int ROOK_PSQT[64]
{
    S( -18,   46), S( -40,   60), S( -35,   66), S( -39,   60), S( -27,   52), S( -10,   50), S(  -5,   48), S(  19,   35), 
    S( -29,   49), S( -33,   63), S( -15,   66), S(   5,   49), S( -11,   51), S(  19,   37), S(  19,   31), S(  35,   23), 
    S( -46,   49), S( -13,   43), S( -24,   45), S( -23,   35), S(  16,   20), S(  22,   17), S(  80,    4), S(  33,    7), 
    S( -43,   48), S( -28,   41), S( -36,   50), S( -28,   39), S( -23,   21), S( -10,   20), S(  10,   17), S(   2,   14), 
    S( -49,   35), S( -55,   38), S( -46,   34), S( -41,   29), S( -38,   26), S( -39,   23), S(  -4,    8), S( -22,    9), 
    S( -49,   22), S( -47,   20), S( -44,   18), S( -40,   17), S( -27,   10), S( -18,    0), S(  21,  -26), S(  -7,  -18), 
    S( -46,    8), S( -42,   15), S( -34,   14), S( -32,   10), S( -24,    3), S( -13,   -5), S(  10,  -22), S( -33,  -11), 
    S( -22,   15), S( -26,   11), S( -26,   16), S( -18,    6), S( -10,    0), S(  -5,    5), S(  -1,   -5), S( -14,   -9), 
};

constexpr int QUEEN_VALUE = S( 926, 1750);

constexpr int QUEEN_MOBILITY[28]
{
    S( -89,  -53), S( -86,  -53), S( -87,  -56), S( -79,  -46), S( -74,  -21), S( -71,   17), S( -66,   24), S( -64,   45), 
    S( -60,   46), S( -56,   48), S( -51,   49), S( -48,   50), S( -45,   52), S( -42,   52), S( -38,   54), S( -37,   57), 
    S( -33,   56), S( -23,   51), S( -18,   51), S(  -5,   42), S(   6,   35), S(  21,   31), S(  40,   23), S(  59,   16), 
    S(  93,   14), S( 112,   19), S( 112,   52), S(  96,   76), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -40,   46), S( -65,   82), S( -39,  102), S(  18,   59), S( -30,  113), S( -16,  103), S( -10,   68), S( -34,   88), 
    S( -11,   42), S( -34,   70), S( -33,  114), S( -50,  147), S( -44,  168), S(  -1,  119), S( -14,  104), S(  28,   93), 
    S(  -6,   39), S( -10,   52), S( -14,   87), S(  -3,   95), S(   4,  117), S(  44,  109), S(  50,   75), S(  51,   56), 
    S( -24,   58), S( -15,   59), S( -13,   67), S( -11,   91), S( -11,  106), S(  -1,   99), S(   5,  101), S(   8,   83), 
    S( -14,   34), S( -23,   67), S( -14,   54), S(  -6,   75), S(  -5,   71), S(  -4,   67), S(   2,   63), S(   8,   57), 
    S( -13,   14), S(  -2,   27), S(  -2,   40), S(  -4,   35), S(   1,   43), S(   8,   41), S(  20,   28), S(  11,   16), 
    S(  -8,    5), S(  -1,    6), S(   9,    0), S(  15,    2), S(  12,   10), S(  22,  -21), S(  32,  -54), S(  36,  -84), 
    S( -13,    5), S(  -6,    4), S(   2,    3), S(   9,   24), S(   9,   -2), S(  -5,   -6), S(  11,  -32), S(  -8,  -16), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -40,   16), S(  -9,    6), S(  17,   -4), S(  42,  -36), 
};

constexpr int KING_PSQT[64]
{
    S( -88, -152), S(  92,  -83), S(  12,  -28), S( -43,   16), S(  -2,   -3), S(  -9,   13), S(   1,    6), S( -10, -130), 
    S( -13,  -12), S(  33,   25), S(  -7,   42), S(  45,   33), S( -21,   67), S(  22,   72), S(  17,   65), S( -73,   42), 
    S(-116,   35), S(  27,   47), S(  -9,   68), S( -77,   97), S( -26,  101), S(  49,   86), S(  47,   75), S( -50,   48), 
    S( -83,   19), S( -31,   45), S( -75,   81), S(-124,  102), S( -88,   98), S( -46,   89), S( -51,   72), S(-103,   46), 
    S( -71,    2), S( -34,   22), S( -55,   56), S( -99,   81), S( -95,   79), S( -52,   57), S( -47,   34), S(-115,   31), 
    S(   2,  -26), S(  51,  -10), S( -16,   24), S( -37,   42), S( -33,   42), S( -24,   26), S(  25,   -4), S( -12,   -7), 
    S(  92,  -51), S(  52,  -25), S(  38,  -10), S(  -2,    6), S(  -2,    9), S(  10,   -1), S(  64,  -29), S(  58,  -37), 
    S(  68,  -90), S(  95,  -62), S(  80,  -42), S( -11,  -25), S(  52,  -49), S(   5,  -20), S(  81,  -57), S(  83,  -96), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S( -14,   -6), S( -29,    9), S( -44,   12), S( -57,    5), S( -55,   12), S( -41,  -24), 
    S( -95,   12), S( -62,  -33), S(-120,   25), S( -98,  -27), S( -80,  -59), S(-128,   40), S(-111,  -56), S(-122,  -79), 
    S(-154,    4), S(-146,  -42), S(-152,   48), S(-147,  -23), S(-184,  -78), S(-220,   33), S(-218,   -2), S(-184,   -4), 
    S(-201,  -62), S(-193, -183), S(-227, -211), S(-198, -132), S(-278,  -52), S(-220,  -71), S(-259,  -82), S(-301, -187), 
    S(-290, -207), S(-367, -278), S(-388, -253), S(-113,  -88), S(-377, -231), S(-323, -208), S(-374, -227), S(-245, -200), 
    S(-162, -188), S(-228, -235), S(-234, -214), S(-237, -145), S(-323, -224), S(-101,  -41), S(-352, -198), S(-127,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -1,    3);
