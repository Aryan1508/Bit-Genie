
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S( 109,  182);

constexpr int PAWN_STACKED = S(  -2,  -16);

constexpr int PAWN_ISOLATED = S(  -8,   -9);

constexpr int SUPPORTED_PASSER = S(  10,   13);

constexpr int PASSER_TEMPO = S(  52,   38);

constexpr int PAWN_SUPPORT = S(  19,   16);

constexpr int PHALANX[8]
{
    S(   0,    0), S(   8,   -1), S(  16,   14), S(  29,   29), S(  57,   87), S( 162,  212), S(  78,  162), S(   0,    0), 
};

constexpr int PASSER[8]
{
    S(   0,    0), S( -21,  -12), S( -32,   -2), S( -41,   40), S( -22,   85), S(  17,  134), S( 105,  129), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[8]
{
    S(   0,    0), S(  -2,   -1), S( -11,   17), S(  -2,   26), S(  19,   32), S(  45,    1), S(  52,  -32), S(   0,    0), 
};

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S(  -6,  162), S(  11,  140), S(  -3,  136), S(  35,   72), S(  22,   64), S(  -9,   84), S( -59,  125), S(-104,  162), 
    S( -38,   58), S( -26,   56), S(   1,    8), S(   2,  -29), S(  13,  -38), S(  60,  -33), S(  27,   26), S( -18,   30), 
    S( -52,   -5), S( -30,  -33), S( -23,  -54), S( -17,  -77), S(   7,  -77), S(  -1,  -68), S(  -9,  -45), S( -27,  -37), 
    S( -62,  -30), S( -42,  -45), S( -31,  -60), S( -19,  -71), S( -12,  -69), S( -15,  -65), S( -21,  -58), S( -42,  -53), 
    S( -67,  -37), S( -49,  -51), S( -39,  -56), S( -33,  -60), S( -19,  -57), S( -31,  -52), S( -12,  -66), S( -42,  -61), 
    S( -60,  -30), S( -36,  -39), S( -36,  -45), S( -45,  -42), S( -30,  -36), S( -16,  -40), S(   2,  -50), S( -56,  -50), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 366,  473);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-142, -158), S( -38,  -60), S( -14,  -16), S(  -2,   15), S(  11,   27), S(  13,   41), S(  24,   43), S(  36,   46), 
    S(  47,   42), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-168,  -45), S(-181,   14), S(-111,   21), S( -69,    5), S( -42,   10), S( -92,  -25), S(-148,    8), S(-119,  -76), 
    S( -54,   13), S( -29,   16), S(  14,   -7), S(  35,   -8), S(  10,  -13), S(  66,  -31), S( -27,    9), S( -10,  -13), 
    S( -26,    5), S(  21,   -4), S(  43,    3), S(  52,    4), S(  82,  -12), S(  87,  -22), S(  35,  -12), S(  -5,   -5), 
    S( -23,   25), S(   1,   12), S(  37,   16), S(  69,   13), S(  45,   11), S(  61,   13), S(   8,   13), S(  13,   12), 
    S( -31,   23), S(  -9,    5), S(  20,   13), S(  30,   14), S(  35,   19), S(  35,    2), S(  21,    3), S( -14,   20), 
    S( -51,    1), S( -23,   -4), S(   2,  -16), S(   9,    7), S(  26,    3), S(   7,  -18), S(   5,  -10), S( -31,    5), 
    S( -60,    4), S( -50,    6), S( -24,  -11), S(  -5,  -10), S(  -8,  -12), S(  -5,  -13), S( -24,   -1), S( -32,   23), 
    S(-106,   14), S( -54,   -1), S( -64,   -1), S( -48,   -1), S( -43,    8), S( -34,   -7), S( -47,    6), S( -74,   22), 
};

constexpr int BISHOP_VALUE = S( 398,  444);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -87,   -7), S( -67,   -1), S( -51,   35), S( -26,   41), S( -11,   49), S(  12,   62), S(  30,   64), 
    S(  46,   70), S(  59,   67), S(  74,   67), S(  84,   57), S(  92,   48), S( 121,   38), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -28,   27), S( -67,   38), S( -63,   32), S(-104,   43), S( -90,   39), S( -70,   20), S( -45,   29), S( -59,   23), 
    S( -18,   13), S(  -4,   14), S( -12,   13), S( -35,   21), S(   0,    1), S( -17,   13), S( -17,   18), S( -21,   13), 
    S(  -3,   37), S(  10,   22), S(  10,   13), S(  21,    2), S(   6,   13), S(  45,   20), S(  20,   22), S(  24,   32), 
    S( -12,   29), S(  -2,   26), S(   4,   17), S(  20,   33), S(  16,   21), S(   4,   25), S(   4,   16), S( -15,   34), 
    S(  -4,   21), S( -14,   22), S( -10,   23), S(  12,   24), S(   8,   21), S(  -5,   13), S( -13,   21), S(  13,    1), 
    S(   0,   17), S(   5,   19), S(   2,   15), S(  -2,   15), S(   3,   20), S(   5,   15), S(  11,    7), S(  21,    4), 
    S(  18,    9), S(  12,   -1), S(  15,  -10), S(  -3,    6), S(   4,   11), S(  15,    3), S(  37,    3), S(  19,   -7), 
    S(  10,    4), S(  23,    6), S(   7,   12), S(  -3,   14), S(   5,   13), S(   2,   25), S(  14,    3), S(  28,  -19), 
};

constexpr int ROOK_VALUE = S( 466,  836);

constexpr int OPEN_FILE = S(  20,    8);

constexpr int SEMI_OPEN_FILE = S(  21,    2);

constexpr int FRIENDLY_FILE = S(  11,   -8);

constexpr int FRIENDLY_RANK = S(  -1,   -6);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -56,   34), S( -38,   55), S( -23,   60), S(  -9,   64), S(   4,   62), S(   9,   63), 
    S(  24,   56), S(  37,   56), S(  49,   59), S(  62,   57), S(  73,   57), S(  79,   59), S(  93,   48), 
};

constexpr int ROOK_PSQT[64]
{
    S( -13,   42), S( -35,   55), S( -33,   62), S( -33,   55), S( -24,   48), S(  -9,   47), S(  -4,   46), S(  20,   33), 
    S( -29,   46), S( -35,   59), S( -21,   64), S(  -5,   48), S( -22,   50), S(   4,   38), S(   5,   33), S(  29,   23), 
    S( -41,   45), S( -11,   40), S( -21,   40), S( -23,   31), S(  12,   17), S(  13,   17), S(  65,    7), S(  28,    7), 
    S( -37,   46), S( -25,   37), S( -31,   45), S( -24,   33), S( -20,   16), S( -11,   17), S(   2,   18), S(   0,   14), 
    S( -45,   32), S( -51,   34), S( -41,   29), S( -37,   24), S( -32,   20), S( -39,   20), S( -12,    8), S( -21,    6), 
    S( -46,   19), S( -46,   16), S( -43,   13), S( -36,   11), S( -24,    5), S( -22,   -3), S(  13,  -26), S(  -8,  -21), 
    S( -42,    4), S( -41,   12), S( -32,   10), S( -30,    5), S( -23,   -2), S( -12,   -9), S(   7,  -22), S( -27,  -13), 
    S( -18,   10), S( -23,    7), S( -24,   13), S( -17,    2), S(  -8,   -5), S(  -6,    4), S(   1,   -7), S(  -8,  -13), 
};

constexpr int QUEEN_VALUE = S( 947, 1701);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S(-103,  -66), S(-147,  -94), S(-105,  -45), S( -89,  -59), S( -83,   11), 
    S( -70,   29), S( -62,   50), S( -49,   50), S( -37,   56), S( -25,   62), S( -13,   60), S(   0,   61), S(  10,   65), 
    S(  19,   67), S(  31,   70), S(  39,   73), S(  50,   71), S(  60,   77), S(  73,   71), S(  83,   69), S( 102,   60), 
    S( 112,   54), S( 139,   40), S( 155,   46), S( 129,   82), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -39,   58), S( -70,   92), S( -45,  110), S(  -9,   85), S( -20,   97), S( -40,  121), S(  13,   44), S( -27,   83), 
    S(  -7,   41), S( -33,   68), S( -32,  108), S( -50,  139), S( -51,  166), S(  -9,  116), S( -17,   95), S(  35,   89), 
    S(   0,   39), S(  -8,   47), S( -14,   85), S(  -6,   91), S(  -1,  112), S(  38,  102), S(  46,   66), S(  46,   61), 
    S( -19,   59), S( -12,   56), S( -14,   65), S( -16,   89), S( -17,  105), S(  -5,   95), S(   5,   94), S(   6,   81), 
    S(  -7,   32), S( -19,   62), S( -14,   51), S(  -9,   70), S(  -9,   70), S(  -5,   60), S(   3,   55), S(  10,   53), 
    S(  -7,   13), S(  -1,   21), S(  -5,   40), S(  -3,   29), S(   1,   38), S(   3,   38), S(  18,   19), S(  12,   18), 
    S(   2,    2), S(   2,    3), S(  12,   -5), S(  16,    0), S(  13,    9), S(  23,  -24), S(  33,  -59), S(  41,  -71), 
    S(  -3,    6), S(  -3,    2), S(   6,    0), S(  13,   20), S(  12,   -4), S(  -4,   -6), S(  14,  -28), S(  13,  -28), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -43,   17), S(  -8,    5), S(  19,   -7), S(  37,  -36), 
};

constexpr int KING_PSQT[64]
{
    S( -52,  -99), S(  66,  -73), S(  12,  -29), S( -57,   19), S( -16,   -3), S( -14,   15), S(  18,   14), S(  14, -113), 
    S( -40,   -4), S(  14,   29), S( -31,   48), S(  49,   30), S(   0,   58), S(  31,   67), S(  34,   62), S( -46,   38), 
    S(-109,   34), S(  34,   45), S( -29,   70), S( -64,   91), S(  -7,   93), S(  73,   78), S(  60,   72), S( -16,   40), 
    S( -72,   18), S( -31,   44), S( -65,   77), S(-107,   95), S( -87,   94), S( -40,   85), S( -28,   66), S( -97,   44), 
    S( -63,    0), S( -26,   20), S( -54,   55), S( -94,   77), S( -84,   74), S( -40,   53), S( -37,   32), S(-116,   31), 
    S(  -4,  -24), S(  63,  -14), S(  -4,   21), S( -20,   37), S( -12,   36), S(  -8,   22), S(  41,   -7), S( -18,   -5), 
    S(  79,  -49), S(  62,  -28), S(  47,  -12), S(   8,    2), S(   8,    6), S(  25,   -4), S(  77,  -31), S(  46,  -34), 
    S(  32,  -83), S(  72,  -55), S(  54,  -35), S( -30,  -22), S(  33,  -46), S( -17,  -16), S(  61,  -51), S(  47,  -87), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  10,  -21), S( -15,   -2), S( -26,   12), S( -38,    6), S( -33,    9), S( -17,  -14), 
    S( -48,   34), S( -32,  -41), S( -90,   21), S( -67,   -3), S( -40,  -36), S(-101,   62), S( -88,  -25), S( -98,  -76), 
    S(-116,   22), S( -94,  -25), S(-141,  106), S(-126,  -32), S(-155,  -44), S(-193,   60), S(-209,   25), S(-167,   50), 
    S(-194,   -2), S(-176, -159), S(-189, -143), S(-207,  -96), S(-250,  -19), S(-248,   -8), S(-244,  -75), S(-301, -170), 
    S(-272, -195), S(-370, -279), S(-359, -219), S(-152, -105), S(-395, -243), S(-315, -201), S(-380, -227), S(-251, -202), 
    S(-160, -187), S(-227, -234), S(-235, -214), S(-238, -147), S(-322, -224), S(-114,  -45), S(-354, -199), S(-129,  -37), 
    S(-400, -400), S(-400,  -10), S(-399, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-401, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    3);
