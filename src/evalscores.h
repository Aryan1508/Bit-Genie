
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  95,  145);

constexpr int PAWN_STACKED = S(  -3,  -15);

constexpr int PAWN_ISOLATED = S( -12,  -16);

constexpr int SUPPORTED_PASSER = S(  14,    9);

constexpr int PASSER_TEMPO = S(  54,   37);

constexpr int PAWN_SUPPORT = S(  11,   11);

constexpr int CONNECTED_PASSER[8]
{
    S(   0,    0), S(  23,  -20), S(  13,    5), S(  41,   39), S(  74,   75), S(  73,   90), S(  21,   52), S(   0,    0), 
};

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -87,   66), S( -76,   37), S(-101,   26), S( -76,  -40), S( -67,  -31), S( -91,    1), S(-109,   24), S(-123,   58), 
    S( -11,   30), S(   2,   22), S(  33,    2), S(  35,   18), S(  52,   -8), S(  89,   -8), S(  66,   35), S(  24,   27), 
    S( -35,   19), S( -10,    0), S(   0,   -5), S(   2,  -20), S(  27,  -21), S(  21,  -18), S(  13,   -9), S(  -5,   -7), 
    S( -46,   -1), S( -19,   -9), S(  -4,  -12), S(   8,  -16), S(  12,  -17), S(  11,  -18), S(   0,  -20), S( -21,  -21), 
    S( -51,   -8), S( -25,  -16), S( -14,  -10), S(  -8,   -8), S(   7,   -7), S(  -4,   -7), S(  13,  -30), S( -19,  -28), 
    S( -43,   -5), S( -16,  -11), S( -14,   -4), S( -23,    5), S(  -7,   10), S(   5,    2), S(  23,  -21), S( -34,  -22), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 194,  268), S( 159,  305), S( 141,  327), S( 186,  313), S( 176,  291), S( 130,  282), S( 148,  344), S( 215,  291), 
    S(   1,  236), S(  -3,  245), S( -21,  208), S( -11,  127), S( -17,  146), S( -48,  182), S( -60,  217), S( -50,  232), 
    S( -12,  122), S( -22,  114), S( -22,   78), S( -18,   57), S( -32,   53), S( -30,   80), S( -62,  119), S( -35,  120), 
    S( -38,   70), S( -49,   55), S( -51,   33), S( -44,   12), S( -52,   20), S( -46,   34), S( -65,   65), S( -37,   63), 
    S( -29,   10), S( -48,   14), S( -52,    0), S( -41,  -10), S( -47,   -7), S( -43,   -4), S( -54,   28), S( -13,    6), 
    S( -35,   13), S( -36,   10), S( -35,   -4), S( -38,   -9), S( -16,  -26), S( -10,  -20), S( -28,    1), S( -14,    5), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 123,  154), S( 172,  101), S( 219,   94), S( 218,  105), S( 179,   93), S( 188,   73), S( 131,   29), S(  69,   84), 
    S(  37,   92), S(  73,   72), S(  51,   40), S(  25,   12), S(  14,   30), S(  31,   31), S(  10,   -6), S( -44,   40), 
    S(  42,   53), S(  38,   49), S(  30,   24), S(  18,   28), S(  -3,   26), S(  15,   21), S(  10,   32), S(  -6,   31), 
    S(  31,   30), S(  20,   31), S( -19,   18), S( -14,   18), S( -23,   27), S( -20,   26), S(   1,   45), S(  -7,   30), 
    S(  11,   11), S(  -6,   34), S( -25,   16), S( -28,   12), S( -30,   18), S( -11,   14), S( -22,   46), S(  -8,   17), 
    S(   3,   -2), S(  -6,   26), S( -24,   19), S( -14,   14), S(  -7,   -1), S( -16,    4), S(   3,   11), S(  -8,   17), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 366,  480);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-142, -170), S( -38,  -59), S( -15,  -11), S(  -3,   19), S(  10,   32), S(  12,   46), S(  24,   49), S(  36,   51), 
    S(  49,   47), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-168,  -49), S(-176,    9), S(-107,   17), S( -86,   11), S( -42,    9), S( -88,  -29), S(-145,    0), S(-123,  -74), 
    S( -51,   13), S( -29,   15), S(  16,   -5), S(  36,   -6), S(   9,  -10), S(  68,  -29), S( -27,    9), S( -11,  -13), 
    S( -27,    4), S(  20,   -3), S(  44,    6), S(  53,    8), S(  85,   -8), S(  88,  -18), S(  36,  -10), S(  -6,   -5), 
    S( -23,   24), S(   1,   15), S(  38,   20), S(  71,   18), S(  47,   16), S(  63,   18), S(   8,   15), S(  13,   11), 
    S( -32,   23), S(  -9,    9), S(  22,   17), S(  32,   19), S(  37,   23), S(  37,    7), S(  20,    6), S( -15,   20), 
    S( -52,    1), S( -22,   -2), S(   4,  -12), S(  10,   12), S(  27,    8), S(   8,  -15), S(   5,   -8), S( -33,    4), 
    S( -61,    3), S( -50,    6), S( -24,  -10), S(  -5,   -8), S(  -7,   -9), S(  -4,  -12), S( -25,   -3), S( -35,   19), 
    S(-110,   20), S( -55,   -4), S( -65,   -2), S( -48,   -3), S( -43,    6), S( -35,   -8), S( -48,    3), S( -75,   14), 
};

constexpr int BISHOP_VALUE = S( 400,  456);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -97,    0), S( -70,   -6), S( -53,   31), S( -26,   38), S( -12,   48), S(  11,   62), S(  30,   66), 
    S(  47,   73), S(  59,   72), S(  74,   75), S(  85,   66), S(  94,   59), S( 120,   52), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -27,   29), S( -69,   41), S( -61,   32), S(-105,   44), S( -92,   40), S( -71,   22), S( -42,   30), S( -59,   23), 
    S( -15,   16), S(  -3,   16), S( -12,   15), S( -34,   21), S(   0,    2), S( -16,   15), S( -16,   20), S( -23,   15), 
    S(  -3,   37), S(  10,   22), S(  10,   14), S(  22,    2), S(   7,   13), S(  46,   21), S(  21,   23), S(  24,   33), 
    S( -12,   30), S(  -2,   27), S(   5,   18), S(  22,   34), S(  17,   22), S(   6,   25), S(   3,   17), S( -16,   34), 
    S(  -4,   23), S( -14,   24), S( -10,   24), S(  13,   26), S(   9,   23), S(  -4,   14), S( -12,   21), S(  11,    3), 
    S(   0,   18), S(   5,   21), S(   2,   17), S(   0,   17), S(   4,   22), S(   5,   16), S(  11,    8), S(  20,    5), 
    S(  16,   13), S(  12,    2), S(  16,  -10), S(  -4,    9), S(   4,   13), S(  16,    4), S(  37,    7), S(  17,   -8), 
    S(  11,    5), S(  24,    7), S(   7,   13), S(  -4,   17), S(   3,   16), S(   2,   26), S(  16,   -1), S(  31,  -25), 
};

constexpr int ROOK_VALUE = S( 465,  851);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    2);

constexpr int FRIENDLY_FILE = S(  11,   -9);

constexpr int FRIENDLY_RANK = S(  -1,   -6);

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -60,   32), S( -41,   52), S( -25,   58), S( -11,   63), S(   3,   62), S(   9,   65), 
    S(  25,   58), S(  38,   60), S(  51,   65), S(  64,   65), S(  76,   66), S(  83,   69), S(  96,   60), 
};

constexpr int ROOK_PSQT[64]
{
    S( -13,   44), S( -35,   57), S( -33,   64), S( -34,   57), S( -24,   50), S(  -8,   49), S(  -6,   48), S(  18,   36), 
    S( -28,   48), S( -36,   62), S( -21,   66), S(  -6,   51), S( -22,   53), S(   4,   42), S(   6,   36), S(  28,   27), 
    S( -41,   46), S( -11,   42), S( -22,   42), S( -23,   33), S(  12,   21), S(  12,   20), S(  65,    9), S(  28,    9), 
    S( -37,   46), S( -25,   39), S( -32,   47), S( -24,   36), S( -20,   19), S( -12,   20), S(   1,   20), S(  -1,   15), 
    S( -44,   33), S( -51,   36), S( -41,   31), S( -37,   26), S( -32,   23), S( -40,   22), S( -12,   10), S( -22,    8), 
    S( -44,   19), S( -45,   18), S( -42,   15), S( -36,   14), S( -24,    8), S( -22,   -1), S(  12,  -23), S(  -8,  -20), 
    S( -41,    5), S( -39,   13), S( -31,   12), S( -31,    9), S( -22,    1), S( -11,   -7), S(   9,  -22), S( -27,  -14), 
    S( -18,   13), S( -23,    9), S( -25,   15), S( -18,    6), S(  -9,   -1), S(  -7,    6), S(   0,   -5), S(  -9,  -11), 
};

constexpr int QUEEN_VALUE = S( 940, 1740);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -80,  -63), S(-149,  -91), S(-116,  -27), S( -98,  -43), S( -90,   18), 
    S( -76,   27), S( -67,   47), S( -53,   47), S( -41,   54), S( -28,   61), S( -15,   60), S(  -2,   63), S(   9,   68), 
    S(  19,   71), S(  31,   75), S(  41,   79), S(  52,   79), S(  63,   85), S(  76,   80), S(  88,   79), S( 107,   71), 
    S( 119,   63), S( 145,   55), S( 148,   72), S( 123,   99), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -35,   54), S( -63,   87), S( -39,  106), S(  10,   68), S( -28,  108), S( -24,  108), S(  -6,   64), S( -30,   88), 
    S(  -2,   41), S( -32,   69), S( -32,  111), S( -51,  143), S( -51,  169), S(  -9,  118), S( -19,  100), S(  31,   94), 
    S(   2,   39), S(  -9,   51), S( -13,   87), S(  -6,   96), S(  -2,  118), S(  36,  107), S(  43,   71), S(  43,   62), 
    S( -18,   60), S( -13,   61), S( -15,   70), S( -17,   96), S( -18,  110), S(  -6,   98), S(   3,   99), S(   5,   82), 
    S(  -8,   37), S( -20,   66), S( -15,   55), S( -10,   76), S( -10,   74), S(  -7,   64), S(   2,   57), S(   9,   54), 
    S(  -8,   16), S(  -1,   25), S(  -5,   43), S(  -4,   34), S(   0,   41), S(   2,   41), S(  17,   22), S(  11,   18), 
    S(   3,    2), S(   2,    7), S(  11,   -2), S(  14,    6), S(  11,   14), S(  23,  -23), S(  34,  -57), S(  43,  -81), 
    S(  -3,    6), S(  -3,    5), S(   4,    5), S(  12,   23), S(  10,   -1), S(  -5,   -4), S(  15,  -30), S(   6,  -17), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -41,   15), S(  -9,    5), S(  19,   -5), S(  40,  -34), 
};

constexpr int KING_PSQT[64]
{
    S( -79, -134), S(  86,  -84), S(  11,  -31), S( -46,   14), S(  -6,   -6), S( -11,   11), S(   4,    8), S(  -7, -129), 
    S( -22,  -13), S(  30,   27), S( -11,   45), S(  48,   35), S( -14,   68), S(  26,   73), S(  23,   66), S( -67,   39), 
    S(-116,   32), S(  32,   48), S( -13,   72), S( -70,   98), S( -19,  102), S(  58,   87), S(  54,   76), S( -43,   43), 
    S( -80,   16), S( -28,   47), S( -68,   82), S(-114,  102), S( -85,  100), S( -40,   90), S( -39,   72), S(-104,   43), 
    S( -70,   -1), S( -25,   23), S( -50,   57), S( -90,   82), S( -83,   79), S( -38,   57), S( -35,   34), S(-119,   28), 
    S(  -3,  -28), S(  65,  -11), S(  -1,   24), S( -17,   41), S( -11,   40), S(  -6,   25), S(  45,   -6), S( -19,  -10), 
    S(  82,  -52), S(  67,  -26), S(  52,  -11), S(  11,    5), S(  12,    9), S(  28,   -2), S(  80,  -30), S(  47,  -39), 
    S(  35,  -89), S(  74,  -59), S(  58,  -38), S( -28,  -24), S(  35,  -48), S( -15,  -19), S(  61,  -55), S(  46,  -95), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  11,  -22), S( -15,   -2), S( -25,   12), S( -37,    5), S( -33,    8), S( -16,  -15), 
    S( -47,   33), S( -31,  -42), S( -89,   21), S( -66,   -4), S( -40,  -37), S( -99,   57), S( -87,  -28), S( -98,  -73), 
    S(-117,   26), S( -94,  -27), S(-130,   81), S(-125,  -33), S(-152,  -59), S(-190,   54), S(-202,   15), S(-155,   27), 
    S(-179,  -28), S(-181, -174), S(-181, -174), S(-193, -121), S(-258,  -36), S(-220,  -51), S(-247,  -78), S(-296, -178), 
    S(-284, -203), S(-367, -278), S(-377, -244), S(-125,  -94), S(-383, -234), S(-319, -206), S(-376, -227), S(-248, -200), 
    S(-161, -188), S(-228, -235), S(-234, -214), S(-237, -146), S(-323, -224), S(-104,  -42), S(-353, -198), S(-128,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    3);
