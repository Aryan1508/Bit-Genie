
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

constexpr int PAWN_VALUE = S(  89,  140);

constexpr int PAWN_STACKED = S(  -2,  -15);

constexpr int PAWN_ISOLATED = S(  -7,  -12);

constexpr int SUPPORTED_PASSER = S(  13,    9);

constexpr int PASSER_TEMPO = S(  54,   37);

constexpr int PAWN_SUPPORT = S(  19,   17);

constexpr int PHALANX[8]
{
    S(   0,    0), S(   8,    2), S(  16,   14), S(  29,   28), S(  57,   86), S( 118,  150), S(  28,   74), S(   0,    0), 
};

constexpr int PAWN_PSQT[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( -84,   67), S( -71,   39), S( -97,   28), S( -72,  -38), S( -64,  -29), S( -86,    3), S(-104,   26), S(-121,   59), 
    S(  -6,   33), S(   7,   26), S(  37,    5), S(  41,   19), S(  55,   -7), S(  94,   -5), S(  72,   39), S(  30,   29), 
    S( -33,   19), S(  -9,   -4), S(  -2,   -8), S(   3,  -23), S(  30,  -23), S(  20,  -23), S(  15,  -11), S(  -3,   -7), 
    S( -44,   -3), S( -20,  -11), S(  -9,  -14), S(   3,  -17), S(  11,  -19), S(   8,  -21), S(   2,  -24), S( -19,  -23), 
    S( -48,   -8), S( -26,  -17), S( -17,  -11), S( -11,   -9), S(   4,   -7), S(  -8,   -8), S(  11,  -32), S( -19,  -29), 
    S( -41,   -2), S( -13,   -7), S( -13,   -1), S( -22,    6), S(  -8,   13), S(   7,    4), S(  25,  -17), S( -32,  -20), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 190,  270), S( 162,  305), S( 144,  327), S( 188,  314), S( 178,  292), S( 134,  282), S( 151,  345), S( 218,  292), 
    S(  -2,  235), S(  -4,  242), S( -21,  206), S( -11,  127), S( -15,  148), S( -49,  180), S( -63,  215), S( -54,  232), 
    S( -11,  124), S( -18,  119), S( -17,   82), S( -17,   60), S( -32,   56), S( -24,   85), S( -58,  124), S( -33,  121), 
    S( -37,   74), S( -44,   61), S( -45,   37), S( -38,   14), S( -49,   24), S( -40,   40), S( -61,   73), S( -36,   67), 
    S( -29,   11), S( -45,   17), S( -48,    2), S( -37,   -7), S( -42,   -5), S( -39,   -1), S( -50,   32), S( -13,    8), 
    S( -34,   11), S( -27,    3), S( -31,   -6), S( -34,   -9), S( -11,  -27), S(  -6,  -21), S( -17,   -6), S( -11,    4), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int BLOCKED_PASSER[64]
{
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    S( 126,  153), S( 173,  103), S( 221,   95), S( 218,  107), S( 181,   95), S( 191,   75), S( 136,   29), S(  70,   87), 
    S(  35,   91), S(  73,   70), S(  51,   40), S(  24,   13), S(  16,   32), S(  30,   29), S(   9,   -9), S( -47,   40), 
    S(  42,   55), S(  42,   53), S(  34,   28), S(  18,   32), S(  -4,   29), S(  20,   27), S(  15,   36), S(  -5,   33), 
    S(  32,   33), S(  26,   36), S( -13,   22), S(  -8,   20), S( -21,   30), S( -14,   31), S(   3,   53), S(  -7,   33), 
    S(  10,   12), S(  -3,   37), S( -21,   18), S( -24,   14), S( -26,   19), S(  -6,   16), S( -19,   50), S(  -7,   18), 
    S(   4,   -4), S(   2,   20), S( -22,   16), S( -10,   15), S(  -2,   -2), S( -12,    2), S(  14,    3), S(  -6,   15), 
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
};

constexpr int KNIGHT_VALUE = S( 367,  480);

constexpr int KNIGHT_MOBILITY[9]
{
    S(-140, -168), S( -37,  -58), S( -14,  -10), S(  -2,   20), S(  10,   31), S(  13,   46), S(  24,   48), S(  36,   50), 
    S(  47,   47), 
};

constexpr int KNIGHT_PSQT[64]
{
    S(-171,  -50), S(-178,    8), S(-108,   18), S( -84,   10), S( -42,    8), S( -89,  -28), S(-145,    0), S(-125,  -76), 
    S( -53,   13), S( -29,   16), S(  14,   -5), S(  36,   -6), S(  10,  -11), S(  66,  -29), S( -28,    8), S( -13,  -14), 
    S( -26,    4), S(  21,   -2), S(  45,    7), S(  53,    8), S(  84,   -7), S(  88,  -17), S(  35,  -10), S(  -6,   -5), 
    S( -23,   23), S(   1,   15), S(  39,   20), S(  70,   18), S(  47,   16), S(  62,   18), S(   8,   15), S(  12,   11), 
    S( -32,   23), S(  -9,    8), S(  21,   18), S(  31,   19), S(  36,   23), S(  36,    7), S(  22,    5), S( -15,   19), 
    S( -52,    0), S( -22,   -2), S(   4,  -12), S(  10,   12), S(  27,    8), S(   9,  -14), S(   5,   -8), S( -32,    3), 
    S( -61,    2), S( -51,    5), S( -24,   -9), S(  -5,   -8), S(  -7,   -9), S(  -4,  -11), S( -25,   -3), S( -34,   18), 
    S(-109,   17), S( -55,   -4), S( -65,   -2), S( -49,   -2), S( -43,    7), S( -35,   -8), S( -48,    2), S( -75,   13), 
};

constexpr int BISHOP_VALUE = S( 400,  455);

constexpr int BISHOP_MOBILITY[14]
{
    S( -80,  -70), S( -95,   -2), S( -69,   -6), S( -53,   32), S( -27,   38), S( -12,   48), S(  12,   62), S(  30,   66), 
    S(  47,   73), S(  60,   72), S(  76,   74), S(  87,   65), S(  95,   58), S( 122,   51), 
};

constexpr int BISHOP_PSQT[64]
{
    S( -27,   29), S( -69,   41), S( -62,   32), S(-105,   44), S( -92,   40), S( -71,   22), S( -42,   31), S( -59,   23), 
    S( -15,   16), S(  -4,   17), S( -12,   15), S( -34,   22), S(   0,    2), S( -17,   15), S( -17,   20), S( -22,   15), 
    S(  -3,   37), S(  11,   22), S(   9,   15), S(  21,    3), S(   6,   14), S(  45,   22), S(  20,   24), S(  24,   33), 
    S( -12,   29), S(  -2,   27), S(   5,   18), S(  20,   34), S(  17,   22), S(   5,   25), S(   4,   17), S( -15,   35), 
    S(  -3,   23), S( -14,   23), S( -10,   23), S(  12,   26), S(   8,   23), S(  -4,   14), S( -12,   21), S(  13,    2), 
    S(   1,   18), S(   5,   20), S(   2,   17), S(  -1,   17), S(   3,   22), S(   5,   16), S(  11,    8), S(  21,    5), 
    S(  18,   12), S(  13,    1), S(  16,   -9), S(  -3,    8), S(   4,   13), S(  15,    4), S(  37,    6), S(  19,   -9), 
    S(  11,    5), S(  24,    6), S(   8,   13), S(  -3,   17), S(   4,   15), S(   2,   26), S(  15,    0), S(  31,  -24), 
};

constexpr int ROOK_VALUE = S( 467,  850);

constexpr int OPEN_FILE = S(  20,    7);

constexpr int SEMI_OPEN_FILE = S(  21,    1);

constexpr int RR_FILE = S(  11,   -8);

constexpr int RR_RANK[8]
{
    S(   0,   -9), S(  -3,   -3), S(  -7,   -4), S(  -4,   -7), S(  -2,   -7), S(  -5,   -7), S(  21,   21), S(   5,    1), 
};

constexpr int ROOK_MOBILITY[15]
{
    S( -57,  -69), S( -28,  -58), S( -60,   31), S( -41,   53), S( -25,   58), S( -11,   63), S(   3,   62), S(   9,   65), 
    S(  24,   59), S(  38,   60), S(  51,   64), S(  64,   64), S(  75,   66), S(  82,   69), S(  95,   59), 
};

constexpr int ROOK_PSQT[64]
{
    S( -12,   44), S( -35,   57), S( -32,   63), S( -34,   57), S( -23,   50), S(  -8,   49), S(  -6,   48), S(  17,   36), 
    S( -31,   47), S( -37,   61), S( -24,   65), S(  -9,   50), S( -25,   51), S(   0,   40), S(   3,   34), S(  24,   25), 
    S( -41,   46), S( -10,   41), S( -21,   43), S( -23,   34), S(  11,   21), S(  13,   20), S(  65,    9), S(  29,    9), 
    S( -36,   46), S( -25,   40), S( -32,   47), S( -24,   36), S( -21,   20), S( -12,   20), S(   3,   21), S(   0,   15), 
    S( -42,   33), S( -50,   36), S( -41,   31), S( -37,   26), S( -32,   23), S( -39,   22), S( -11,   10), S( -21,    8), 
    S( -44,   20), S( -44,   18), S( -42,   15), S( -36,   14), S( -24,    8), S( -21,   -1), S(  14,  -23), S(  -7,  -19), 
    S( -41,    5), S( -39,   13), S( -31,   12), S( -30,    8), S( -22,    1), S( -11,   -7), S(   8,  -22), S( -27,  -14), 
    S( -17,   14), S( -23,   10), S( -24,   16), S( -18,    7), S(  -9,    0), S(  -7,    8), S(   1,   -4), S(  -9,  -10), 
};

constexpr int QUEEN_VALUE = S( 943, 1738);

constexpr int QUEEN_MOBILITY[28]
{
    S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -83,  -63), S(-151,  -91), S(-116,  -28), S( -98,  -47), S( -89,   15), 
    S( -75,   26), S( -67,   46), S( -53,   47), S( -40,   54), S( -27,   62), S( -15,   60), S(  -2,   63), S(   9,   68), 
    S(  19,   71), S(  31,   74), S(  40,   79), S(  51,   79), S(  62,   86), S(  75,   80), S(  87,   80), S( 107,   71), 
    S( 118,   64), S( 145,   55), S( 151,   70), S( 126,   99), 
};

constexpr int QUEEN_PSQT[64]
{
    S( -36,   55), S( -64,   87), S( -40,  106), S(   6,   71), S( -27,  107), S( -26,  109), S(  -4,   62), S( -31,   87), 
    S(  -3,   41), S( -32,   69), S( -32,  111), S( -51,  142), S( -51,  169), S( -10,  118), S( -19,   99), S(  30,   93), 
    S(   1,   39), S(  -8,   50), S( -14,   87), S(  -7,   96), S(  -2,  118), S(  35,  107), S(  43,   71), S(  44,   62), 
    S( -18,   60), S( -12,   60), S( -15,   70), S( -17,   95), S( -19,  111), S(  -6,   98), S(   3,   98), S(   5,   83), 
    S(  -7,   37), S( -20,   66), S( -15,   54), S( -10,   75), S( -10,   74), S(  -6,   64), S(   3,   58), S(   9,   55), 
    S(  -7,   15), S(  -1,   25), S(  -6,   43), S(  -4,   33), S(   0,   41), S(   3,   41), S(  17,   23), S(  11,   19), 
    S(   3,    3), S(   2,    7), S(  11,   -1), S(  15,    5), S(  12,   13), S(  23,  -21), S(  33,  -55), S(  42,  -78), 
    S(  -2,    6), S(  -2,    4), S(   5,    4), S(  12,   23), S(  11,    0), S(  -5,   -4), S(  15,  -29), S(   7,  -18), 
};

constexpr int PAWN_SHIELD[4]
{
    S( -42,   17), S(  -7,    6), S(  20,   -6), S(  37,  -36), 
};

constexpr int KING_PSQT[64]
{
    S( -75, -125), S(  84,  -83), S(  11,  -31), S( -47,   14), S(  -7,   -6), S( -11,   11), S(   6,    8), S(  -5, -127), 
    S( -24,  -13), S(  28,   28), S( -13,   46), S(  49,   35), S( -12,   67), S(  27,   73), S(  25,   66), S( -65,   38), 
    S(-116,   31), S(  32,   48), S( -15,   72), S( -69,   98), S( -17,  102), S(  61,   86), S(  54,   76), S( -39,   42), 
    S( -79,   15), S( -27,   46), S( -67,   81), S(-112,  101), S( -83,   99), S( -39,   90), S( -37,   71), S(-101,   42), 
    S( -68,   -2), S( -24,   22), S( -50,   57), S( -89,   81), S( -81,   78), S( -38,   56), S( -34,   34), S(-118,   28), 
    S(  -2,  -28), S(  66,  -11), S(  -1,   24), S( -17,   41), S( -11,   40), S(  -6,   25), S(  44,   -6), S( -17,   -9), 
    S(  81,  -52), S(  67,  -26), S(  51,  -10), S(  10,    6), S(  11,   10), S(  28,   -2), S(  80,  -30), S(  46,  -38), 
    S(  34,  -89), S(  74,  -58), S(  56,  -37), S( -28,  -23), S(  34,  -47), S( -15,  -18), S(  62,  -54), S(  47,  -94), 
};

constexpr int KING_SAFETY_TABLE[100]
{
    S(  13,   13), S(   0,    0), S(  11,  -23), S( -14,   -1), S( -25,   12), S( -38,    5), S( -32,    9), S( -16,  -14), 
    S( -48,   33), S( -34,  -30), S( -91,   26), S( -66,   -3), S( -40,  -36), S(-100,   58), S( -86,  -27), S( -99,  -72), 
    S(-117,   25), S( -93,  -27), S(-131,   85), S(-124,  -34), S(-151,  -57), S(-190,   54), S(-202,   15), S(-156,   29), 
    S(-180,  -24), S(-180, -172), S(-180, -170), S(-193, -119), S(-256,  -34), S(-223,  -45), S(-246,  -78), S(-296, -177), 
    S(-282, -203), S(-367, -278), S(-374, -242), S(-128,  -95), S(-384, -235), S(-319, -206), S(-376, -227), S(-248, -200), 
    S(-161, -188), S(-228, -235), S(-234, -214), S(-236, -145), S(-323, -224), S(-104,  -42), S(-352, -198), S(-127,  -36), 
    S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
};

constexpr int KING_ATTACK_WEIGHT[5]
{
    0, 2, 2, 3, 5
};

constexpr int CONTROL = S(  -5,    3);
