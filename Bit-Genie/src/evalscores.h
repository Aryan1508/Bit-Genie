
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S(  97,  158);

    constexpr int stacked = S(  -7,  -18);

    constexpr int isolated = S( -20,  -19);

    constexpr int passed_connected = S(  25,   15);

    constexpr int passed_tempo = S(  43,   50);

    constexpr int phalanx[8]
    {
        S(   0,    0), S(   2,  -11), S(   0,    3), S(  21,   18), S(  53,   71), S( 137,  273), S( 122,  438), S(   0,    0), 
    };

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -29,   79), S( -98,   63), S( -77,   26), S( -63,  -36), S( -50,  -19), S(-125,   36), S( -92,   40), S(-130,   77), 
        S( -13,   41), S(  -9,   18), S(  19,   15), S(  36,   20), S(  52,   26), S(  93,   -1), S(  61,   26), S(  31,   34), 
        S( -39,   30), S( -20,    8), S(  -2,    1), S(   2,  -13), S(  28,  -17), S(  13,  -10), S(   3,   -1), S(  -6,    2), 
        S( -46,    3), S( -30,   -7), S( -10,  -12), S(   8,   -7), S(  12,  -11), S(   3,  -13), S( -10,  -15), S( -16,  -19), 
        S( -43,    2), S( -25,   -6), S(  -7,   -6), S(  -1,   -8), S(  16,   -1), S(   3,   -2), S(  22,  -20), S(  -6,  -16), 
        S( -42,    7), S( -24,   -2), S( -15,    3), S(  -8,    0), S(   4,   15), S(  18,    2), S(  30,  -16), S( -15,  -18), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 295,  250), S( 113,  343), S( 153,  362), S( 185,  337), S( 201,  326), S(  80,  320), S( 157,  370), S( 192,  314), 
        S(  31,  252), S(  25,  264), S(  -1,  200), S(   2,  116), S( -20,  116), S( -72,  234), S( -26,  249), S( -37,  262), 
        S(   6,  139), S( -20,  137), S( -26,   78), S( -18,   56), S( -33,   58), S( -22,   85), S( -57,  149), S( -29,  147), 
        S( -23,   79), S( -32,   55), S( -46,   31), S( -44,    6), S( -57,   23), S( -62,   51), S( -74,   89), S( -20,   77), 
        S( -23,    6), S( -71,    7), S( -47,  -11), S( -55,  -12), S( -61,  -16), S( -72,   -9), S( -89,   28), S( -22,    9), 
        S( -20,    1), S( -31,   -7), S( -41,  -15), S( -32,  -21), S( -36,  -35), S( -37,  -20), S( -22,  -12), S(  -7,   -1), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  61,  196), S( 207,   90), S( 234,   62), S( 231,   95), S( 168,   71), S( 198,   74), S( 139,   17), S(  87,   86), 
        S(  47,  103), S( 109,   63), S(  90,   13), S(  27,    1), S(  13,  -14), S(  54,   12), S(  33,   -3), S( -39,   22), 
        S(  38,   68), S(  46,   54), S(  21,   35), S(  15,   28), S( -10,   27), S(  -3,   25), S(  24,   26), S(  -3,   40), 
        S(  35,   36), S(  18,   30), S( -14,   18), S( -20,   17), S( -26,   27), S( -26,   26), S(  -6,   41), S( -26,   41), 
        S(  15,  -15), S(   7,   22), S( -33,    7), S( -42,   11), S( -51,   20), S( -41,   25), S( -50,   46), S( -33,   25), 
        S(   9,  -17), S(   3,    7), S( -29,   21), S( -31,   24), S(  -4,   -7), S( -15,   -4), S(   9,  -14), S(  -1,    8), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 373,  522);

    constexpr int mobility[9]
    {
        S(-125, -114), S( -49,  -60), S( -11,   17), S(   3,   43), S(  20,   43), S(  24,   45), S(  34,   47), S(  44,   40), 
        S(  54,   33), 
    };

    constexpr int psqt[64]
    {
        S(-153,  -46), S(-178,    4), S( -83,   17), S(-131,   32), S( -45,   19), S(-106,  -68), S(-169,  -26), S(-120,  -63), 
        S( -50,    0), S( -45,   28), S( -11,   21), S(  41,   -6), S( -24,   -5), S(  67,  -20), S( -15,    5), S( -29,  -18), 
        S( -37,    3), S(  13,   13), S(   7,   35), S(  25,   30), S(  70,    1), S(  75,   11), S(  37,    6), S(   6,   -9), 
        S(  -8,   32), S(  -6,   31), S(  19,   37), S(  48,   34), S(  23,   28), S(  41,   39), S(   3,   26), S(  34,   -4), 
        S( -18,   16), S( -12,   25), S(  -4,   32), S(   4,   38), S(  13,   38), S(   9,   20), S(   7,   20), S(  -2,   11), 
        S( -47,   -3), S( -31,   13), S( -18,   -1), S( -16,   33), S(   4,   21), S( -13,   -1), S(  -1,    3), S( -27,   -4), 
        S( -39,   14), S( -37,    3), S( -35,    5), S(  -7,    1), S( -14,   -3), S( -17,   -6), S( -16,   10), S( -18,   33), 
        S( -71,   34), S( -28,   -7), S( -62,   12), S( -38,    8), S( -31,    2), S( -24,   -5), S( -23,   -4), S( -45,   10), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 398,  488);

    constexpr int mobility[14]
    {
        S( -79,  -70), S( -75,  -67), S( -33,   12), S( -14,   51), S(   2,   46), S(   9,   56), S(  25,   74), S(  36,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   35), S(  61,   38), 
    };

    constexpr int psqt[64]
    {
        S( -42,   50), S( -90,   77), S( -44,   49), S(-126,   66), S(-115,   65), S( -69,   41), S( -33,   27), S( -49,   31), 
        S( -23,   26), S( -23,   34), S( -23,   40), S( -37,   42), S( -14,   20), S( -34,   27), S( -23,   24), S( -13,    7), 
        S(  10,   46), S(  23,   41), S(  11,   34), S(  27,   15), S(  11,   14), S(  60,   33), S(  27,   41), S(  39,   32), 
        S( -11,   50), S(   0,   50), S(  12,   30), S(  24,   46), S(  36,   36), S(  10,   33), S(  11,   26), S( -21,   54), 
        S(   0,   48), S(  -8,   34), S(  -3,   36), S(  19,   43), S(  20,   31), S(   3,   24), S(  -4,   24), S(  17,   15), 
        S(  12,   13), S(  12,   39), S(   8,   35), S(   9,   29), S(   9,   37), S(  14,   27), S(  18,   18), S(  22,   28), 
        S(  24,   28), S(  18,   19), S(  20,    7), S(   1,   21), S(  11,   24), S(  20,    9), S(  41,   22), S(  27,  -11), 
        S(  23,   31), S(  31,    5), S(  14,   20), S(   0,   35), S(   6,   41), S(   0,   43), S(  17,    6), S(  43,   -7), 
    };
}

namespace RookEval
{
    constexpr int value = S( 486,  907);

    constexpr int open_file = S(  26,   15);

    constexpr int semi_open_file = S(  27,   -2);

    constexpr int mobility[15]
    {
        S( -58,  -70), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   6,   66), S( -45,   89), S(   5,   83), S( -29,   96), S( -19,   78), S(  14,   80), S( -10,   75), S(  41,   58), 
        S( -18,   75), S( -36,  102), S( -19,  108), S(   4,   87), S( -15,   90), S(   5,   83), S(   9,   82), S(  63,   46), 
        S( -33,   77), S(   0,   72), S( -18,   83), S( -21,   59), S(  26,   37), S(  36,   44), S( 108,   19), S(  54,   16), 
        S( -31,   73), S( -34,   79), S( -24,   74), S( -20,   58), S( -14,   41), S(  -3,   40), S(  19,   38), S(   3,   41), 
        S( -33,   57), S( -35,   52), S( -40,   54), S( -29,   53), S( -22,   46), S( -33,   50), S(  16,    9), S(  -3,   25), 
        S( -36,   45), S( -33,   36), S( -36,   47), S( -27,   40), S( -13,   24), S(  -5,   20), S(  24,   -3), S(  13,   -9), 
        S( -24,   25), S( -32,   34), S( -21,   33), S( -18,   29), S(  -7,   24), S(   1,   16), S(   9,    5), S(  -2,    3), 
        S( -10,   35), S( -13,   35), S( -15,   44), S(  -6,   29), S(   4,   24), S(   9,   27), S(  29,    9), S(  -2,   10), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1090, 1783);

    constexpr int mobility[28]
    {
        S( -63,  -49), S( -71,  -37), S( -67,  -50), S( -46,  -51), S( -28,  -47), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  36,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  61,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   6,   58), S( -46,  111), S( -11,  110), S(  61,   44), S( -42,  161), S(   9,  133), S(   1,  134), S( -27,  124), 
        S(  -1,   80), S( -34,  124), S( -37,  157), S( -37,  160), S( -35,  183), S( -24,  196), S( -44,  191), S(  27,  159), 
        S(  13,   69), S(  20,   54), S(  -7,  119), S(   8,  103), S(   0,  144), S(  39,  167), S(  45,  160), S(  76,   77), 
        S(  -6,  114), S(  12,   78), S( -17,  115), S(  -2,  109), S( -14,  136), S(   9,  106), S(  11,  138), S(  20,  118), 
        S(   8,   88), S(  -3,   94), S(   6,   62), S(   6,   91), S(  14,   69), S(   8,   75), S(  19,   95), S(  38,   73), 
        S(   4,   69), S(  20,   41), S(   9,   76), S(  13,   52), S(  20,   53), S(  15,   76), S(  40,   48), S(  39,   24), 
        S(  16,   73), S(  23,   33), S(  28,   34), S(  34,   33), S(  32,   31), S(  39,   12), S(  53,  -37), S(  87,  -86), 
        S(  27,   30), S(  25,   30), S(  27,   38), S(  31,   48), S(  32,   26), S(  20,   26), S(  56,   13), S(  39,   35), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-148, -257), S( 118, -108), S(   4,  -39), S( -54,    6), S(  18,   17), S( -25,   18), S( -27,  -35), S( -36, -175), 
        S(  -5,   16), S(  32,   52), S(  16,   88), S(  30,   67), S( -47,  109), S( -15,   84), S( -15,  100), S(-131,   45), 
        S(-155,   50), S(   7,   82), S(   0,   94), S(-105,  119), S( -79,  112), S(  -7,  101), S(   8,   83), S(-106,   54), 
        S(-130,   33), S( -48,   63), S(-109,   96), S(-170,  122), S( -92,  106), S( -65,   97), S(-114,   81), S(-145,   46), 
        S(-104,   24), S( -92,   43), S( -35,   62), S( -85,   79), S( -71,   71), S( -95,   58), S( -88,   37), S(-176,   32), 
        S( -29,   -8), S(  13,    0), S( -13,   24), S( -29,   39), S( -37,   40), S( -23,   15), S(  17,  -13), S( -32,   -4), 
        S(  83,  -39), S(  60,  -31), S(  38,  -12), S(   2,   -2), S(  -6,    2), S(  24,  -15), S(  69,  -45), S(  66,  -51), 
        S(  61,  -71), S( 114,  -71), S(  83,  -45), S( -34,  -14), S(  36,  -52), S(  -7,  -19), S(  86,  -71), S(  83,  -99), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  20,  -29), S( -53,   19), S( -29,   15), S( -40,   11), S( -46,   13), S( -13,  -19), 
        S( -29,   17), S( -32,  -25), S( -94,   96), S( -91,   59), S( -78,  101), S(-122,  110), S(-115,   18), S(-170,   16), 
        S(-179,   21), S(-175,   17), S(-191,    9), S(-209,  -48), S(-268, -124), S(-266,   35), S(-291,  -72), S(-282, -123), 
        S(-213, -230), S(-374, -406), S(-250, -398), S(-245, -246), S(-302,  -38), S(-271,  -93), S(-260,  -75), S(-306, -188), 
        S(-362, -237), S(-423, -300), S(-431, -276), S(-170, -105), S(-406, -252), S(-364, -222), S(-411, -240), S(-258, -208), 
        S(-164, -189), S(-204, -225), S(-234, -214), S(-234, -144), S(-323, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    5);
}
