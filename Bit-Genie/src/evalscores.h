
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S(  98,  151);

    constexpr int stacked = S(  -3,  -16);

    constexpr int isolated = S( -18,  -15);

    constexpr int passed_connected = S(  17,    5);

    constexpr int passed_tempo = S(  43,   48);

    constexpr int support = S(  12,   12);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -25,   70), S( -90,   55), S( -68,   18), S( -52,  -41), S( -37,  -24), S(-105,   24), S( -73,   26), S(-119,   65), 
        S( -18,   41), S( -15,   16), S(  17,   13), S(  36,   13), S(  49,   21), S(  88,   -3), S(  53,   22), S(  23,   37), 
        S( -38,   26), S( -18,    3), S(  -2,   -5), S(  -1,  -16), S(  27,  -22), S(  17,  -16), S(   6,   -9), S(  -5,   -3), 
        S( -45,    3), S( -28,  -10), S(  -6,  -17), S(   8,  -14), S(  15,  -17), S(   8,  -21), S(  -5,  -20), S( -18,  -21), 
        S( -51,   -2), S( -36,  -15), S( -15,  -13), S(  -9,  -14), S(   7,   -9), S(  -5,  -12), S(  11,  -32), S( -14,  -23), 
        S( -45,    2), S( -25,  -12), S( -18,   -7), S( -24,   -6), S(  -6,    4), S(   1,   -5), S(  20,  -27), S( -30,  -22), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 296,  243), S( 140,  325), S( 181,  342), S( 215,  319), S( 225,  312), S( 138,  291), S( 210,  343), S( 229,  294), 
        S(  52,  237), S(  54,  252), S(  11,  195), S(   8,  122), S( -10,  119), S( -31,  216), S(  47,  229), S(  -9,  239), 
        S(  10,  137), S( -10,  137), S( -19,   82), S(  -9,   60), S( -25,   63), S( -18,   92), S( -41,  152), S( -27,  149), 
        S( -19,   75), S( -25,   55), S( -42,   33), S( -41,   10), S( -53,   27), S( -60,   54), S( -63,   89), S( -16,   78), 
        S( -16,    7), S( -58,   11), S( -39,   -7), S( -48,  -11), S( -52,  -13), S( -63,   -4), S( -72,   34), S( -14,   13), 
        S( -18,    1), S( -27,   -4), S( -36,  -13), S( -27,  -22), S( -28,  -31), S( -32,  -17), S( -18,   -4), S(  -3,    1), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  64,  182), S( 183,   97), S( 212,   72), S( 213,   96), S( 156,   70), S( 169,   89), S( 112,   31), S(  59,   90), 
        S(  58,   91), S( 123,   55), S(  99,    5), S(  32,    4), S(  19,  -12), S(  60,   13), S(  38,    4), S( -44,   16), 
        S(  43,   63), S(  54,   54), S(  29,   35), S(  24,   29), S(  -4,   29), S(   0,   31), S(  26,   34), S(  -4,   41), 
        S(  41,   32), S(  26,   27), S( -10,   19), S( -16,   20), S( -23,   29), S( -27,   30), S(  -1,   39), S( -20,   37), 
        S(  22,  -12), S(  21,   25), S( -26,   11), S( -33,   11), S( -41,   21), S( -36,   29), S( -34,   47), S( -26,   26), 
        S(  14,  -14), S(   5,   11), S( -25,   23), S( -27,   26), S(  -3,   -2), S( -13,   -1), S(   8,  -12), S(   5,    7), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 393,  480);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-160,  -33), S( -95,  -21), S( -60,    8), S( -94,   10), S( -27,    7), S( -94,  -73), S( -80,  -48), S(-113,  -52), 
        S( -48,    0), S( -40,   23), S(  -6,   13), S(  49,  -14), S( -22,  -11), S(  76,  -31), S( -12,    2), S( -26,  -19), 
        S( -34,    0), S(  21,    5), S(  18,   21), S(  34,   15), S(  82,  -15), S(  84,   -6), S(  43,   -4), S(   6,  -10), 
        S(  -2,   26), S(   2,   21), S(  29,   24), S(  60,   19), S(  34,   15), S(  53,   24), S(  10,   17), S(  38,  -11), 
        S( -13,   11), S(  -5,   17), S(   7,   18), S(  14,   27), S(  23,   25), S(  20,    5), S(  16,   11), S(   4,    7), 
        S( -43,   -6), S( -24,    5), S(  -9,  -12), S(  -7,   20), S(  12,    9), S(  -5,  -10), S(   7,   -6), S( -23,   -6), 
        S( -35,   16), S( -32,   -1), S( -28,   -3), S(   0,   -8), S(  -7,  -13), S(  -7,  -17), S(  -7,    6), S( -10,   33), 
        S( -63,   30), S( -27,   -3), S( -58,    9), S( -33,    3), S( -25,   -1), S( -20,   -8), S( -22,    1), S( -42,   14), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 429,  451);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -45,   39), S( -76,   55), S( -42,   34), S( -99,   40), S( -94,   42), S( -68,   23), S( -24,   11), S( -48,   17), 
        S( -27,   14), S( -23,   16), S( -25,   23), S( -42,   25), S( -15,    3), S( -33,   10), S( -26,   10), S( -22,   -3), 
        S(   4,   34), S(  19,   24), S(  11,   13), S(  27,   -7), S(  14,   -6), S(  62,   11), S(  25,   24), S(  34,   19), 
        S( -17,   38), S(  -2,   31), S(  12,    9), S(  26,   22), S(  37,   12), S(   8,   13), S(  10,    8), S( -26,   39), 
        S(  -4,   34), S( -11,   17), S(  -4,   16), S(  20,   21), S(  20,    9), S(   3,    4), S(  -7,    7), S(  12,    6), 
        S(   6,    1), S(   9,   24), S(   5,   18), S(   7,   11), S(   7,   20), S(  11,   10), S(  16,    4), S(  16,   15), 
        S(  17,   20), S(  14,    5), S(  17,   -9), S(  -3,    7), S(   7,   10), S(  16,   -6), S(  40,    7), S(  22,  -18), 
        S(  19,   21), S(  24,   -4), S(   8,   13), S(  -6,   22), S(   3,   29), S(  -5,   34), S(  11,   -3), S(  38,  -14), 
    };
}

namespace RookEval
{
    constexpr int value = S( 535,  854);

    constexpr int open_file = S(  28,   10);

    constexpr int semi_open_file = S(  26,   -2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   0,   36), S( -52,   59), S(   2,   51), S( -32,   63), S( -25,   48), S(   8,   51), S(  -4,   41), S(  39,   26), 
        S( -24,   46), S( -40,   72), S( -21,   78), S(   3,   57), S( -17,   60), S(   3,   52), S(  10,   49), S(  57,   17), 
        S( -40,   49), S(  -8,   45), S( -22,   53), S( -23,   30), S(  22,    8), S(  31,   14), S( 102,   -9), S(  45,  -10), 
        S( -38,   47), S( -40,   52), S( -28,   45), S( -23,   30), S( -18,   13), S(  -7,   12), S(  13,   12), S(  -5,   16), 
        S( -40,   33), S( -44,   26), S( -43,   27), S( -33,   25), S( -28,   20), S( -36,   21), S(  10,  -16), S(  -9,    0), 
        S( -42,   19), S( -39,   11), S( -40,   21), S( -32,   14), S( -16,   -1), S( -10,   -7), S(  19,  -30), S(   4,  -32), 
        S( -30,   -1), S( -38,    9), S( -27,    7), S( -24,    4), S( -12,   -1), S(  -1,  -14), S(   9,  -24), S(  -9,  -22), 
        S( -17,   10), S( -19,    9), S( -21,   18), S( -12,    4), S(  -2,   -1), S(   1,    3), S(  22,  -19), S(  -6,  -14), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1256, 1592);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(  10,   16), S( -23,   45), S(  -2,   57), S(  53,   15), S( -10,   89), S(  41,   63), S(  27,   65), S( -11,   60), 
        S(  -3,   48), S( -32,   89), S( -35,  118), S( -31,  116), S( -28,  136), S( -12,  144), S( -32,  135), S(  36,  110), 
        S(  12,   36), S(  18,   23), S(  -3,   79), S(  14,   62), S(   9,  101), S(  49,  117), S(  52,  107), S(  79,   32), 
        S(  -6,   79), S(  14,   40), S( -14,   77), S(   5,   66), S(  -8,   93), S(  13,   63), S(  12,  102), S(  24,   76), 
        S(   8,   54), S(  -2,   58), S(  10,   26), S(  10,   50), S(  17,   29), S(  11,   37), S(  20,   57), S(  38,   36), 
        S(   5,   31), S(  22,    5), S(  11,   38), S(  16,   15), S(  22,   16), S(  18,   39), S(  42,   11), S(  38,  -10), 
        S(  15,   34), S(  24,   -2), S(  29,   -3), S(  33,   -1), S(  32,   -5), S(  40,  -26), S(  54,  -66), S(  72,  -71), 
        S(  27,  -11), S(  24,   -9), S(  25,    4), S(  29,   15), S(  31,  -10), S(  21,  -15), S(  46,  -10), S(  34,    3), 
    };
}

namespace KingEval
{
    constexpr int pawn_shield[4]
    {
        S( -42,    7), S( -10,    3), S(  19,   -1), S(  37,  -21), 
    };

    constexpr int psqt[64]
    {
        S(-115, -159), S(   4,  -70), S( -10,  -30), S( -25,    2), S(  -9,   25), S(   3,    9), S(  -8,  -25), S( -28,  -83), 
        S(   5,   18), S(  43,   47), S(  35,   76), S(  47,   59), S(  17,   89), S(  34,   69), S(  28,   88), S( -36,   31), 
        S( -49,   34), S(  31,   71), S(  31,   83), S( -42,  103), S( -17,   95), S(  35,   87), S(  36,   74), S( -44,   46), 
        S( -68,   25), S( -20,   54), S( -58,   84), S( -80,  105), S( -48,   96), S( -41,   90), S( -72,   70), S(-102,   41), 
        S( -80,   22), S( -74,   38), S( -24,   59), S( -75,   76), S( -66,   69), S( -86,   54), S( -82,   34), S(-146,   29), 
        S( -27,   -3), S(  14,   -1), S( -13,   22), S( -32,   37), S( -39,   38), S( -20,   13), S(  12,  -12), S( -29,    2), 
        S(  81,  -35), S(  57,  -32), S(  40,  -15), S(   3,   -4), S(  -2,    0), S(  22,  -15), S(  69,  -47), S(  61,  -45), 
        S(  54,  -64), S(  92,  -67), S(  74,  -42), S( -29,   -6), S(  46,  -48), S( -11,  -13), S(  74,  -65), S(  78,  -91), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  23,  -31), S( -47,   15), S( -30,   16), S( -41,   12), S( -45,   14), S( -15,  -18), 
        S( -26,   11), S( -35,  -15), S( -77,   54), S( -79,   34), S( -63,   61), S( -97,   52), S(-102,  -12), S(-136,  -11), 
        S(-148,  -12), S(-147,  -13), S(-158,  -25), S(-184,  -68), S(-237, -116), S(-225,  -37), S(-248,  -96), S(-248, -172), 
        S(-208, -197), S(-324, -249), S(-288, -295), S(-235, -201), S(-266, -127), S(-232, -157), S(-176,  -60), S(-256, -164), 
        S(-243, -184), S(-367, -269), S(-353, -291), S(  26,  -42), S(-346, -183), S(-247, -180), S(-295, -206), S(-220, -192), 
        S(-183, -201), S(-210, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    5);
}
