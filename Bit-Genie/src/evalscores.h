
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S(  97,  153);

    constexpr int stacked = S(  -3,  -16);

    constexpr int isolated = S( -18,  -16);

    constexpr int passed_connected = S(  17,    4);

    constexpr int passed_tempo = S(  44,   48);

    constexpr int support = S(  12,   11);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -23,   71), S( -88,   57), S( -68,   20), S( -52,  -39), S( -36,  -23), S(-110,   27), S( -77,   30), S(-124,   69), 
        S( -14,   39), S( -11,   14), S(  20,   11), S(  38,   15), S(  52,   23), S(  92,   -5), S(  56,   21), S(  25,   35), 
        S( -36,   26), S( -16,    3), S(  -1,   -4), S(   0,  -15), S(  29,  -21), S(  18,  -14), S(   6,   -7), S(  -6,   -2), 
        S( -44,    2), S( -26,  -11), S(  -5,  -16), S(   9,  -13), S(  16,  -16), S(   8,  -19), S(  -5,  -19), S( -18,  -21), 
        S( -50,   -2), S( -34,  -14), S( -15,  -12), S(  -8,  -13), S(   8,   -8), S(  -6,   -9), S(  12,  -31), S( -14,  -23), 
        S( -43,    1), S( -23,  -12), S( -17,   -6), S( -25,   -1), S(  -7,    7), S(  -2,    1), S(  19,  -24), S( -33,  -19), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 299,  241), S( 127,  332), S( 169,  349), S( 206,  324), S( 216,  316), S( 113,  303), S( 194,  352), S( 219,  298), 
        S(  42,  245), S(  45,  261), S(   7,  201), S(   7,  121), S( -12,  119), S( -52,  230), S(  25,  240), S( -32,  255), 
        S(   8,  140), S( -12,  140), S( -20,   83), S(  -9,   61), S( -26,   64), S( -18,   92), S( -43,  154), S( -28,  152), 
        S( -19,   77), S( -27,   57), S( -43,   34), S( -41,   11), S( -54,   27), S( -59,   55), S( -61,   89), S( -16,   79), 
        S( -17,    9), S( -60,   13), S( -40,   -6), S( -49,  -10), S( -52,  -12), S( -63,   -3), S( -70,   34), S( -15,   16), 
        S( -18,    2), S( -28,   -2), S( -36,  -13), S( -26,  -22), S( -27,  -31), S( -28,  -20), S( -14,   -7), S(  -1,    1), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  63,  188), S( 196,   91), S( 224,   66), S( 221,   94), S( 165,   67), S( 184,   81), S( 121,   26), S(  64,   90), 
        S(  55,   97), S( 121,   61), S(  97,   10), S(  31,    5), S(  18,  -12), S(  59,   17), S(  38,    9), S( -49,   24), 
        S(  41,   66), S(  52,   57), S(  28,   37), S(  23,   31), S(  -4,   31), S(  -1,   33), S(  28,   36), S(  -4,   45), 
        S(  41,   34), S(  24,   30), S( -12,   20), S( -17,   22), S( -23,   30), S( -28,   33), S(   0,   42), S( -20,   40), 
        S(  21,  -10), S(  20,   28), S( -27,   13), S( -35,   13), S( -42,   24), S( -38,   32), S( -35,   52), S( -26,   30), 
        S(  13,  -14), S(   3,   13), S( -26,   24), S( -27,   27), S(  -3,    0), S( -12,   -1), S(   9,   -9), S(   7,    7), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 393,  490);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-171,  -32), S(-115,  -16), S( -72,   12), S(-111,   18), S( -34,    9), S(-101,  -72), S( -93,  -46), S(-122,  -54), 
        S( -49,   -1), S( -40,   24), S(  -6,   16), S(  50,  -13), S( -24,   -7), S(  76,  -29), S( -14,    4), S( -26,  -20), 
        S( -33,    0), S(  22,    6), S(  18,   25), S(  34,   20), S(  82,  -11), S(  84,   -1), S(  43,   -1), S(   4,   -7), 
        S(  -1,   26), S(   2,   24), S(  29,   27), S(  60,   23), S(  34,   18), S(  53,   28), S(  10,   20), S(  38,   -9), 
        S( -13,   11), S(  -5,   19), S(   7,   22), S(  14,   30), S(  23,   28), S(  20,    9), S(  17,   12), S(   4,    7), 
        S( -43,   -7), S( -24,    6), S(  -9,   -9), S(  -7,   23), S(  12,   12), S(  -5,   -7), S(   7,   -4), S( -22,   -7), 
        S( -34,   14), S( -32,   -1), S( -27,   -1), S(  -1,   -6), S(  -7,  -10), S(  -7,  -15), S(  -6,    4), S(  -8,   28), 
        S( -67,   36), S( -27,   -7), S( -58,    8), S( -34,    4), S( -24,   -3), S( -20,   -8), S( -23,   -1), S( -43,   15), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 429,  461);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -48,   41), S( -87,   61), S( -46,   37), S(-115,   49), S(-109,   49), S( -74,   29), S( -28,   15), S( -53,   20), 
        S( -26,   15), S( -22,   19), S( -24,   26), S( -43,   29), S( -14,    5), S( -31,   13), S( -25,   13), S( -24,    0), 
        S(   4,   36), S(  20,   27), S(  11,   17), S(  28,   -2), S(  17,   -4), S(  61,   16), S(  26,   27), S(  33,   23), 
        S( -17,   40), S(  -2,   35), S(  12,   14), S(  26,   27), S(  37,   18), S(   8,   18), S(  11,   12), S( -25,   41), 
        S(  -3,   36), S( -11,   21), S(  -3,   21), S(  20,   27), S(  20,   15), S(   4,    8), S(  -6,   11), S(  13,    8), 
        S(   7,    2), S(  10,   26), S(   6,   22), S(   7,   15), S(   8,   24), S(  12,   13), S(  17,    6), S(  17,   16), 
        S(  18,   19), S(  15,    6), S(  18,   -6), S(  -3,   10), S(   7,   13), S(  16,   -3), S(  42,    7), S(  23,  -18), 
        S(  21,   20), S(  25,   -3), S(   8,   11), S(  -6,   24), S(   4,   30), S(  -4,   34), S(   8,    1), S(  40,  -16), 
    };
}

namespace RookEval
{
    constexpr int value = S( 535,  868);

    constexpr int open_file = S(  28,   12);

    constexpr int semi_open_file = S(  26,   -1);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  -1,   44), S( -53,   67), S(   2,   58), S( -32,   70), S( -24,   55), S(   6,   58), S(  -5,   48), S(  37,   33), 
        S( -23,   52), S( -40,   78), S( -20,   83), S(   4,   62), S( -17,   66), S(   4,   57), S(   9,   55), S(  56,   23), 
        S( -39,   55), S(  -7,   51), S( -21,   59), S( -22,   35), S(  23,   13), S(  31,   20), S( 102,   -2), S(  43,   -3), 
        S( -38,   52), S( -40,   57), S( -27,   50), S( -21,   35), S( -17,   18), S(  -6,   18), S(  13,   17), S(  -5,   21), 
        S( -39,   37), S( -43,   31), S( -42,   32), S( -32,   30), S( -27,   25), S( -36,   26), S(  10,  -11), S(  -9,    4), 
        S( -41,   24), S( -38,   16), S( -40,   26), S( -31,   19), S( -15,    3), S( -10,   -2), S(  20,  -25), S(   4,  -27), 
        S( -30,    4), S( -38,   14), S( -27,   12), S( -23,    8), S( -12,    4), S(  -1,   -8), S(  10,  -20), S( -10,  -17), 
        S( -16,   15), S( -19,   14), S( -20,   23), S( -11,    8), S(  -2,    3), S(   2,    7), S(  22,  -12), S(  -5,  -12), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1249, 1638);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   7,   22), S( -30,   61), S(  -9,   72), S(  56,   20), S( -22,  110), S(  37,   76), S(  20,   79), S( -16,   74), 
        S(  -2,   52), S( -31,   93), S( -35,  125), S( -34,  128), S( -31,  150), S( -12,  155), S( -32,  147), S(  35,  120), 
        S(  12,   43), S(  18,   30), S(  -2,   86), S(  14,   69), S(  10,  108), S(  48,  128), S(  51,  118), S(  77,   42), 
        S(  -7,   86), S(  15,   45), S( -14,   84), S(   5,   74), S(  -9,  103), S(  13,   72), S(  13,  109), S(  24,   83), 
        S(   8,   59), S(  -2,   64), S(  10,   32), S(  10,   57), S(  17,   38), S(  11,   44), S(  21,   62), S(  38,   42), 
        S(   5,   38), S(  23,   10), S(  12,   44), S(  17,   21), S(  23,   22), S(  18,   45), S(  43,   16), S(  38,   -3), 
        S(  15,   42), S(  25,    3), S(  30,    2), S(  33,    5), S(  33,    2), S(  40,  -19), S(  54,  -62), S(  75,  -79), 
        S(  27,   -5), S(  23,   -2), S(  24,   12), S(  29,   20), S(  31,   -4), S(  21,   -9), S(  46,   -9), S(  33,    8), 
    };
}

namespace KingEval
{
    constexpr int pawn_shield[4]
    {
        S( -48,   17), S( -11,    3), S(  21,   -6), S(  44,  -34), 
    };

    constexpr int psqt[64]
    {
        S(-122, -185), S(  20,  -81), S(  -7,  -34), S( -28,    5), S(  -4,   25), S(   0,    7), S( -11,  -31), S( -31, -106), 
        S(   6,   14), S(  45,   46), S(  34,   76), S(  47,   57), S(   6,   90), S(  28,   68), S(  22,   87), S( -51,   29), 
        S( -69,   34), S(  30,   71), S(  28,   82), S( -59,  105), S( -30,   96), S(  26,   88), S(  32,   73), S( -59,   44), 
        S( -83,   24), S( -24,   54), S( -75,   85), S(-113,  109), S( -63,   97), S( -46,   90), S( -84,   71), S(-118,   40), 
        S( -85,   20), S( -73,   36), S( -14,   55), S( -68,   72), S( -53,   64), S( -76,   50), S( -73,   30), S(-155,   28), 
        S( -16,   -9), S(  34,   -7), S(   7,   17), S(  -8,   31), S( -15,   32), S(   0,    7), S(  36,  -19), S( -12,   -7), 
        S(  81,  -34), S(  56,  -29), S(  40,  -13), S(   3,   -3), S(   0,    0), S(  21,  -12), S(  69,  -44), S(  60,  -43), 
        S(  54,  -66), S(  87,  -58), S(  73,  -40), S( -26,  -14), S(  49,  -56), S( -11,  -14), S(  72,  -61), S(  77,  -92), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  20,  -28), S( -48,   16), S( -31,   16), S( -43,   13), S( -47,   14), S( -18,  -15), 
        S( -28,   11), S( -36,  -17), S( -82,   65), S( -83,   43), S( -68,   73), S(-104,   67), S(-106,   -3), S(-143,   -2), 
        S(-155,   -3), S(-153,   -5), S(-165,  -17), S(-189,  -65), S(-243, -117), S(-233,  -22), S(-256,  -91), S(-254, -165), 
        S(-206, -208), S(-338, -279), S(-279, -315), S(-244, -212), S(-271, -115), S(-238, -147), S(-202,  -68), S(-275, -173), 
        S(-267, -195), S(-376, -274), S(-371, -293), S(  -4,  -53), S(-354, -192), S(-265, -187), S(-310, -210), S(-224, -193), 
        S(-180, -199), S(-209, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    5);
}
