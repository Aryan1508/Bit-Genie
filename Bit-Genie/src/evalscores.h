
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 109,  147);

    constexpr int stacked = S(  -5,  -16);

    constexpr int isolated = S( -23,  -15);

    constexpr int passed_connected = S(  20,   13);

    constexpr int passed_tempo = S(  28,   37);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -19,   41), S( -63,   20), S( -59,   -6), S( -47,  -58), S( -40,  -37), S( -73,   -3), S( -60,    2), S( -94,   35), 
        S( -26,   34), S( -22,   13), S(   6,    4), S(  18,  -13), S(  29,   -7), S(  79,   -6), S(  50,   15), S(  16,   28), 
        S( -42,   21), S( -25,    3), S(  -4,   -5), S(  -3,  -16), S(  23,  -21), S(  12,  -13), S(  -1,   -6), S( -11,   -3), 
        S( -49,   -1), S( -34,  -10), S( -10,  -17), S(   8,  -13), S(  11,  -16), S(   2,  -18), S( -15,  -17), S( -23,  -21), 
        S( -51,   -4), S( -34,  -10), S( -13,  -12), S(  -8,  -13), S(  10,   -8), S(  -4,   -9), S(  12,  -23), S( -15,  -19), 
        S( -50,   -3), S( -33,  -14), S( -21,   -9), S( -14,  -11), S(  -2,    0), S(  12,  -10), S(  21,  -28), S( -24,  -25), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 277,  230), S( 195,  278), S( 223,  296), S( 244,  284), S( 242,  280), S( 204,  252), S( 249,  300), S( 259,  262), 
        S( 104,  190), S( 101,  202), S(  58,  162), S(  45,  123), S(  37,  119), S(  53,  168), S( 109,  185), S(  90,  184), 
        S(  30,  112), S(   8,  109), S( -12,   67), S(  -5,   53), S( -19,   54), S(  -5,   72), S(  10,  113), S(  14,  115), 
        S(  -7,   62), S( -15,   41), S( -37,   25), S( -36,    5), S( -47,   18), S( -40,   36), S( -26,   62), S(   0,   62), 
        S( -10,    3), S( -51,   -2), S( -37,  -10), S( -45,  -14), S( -51,  -18), S( -52,  -13), S( -57,   14), S(   0,    4), 
        S(  -8,    0), S( -22,   -5), S( -33,  -12), S( -24,  -12), S( -26,  -24), S( -28,  -15), S( -11,   -6), S(  12,   -2), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  87,  160), S( 143,  111), S( 171,  101), S( 186,  116), S( 134,   88), S( 125,  100), S(  85,   55), S(  53,   92), 
        S(  69,   75), S( 106,   57), S( 101,   15), S(  45,   26), S(  33,   15), S(  60,   16), S(  39,    7), S( -24,   13), 
        S(  47,   50), S(  55,   39), S(  26,   27), S(  22,   21), S(  -3,   22), S(   2,   19), S(  26,   26), S(   6,   30), 
        S(  39,   26), S(  24,   20), S( -12,   11), S( -18,   12), S( -21,   20), S( -21,   18), S(   6,   24), S( -15,   25), 
        S(  19,  -15), S(  17,   13), S( -30,    5), S( -39,    7), S( -45,   12), S( -28,   14), S( -32,   28), S( -23,   16), 
        S(  12,  -14), S(   5,    8), S( -28,   17), S( -29,   21), S(  -7,    1), S( -12,   -2), S(  15,  -12), S(   7,    3), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 398,  431);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-136,  -57), S( -60,  -36), S( -31,  -11), S( -52,   -9), S( -17,   -5), S( -76,  -74), S( -59,  -54), S(-102,  -70), 
        S( -42,   -9), S( -36,   14), S(   0,    6), S(  42,  -10), S( -17,  -16), S(  75,  -29), S(  -4,   -6), S( -21,  -24), 
        S( -31,   -8), S(  22,   -1), S(  16,   20), S(  34,   12), S(  83,  -15), S(  86,   -7), S(  47,   -9), S(  14,  -18), 
        S(   2,   16), S(   2,   15), S(  27,   19), S(  57,   16), S(  29,   13), S(  50,   21), S(  10,   11), S(  42,  -16), 
        S( -11,    4), S(  -5,   11), S(   4,   16), S(  12,   22), S(  22,   20), S(  17,    5), S(  13,    7), S(   5,    0), 
        S( -42,  -14), S( -25,    0), S( -12,  -12), S(  -7,   17), S(  12,    6), S(  -8,  -12), S(   6,  -10), S( -22,  -14), 
        S( -33,    3), S( -30,   -9), S( -29,   -7), S(  -1,  -12), S(  -8,  -14), S( -10,  -18), S( -10,    0), S( -13,   21), 
        S( -47,   -5), S( -25,  -17), S( -55,   -2), S( -31,   -6), S( -25,  -10), S( -19,  -15), S( -20,  -13), S( -38,   -3), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 435,  406);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -40,   23), S( -39,   27), S( -26,   18), S( -52,    9), S( -48,   16), S( -45,    9), S( -13,   -6), S( -40,   -2), 
        S( -28,    9), S( -25,   11), S( -26,   17), S( -30,   11), S( -17,   -3), S( -35,    1), S( -27,    2), S( -21,   -8), 
        S(   5,   23), S(  20,   14), S(   8,    9), S(  24,   -7), S(   7,   -8), S(  59,    5), S(  27,   10), S(  34,    9), 
        S( -15,   26), S(  -4,   24), S(   9,    6), S(  22,   18), S(  33,   10), S(   7,    7), S(   5,    5), S( -26,   29), 
        S(  -5,   23), S( -14,   12), S( -10,   12), S(  17,   17), S(  17,    7), S(  -3,    2), S( -10,    3), S(  12,   -4), 
        S(   5,   -6), S(   6,   17), S(   3,   13), S(   3,    7), S(   3,   15), S(   8,    5), S(  13,   -3), S(  16,    7), 
        S(  18,   10), S(  11,   -1), S(  15,  -13), S(  -5,    0), S(   5,    1), S(  14,  -11), S(  34,    3), S(  22,  -27), 
        S(  18,   10), S(  25,  -13), S(   6,    0), S(  -6,   12), S(   2,   18), S(  -7,   21), S(  11,   -5), S(  34,  -15), 
    };
}

namespace RookEval
{
    constexpr int value = S( 545,  777);

    constexpr int open_file = S(  27,   12);

    constexpr int semi_open_file = S(  27,   -1);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   4,   17), S( -25,   28), S(  19,   26), S( -13,   35), S( -15,   25), S(  16,   30), S(   4,   20), S(  46,    6), 
        S( -22,   26), S( -39,   47), S( -19,   53), S(   4,   34), S( -17,   37), S(   4,   30), S(  11,   28), S(  61,    0), 
        S( -37,   28), S(  -5,   23), S( -22,   32), S( -25,   13), S(  22,   -8), S(  31,   -2), S(  88,  -14), S(  48,  -24), 
        S( -37,   25), S( -40,   29), S( -30,   26), S( -24,   12), S( -20,   -3), S( -10,   -3), S(  11,   -3), S(  -5,   -1), 
        S( -40,   12), S( -42,    8), S( -45,    9), S( -35,    9), S( -29,    2), S( -42,    8), S(   6,  -29), S( -12,  -16), 
        S( -44,    2), S( -40,   -5), S( -43,    3), S( -35,   -3), S( -21,  -16), S( -14,  -20), S(  15,  -41), S(   2,  -43), 
        S( -33,  -17), S( -40,   -9), S( -29,   -9), S( -26,  -13), S( -15,  -17), S(  -7,  -25), S(   1,  -35), S( -13,  -34), 
        S( -21,   -6), S( -22,   -8), S( -24,    1), S( -15,  -12), S(  -6,  -17), S(  -2,  -14), S(  18,  -30), S( -16,  -26), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1254, 1470);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   7,   10), S(  -7,   14), S(  10,   28), S(  41,   15), S(  19,   42), S(  49,   46), S(  37,   40), S(   1,   32), 
        S(   4,   23), S( -26,   54), S( -20,   71), S( -14,   70), S(  -7,   84), S(   1,   93), S( -21,   87), S(  45,   72), 
        S(  16,   16), S(  19,   11), S(   1,   54), S(  16,   41), S(   9,   74), S(  56,   86), S(  58,   81), S(  82,   28), 
        S(   2,   44), S(  14,   24), S( -11,   53), S(   3,   48), S(  -6,   65), S(  14,   43), S(  17,   73), S(  26,   50), 
        S(   7,   34), S(  -1,   40), S(   7,   13), S(   8,   37), S(  15,   18), S(   9,   23), S(  20,   37), S(  39,   19), 
        S(   6,   11), S(  19,   -8), S(  11,   22), S(  13,    5), S(  20,    5), S(  15,   25), S(  40,   -4), S(  35,  -13), 
        S(  17,   11), S(  23,  -18), S(  27,  -16), S(  32,  -15), S(  30,  -17), S(  38,  -33), S(  42,  -48), S(  60,  -31), 
        S(  22,  -11), S(  23,  -17), S(  25,   -9), S(  28,   -5), S(  30,  -21), S(  19,  -27), S(  37,   -1), S(  28,   -4), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-102, -109), S( -21,  -50), S( -16,  -22), S( -23,  -12), S( -18,   10), S(   4,    4), S(  -3,  -14), S( -20,  -38), 
        S(  -1,    8), S(  34,   39), S(  32,   58), S(  41,   44), S(  30,   63), S(  42,   60), S(  32,   67), S( -11,   22), 
        S( -11,   23), S(  32,   58), S(  35,   70), S(  -2,   81), S(  10,   75), S(  52,   71), S(  47,   63), S( -13,   32), 
        S( -32,   12), S(   4,   43), S(  -4,   64), S(   0,   79), S(  14,   73), S(  -2,   70), S( -17,   50), S( -44,   21), 
        S( -51,    9), S( -40,   27), S( -11,   49), S( -19,   60), S( -32,   56), S( -47,   41), S( -51,   23), S( -76,    4), 
        S( -38,   -4), S(  -7,    5), S( -27,   23), S( -37,   34), S( -44,   35), S( -35,   15), S(  -6,   -4), S( -55,    5), 
        S(  58,  -21), S(  38,  -20), S(  21,   -6), S( -14,    1), S( -23,    6), S(   4,   -7), S(  47,  -31), S(  44,  -35), 
        S(  39,  -49), S(  94,  -57), S(  61,  -35), S( -55,   -4), S(  14,  -40), S( -28,   -9), S(  64,  -56), S(  61,  -78), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  17,  -24), S( -50,   17), S( -28,   13), S( -39,    8), S( -45,    9), S( -12,  -19), 
        S( -27,   11), S( -39,  -22), S( -69,  -12), S( -72,  -25), S( -55,   -8), S( -80,  -20), S( -95,  -67), S(-115,  -60), 
        S(-125,  -61), S(-123,  -59), S(-132,  -67), S(-163,  -94), S(-212, -123), S(-193,  -99), S(-209, -122), S(-223, -202), 
        S(-195, -170), S(-256, -175), S(-288, -253), S(-180, -159), S(-253, -146), S(-195, -161), S(-117,  -36), S(-209, -141), 
        S(-198, -161), S(-346, -259), S(-315, -282), S(  79,  -21), S(-333, -170), S(-215, -169), S(-269, -199), S(-213, -190), 
        S(-187, -203), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    4);

    constexpr int tempo = 10;
}
