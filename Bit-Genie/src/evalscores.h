
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 102,  159);

    constexpr int stacked = S(  -7,  -18);

    constexpr int isolated = S( -21,  -19);

    constexpr int passed_connected = S(  26,   14);

    constexpr int passed_tempo = S(  44,   50);

    constexpr int phalanx[8]
    {
        S(   0,    0), S(   2,  -11), S(   0,    3), S(  21,   18), S(  54,   71), S( 166,  265), S(  89,  289), S(   0,    0), 
    };

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -22,   79), S( -94,   64), S( -71,   25), S( -57,  -36), S( -44,  -19), S(-121,   36), S( -88,   40), S(-126,   77), 
        S( -13,   41), S(  -9,   17), S(  19,   15), S(  38,   18), S(  53,   26), S(  96,   -3), S(  63,   25), S(  32,   33), 
        S( -40,   30), S( -21,    8), S(  -2,    1), S(   2,  -13), S(  28,  -17), S(  14,  -11), S(   5,   -3), S(  -5,    1), 
        S( -47,    3), S( -30,   -7), S( -11,  -12), S(   8,   -7), S(  12,  -12), S(   4,  -14), S(  -9,  -16), S( -16,  -20), 
        S( -44,    2), S( -26,   -6), S(  -8,   -6), S(  -1,   -8), S(  16,   -2), S(   4,   -3), S(  24,  -21), S(  -6,  -17), 
        S( -44,    7), S( -25,   -2), S( -16,    3), S(  -9,   -1), S(   3,   15), S(  19,    2), S(  31,  -17), S( -15,  -18), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 304,  247), S( 112,  346), S( 156,  364), S( 190,  337), S( 206,  326), S(  82,  321), S( 164,  371), S( 201,  312), 
        S(  34,  254), S(  26,  267), S(   1,  201), S(   2,  118), S( -19,  117), S( -74,  238), S( -19,  249), S( -38,  265), 
        S(   7,  140), S( -21,  138), S( -27,   79), S( -19,   57), S( -33,   59), S( -22,   86), S( -59,  151), S( -29,  148), 
        S( -23,   80), S( -33,   56), S( -47,   32), S( -46,    7), S( -58,   24), S( -63,   51), S( -78,   91), S( -19,   78), 
        S( -23,    6), S( -72,    7), S( -48,  -10), S( -57,  -12), S( -63,  -15), S( -74,   -8), S( -94,   31), S( -21,    9), 
        S( -20,    1), S( -32,   -7), S( -42,  -15), S( -31,  -21), S( -37,  -34), S( -36,  -20), S( -21,  -12), S(  -4,   -2), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  59,  198), S( 212,   87), S( 239,   59), S( 233,   93), S( 171,   69), S( 201,   73), S( 137,   17), S(  83,   88), 
        S(  50,  104), S( 114,   63), S(  93,   13), S(  27,    3), S(  15,  -15), S(  58,   11), S(  37,   -5), S( -39,   23), 
        S(  40,   68), S(  48,   54), S(  20,   36), S(  15,   29), S(  -9,   27), S(  -2,   25), S(  26,   26), S(  -2,   40), 
        S(  36,   36), S(  18,   31), S( -15,   19), S( -21,   17), S( -26,   27), S( -26,   27), S(  -7,   42), S( -26,   41), 
        S(  15,  -14), S(   7,   23), S( -34,    8), S( -43,   12), S( -52,   21), S( -41,   26), S( -51,   47), S( -32,   25), 
        S(   9,  -16), S(   3,    8), S( -30,   22), S( -33,   28), S(  -5,   -6), S( -12,   -5), S(  12,  -16), S(   1,    6), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 395,  521);

    constexpr int mobility[9]
    {
        S(-125, -114), S( -49,  -60), S( -11,   17), S(   3,   43), S(  20,   43), S(  24,   45), S(  34,   47), S(  44,   40), 
        S(  54,   33), 
    };

    constexpr int psqt[64]
    {
        S(-173,  -37), S(-163,   -3), S( -83,   18), S(-135,   33), S( -42,   18), S(-113,  -67), S(-130,  -38), S(-133,  -60), 
        S( -49,    0), S( -43,   28), S(  -7,   21), S(  46,   -7), S( -21,   -5), S(  73,  -22), S( -13,    5), S( -28,  -18), 
        S( -34,    3), S(  18,   13), S(  12,   36), S(  30,   30), S(  78,    0), S(  83,   10), S(  42,    5), S(   9,  -10), 
        S(  -5,   32), S(  -2,   31), S(  24,   38), S(  54,   34), S(  27,   28), S(  46,   40), S(   6,   26), S(  37,   -5), 
        S( -15,   16), S(  -8,   25), S(   0,   33), S(   8,   39), S(  17,   39), S(  13,   20), S(  11,   20), S(   1,   10), 
        S( -44,   -4), S( -28,   13), S( -14,    0), S( -12,   33), S(   8,   22), S(  -9,    0), S(   3,    3), S( -24,   -4), 
        S( -37,   13), S( -34,    3), S( -31,    6), S(  -4,    1), S( -11,   -2), S( -14,   -6), S( -12,   10), S( -15,   33), 
        S( -71,   36), S( -27,   -8), S( -60,   12), S( -36,    7), S( -28,    2), S( -21,   -6), S( -21,   -5), S( -45,   13), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 421,  487);

    constexpr int mobility[14]
    {
        S( -79,  -70), S( -75,  -67), S( -33,   12), S( -14,   51), S(   2,   46), S(   9,   56), S(  25,   74), S(  36,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   35), S(  61,   38), 
    };

    constexpr int psqt[64]
    {
        S( -48,   55), S( -94,   78), S( -46,   50), S(-128,   67), S(-117,   66), S( -73,   42), S( -29,   26), S( -50,   31), 
        S( -22,   25), S( -20,   33), S( -20,   40), S( -36,   42), S( -11,   19), S( -32,   26), S( -22,   24), S( -12,    7), 
        S(  13,   45), S(  27,   40), S(  15,   34), S(  32,   14), S(  16,   13), S(  66,   31), S(  32,   41), S(  42,   31), 
        S(  -8,   50), S(   3,   50), S(  16,   30), S(  28,   45), S(  40,   36), S(  14,   32), S(  15,   25), S( -19,   53), 
        S(   2,   47), S(  -5,   33), S(   0,   35), S(  23,   43), S(  24,   31), S(   7,   23), S(  -1,   24), S(  20,   14), 
        S(  14,   11), S(  15,   39), S(  11,   34), S(  12,   28), S(  12,   37), S(  17,   26), S(  22,   16), S(  25,   27), 
        S(  27,   27), S(  21,   18), S(  24,    6), S(   4,   21), S(  14,   24), S(  23,    8), S(  44,   21), S(  30,  -13), 
        S(  25,   30), S(  34,    4), S(  16,   18), S(   2,   34), S(   9,   40), S(   2,   41), S(  20,    4), S(  46,   -9), 
    };
}

namespace RookEval
{
    constexpr int value = S( 520,  906);

    constexpr int open_file = S(  27,   16);

    constexpr int semi_open_file = S(  28,   -2);

    constexpr int mobility[15]
    {
        S( -58,  -70), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  13,   66), S( -40,   89), S(  15,   81), S( -22,   95), S( -11,   77), S(  22,   79), S(   0,   73), S(  52,   55), 
        S( -12,   74), S( -31,  101), S( -13,  107), S(  10,   86), S(  -9,   89), S(  11,   82), S(  16,   80), S(  72,   43), 
        S( -29,   76), S(   5,   72), S( -13,   83), S( -15,   58), S(  33,   35), S(  42,   43), S( 119,   16), S(  62,   14), 
        S( -27,   73), S( -29,   78), S( -19,   73), S( -15,   57), S(  -9,   40), S(   2,   39), S(  26,   37), S(   8,   40), 
        S( -29,   56), S( -30,   51), S( -36,   53), S( -24,   52), S( -17,   45), S( -28,   50), S(  22,    7), S(   2,   24), 
        S( -32,   44), S( -28,   35), S( -31,   46), S( -23,   39), S(  -8,   24), S(   0,   19), S(  30,   -5), S(  18,  -10), 
        S( -20,   24), S( -27,   33), S( -17,   32), S( -14,   28), S(  -2,   23), S(   6,   15), S(  14,    4), S(   3,    2), 
        S(  -6,   35), S(  -8,   34), S( -11,   43), S(  -2,   28), S(   8,   23), S(  14,   26), S(  34,    8), S(   2,    9), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1263, 1728);

    constexpr int mobility[28]
    {
        S( -63,  -49), S( -71,  -37), S( -67,  -50), S( -46,  -51), S( -28,  -47), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  36,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  61,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   9,   54), S( -35,  102), S(  -5,  108), S(  71,   41), S( -31,  153), S(  31,  114), S(  19,  113), S( -18,  108), 
        S(   5,   76), S( -28,  122), S( -30,  155), S( -31,  159), S( -29,  183), S( -16,  193), S( -38,  187), S(  36,  152), 
        S(  20,   65), S(  28,   51), S(   1,  117), S(  18,   98), S(  10,  140), S(  50,  162), S(  58,  150), S(  89,   65), 
        S(   1,  111), S(  21,   73), S(  -9,  113), S(   7,  104), S(  -5,  131), S(  19,  100), S(  20,  133), S(  30,  109), 
        S(  16,   82), S(   6,   90), S(  15,   56), S(  15,   85), S(  23,   64), S(  17,   70), S(  28,   89), S(  47,   65), 
        S(  12,   63), S(  29,   34), S(  18,   71), S(  22,   47), S(  29,   48), S(  24,   71), S(  50,   41), S(  49,   14), 
        S(  22,   67), S(  32,   27), S(  37,   27), S(  42,   28), S(  41,   25), S(  48,    6), S(  62,  -46), S(  95,  -94), 
        S(  36,   23), S(  32,   25), S(  35,   32), S(  39,   40), S(  40,   21), S(  28,   19), S(  64,    7), S(  47,   27), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-140, -238), S(  66,  -96), S(  -2,  -37), S( -42,    5), S(   6,   21), S( -11,   14), S( -20,  -35), S( -39, -155), 
        S(  -1,   16), S(  34,   52), S(  26,   87), S(  39,   66), S( -23,  104), S(   6,   81), S(   1,   99), S( -96,   40), 
        S(-125,   45), S(  15,   82), S(   9,   94), S( -95,  119), S( -69,  111), S(   2,  100), S(  16,   83), S( -99,   53), 
        S(-122,   32), S( -48,   63), S(-108,   97), S(-164,  123), S( -92,  108), S( -65,   98), S(-116,   83), S(-151,   48), 
        S(-107,   25), S( -95,   45), S( -36,   64), S( -87,   80), S( -72,   73), S( -98,   59), S( -90,   38), S(-186,   35), 
        S( -33,   -7), S(  11,    1), S( -15,   25), S( -32,   40), S( -39,   41), S( -25,   16), S(  16,  -12), S( -36,   -2), 
        S(  83,  -39), S(  60,  -30), S(  38,  -11), S(   1,   -1), S(  -7,    4), S(  23,  -14), S(  70,  -45), S(  66,  -51), 
        S(  61,  -72), S( 115,  -72), S(  83,  -46), S( -39,  -12), S(  35,  -53), S( -10,  -18), S(  86,  -72), S(  84, -101), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  20,  -29), S( -55,   19), S( -31,   15), S( -43,   12), S( -50,   15), S( -16,  -17), 
        S( -32,   16), S( -36,  -28), S( -94,   84), S( -92,   50), S( -79,   90), S(-120,   94), S(-115,    7), S(-166,    4), 
        S(-176,    8), S(-172,    5), S(-187,   -5), S(-207,  -58), S(-265, -129), S(-260,   13), S(-287,  -82), S(-278, -140), 
        S(-224, -221), S(-387, -356), S(-285, -357), S(-264, -235), S(-300,  -88), S(-264, -127), S(-255,  -80), S(-311, -188), 
        S(-332, -226), S(-418, -293), S(-425, -304), S( -88,  -79), S(-389, -222), S(-321, -209), S(-361, -225), S(-241, -201), 
        S(-174, -195), S(-208, -226), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    5);
}
