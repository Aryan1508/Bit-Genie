
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 100,  150);

    constexpr int stacked = S(  -4,  -16);

    constexpr int isolated = S( -19,  -14);

    constexpr int passed_connected = S(  16,    5);

    constexpr int passed_tempo = S(  42,   47);

    constexpr int support = S(  11,   12);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -26,   63), S( -90,   47), S( -69,   12), S( -53,  -45), S( -40,  -29), S(-100,   15), S( -71,   18), S(-110,   55), 
        S( -19,   39), S( -17,   16), S(  14,   13), S(  32,   11), S(  46,   18), S(  83,   -4), S(  53,   21), S(  23,   34), 
        S( -41,   25), S( -22,    2), S(  -6,   -6), S(  -4,  -17), S(  23,  -22), S(  12,  -15), S(   3,   -8), S(  -6,   -3), 
        S( -48,    1), S( -31,  -12), S(  -9,  -18), S(   5,  -15), S(  11,  -17), S(   3,  -20), S( -11,  -19), S( -21,  -21), 
        S( -53,   -4), S( -38,  -16), S( -18,  -14), S( -12,  -15), S(   5,  -10), S(  -8,  -10), S(   7,  -30), S( -18,  -21), 
        S( -46,    0), S( -27,  -13), S( -18,   -8), S( -16,   -8), S(  -3,    3), S(  14,  -10), S(  28,  -28), S( -20,  -25), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 290,  237), S( 152,  310), S( 189,  328), S( 219,  309), S( 226,  301), S( 160,  275), S( 221,  325), S( 235,  281), 
        S(  60,  226), S(  60,  240), S(  15,  187), S(   9,  119), S(  -7,  115), S(  -6,  200), S(  64,  215), S(  26,  222), 
        S(  14,  133), S(  -8,  133), S( -19,   80), S(  -9,   59), S( -25,   61), S( -16,   87), S( -36,  143), S( -21,  142), 
        S( -17,   74), S( -24,   53), S( -42,   32), S( -41,   10), S( -53,   25), S( -58,   51), S( -62,   84), S( -12,   74), 
        S( -15,    7), S( -57,   10), S( -40,   -7), S( -48,  -11), S( -53,  -13), S( -63,   -6), S( -75,   32), S( -10,   10), 
        S( -17,    1), S( -27,   -4), S( -37,  -14), S( -28,  -23), S( -32,  -31), S( -33,  -18), S( -20,   -7), S(   0,   -2), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  70,  177), S( 171,  104), S( 201,   80), S( 208,  100), S( 151,   74), S( 156,   94), S( 105,   41), S(  64,   93), 
        S(  58,   87), S( 122,   54), S(  97,    5), S(  30,    6), S(  19,  -11), S(  60,   12), S(  39,    5), S( -33,   13), 
        S(  44,   60), S(  54,   52), S(  28,   35), S(  23,   28), S(  -2,   28), S(   3,   28), S(  25,   33), S(   0,   38), 
        S(  40,   31), S(  25,   27), S( -11,   19), S( -17,   21), S( -22,   27), S( -21,   27), S(   2,   36), S( -17,   34), 
        S(  22,  -11), S(  20,   24), S( -25,   11), S( -33,   12), S( -41,   21), S( -31,   25), S( -34,   45), S( -21,   24), 
        S(  13,  -14), S(   5,   11), S( -26,   23), S( -28,   25), S(  -3,   -2), S( -11,   -3), S(  13,  -14), S(   5,    7), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 383,  470);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-153,  -32), S( -81,  -28), S( -50,    0), S( -79,    2), S( -23,    2), S( -89,  -75), S( -72,  -53), S(-110,  -54), 
        S( -46,   -3), S( -41,   21), S(  -5,   10), S(  46,  -16), S( -17,  -14), S(  75,  -33), S(  -8,   -2), S( -23,  -22), 
        S( -33,   -3), S(  20,    2), S(  15,   19), S(  32,   13), S(  80,  -17), S(  84,   -8), S(  46,   -6), S(  15,  -14), 
        S(  -3,   24), S(   0,   19), S(  27,   22), S(  57,   17), S(  32,   12), S(  50,   22), S(   9,   15), S(  39,  -13), 
        S( -14,    9), S(  -7,   15), S(   5,   17), S(  12,   24), S(  21,   22), S(  17,    4), S(  12,   10), S(   2,    5), 
        S( -43,   -8), S( -26,    3), S( -11,  -13), S(  -9,   18), S(  10,    7), S(  -6,  -13), S(   5,   -7), S( -24,   -9), 
        S( -36,   13), S( -32,   -4), S( -29,   -4), S(  -2,   -9), S(  -8,  -13), S( -12,  -16), S( -11,    5), S( -15,   31), 
        S( -58,   19), S( -25,   -6), S( -57,    7), S( -33,    2), S( -26,   -3), S( -20,  -10), S( -21,   -1), S( -41,    8), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 420,  442);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -47,   35), S( -66,   46), S( -38,   29), S( -85,   29), S( -80,   33), S( -63,   17), S( -21,    4), S( -49,   11), 
        S( -29,   11), S( -27,   13), S( -28,   19), S( -40,   20), S( -18,   -1), S( -36,    5), S( -27,    5), S( -17,  -10), 
        S(   3,   29), S(  17,   20), S(   7,    9), S(  24,  -10), S(   9,  -10), S(  58,    7), S(  24,   20), S(  35,   13), 
        S( -18,   34), S(  -5,   28), S(   8,    6), S(  20,   19), S(  32,    9), S(   6,    9), S(   6,    5), S( -27,   34), 
        S(  -7,   30), S( -14,   13), S(  -8,   12), S(  16,   18), S(  16,    6), S(  -2,    1), S( -10,    4), S(  11,    1), 
        S(   4,   -3), S(   6,   20), S(   2,   14), S(   4,    7), S(   3,   17), S(   8,    6), S(  13,   -1), S(  13,   12), 
        S(  14,   15), S(  11,    2), S(  14,  -12), S(  -6,    4), S(   5,    6), S(  12,   -8), S(  34,    6), S(  19,  -21), 
        S(  17,   16), S(  23,   -8), S(   6,   10), S(  -8,   19), S(   1,   25), S(  -8,   30), S(  12,   -6), S(  35,  -16), 
    };
}

namespace RookEval
{
    constexpr int value = S( 525,  838);

    constexpr int open_file = S(  27,   10);

    constexpr int semi_open_file = S(  27,   -2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  -1,   28), S( -47,   48), S(   3,   41), S( -33,   53), S( -26,   39), S(   9,   39), S(  -4,   31), S(  39,   15), 
        S( -27,   39), S( -43,   64), S( -25,   70), S(  -1,   49), S( -21,   52), S(  -2,   44), S(   6,   41), S(  55,    9), 
        S( -41,   41), S( -10,   37), S( -25,   45), S( -27,   23), S(  19,    0), S(  27,    6), S( 101,  -16), S(  46,  -18), 
        S( -40,   39), S( -42,   44), S( -32,   37), S( -26,   22), S( -21,    5), S( -11,    6), S(  11,    4), S(  -5,    7), 
        S( -42,   25), S( -45,   17), S( -47,   19), S( -36,   18), S( -31,   12), S( -42,   15), S(   7,  -24), S( -11,   -8), 
        S( -44,   12), S( -41,    3), S( -44,   13), S( -35,    7), S( -21,   -9), S( -14,  -13), S(  15,  -37), S(   3,  -39), 
        S( -32,   -8), S( -40,    1), S( -29,   -1), S( -27,   -3), S( -15,   -8), S(  -8,  -18), S(   1,  -28), S( -11,  -28), 
        S( -20,    5), S( -22,    2), S( -24,   11), S( -14,   -3), S(  -5,   -9), S(  -1,   -4), S(  20,  -24), S( -14,  -18), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1234, 1546);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   8,   12), S( -18,   31), S(   2,   44), S(  50,   10), S(  -3,   70), S(  42,   52), S(  27,   51), S( -10,   48), 
        S(  -4,   39), S( -34,   78), S( -34,  104), S( -29,  100), S( -24,  118), S( -13,  126), S( -33,  118), S(  34,   95), 
        S(  12,   26), S(  18,   13), S(  -4,   70), S(  12,   52), S(   6,   89), S(  49,  104), S(  54,   96), S(  82,   22), 
        S(  -6,   66), S(  12,   31), S( -16,   67), S(   2,   56), S( -10,   82), S(  11,   53), S(  14,   88), S(  23,   64), 
        S(   6,   42), S(  -3,   47), S(   6,   17), S(   7,   41), S(  14,   20), S(   8,   26), S(  18,   47), S(  37,   24), 
        S(   4,   19), S(  19,   -4), S(   9,   29), S(  14,    7), S(  19,    8), S(  15,   31), S(  39,    1), S(  37,  -20), 
        S(  14,   24), S(  21,  -11), S(  26,  -10), S(  31,   -9), S(  30,  -11), S(  37,  -33), S(  49,  -73), S(  68,  -64), 
        S(  25,  -17), S(  22,  -16), S(  23,   -3), S(  27,    8), S(  28,  -15), S(  18,  -21), S(  44,  -11), S(  33,   -1), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-110, -139), S(  -7,  -63), S( -13,  -30), S( -24,   -4), S( -13,   19), S(   3,    6), S(  -6,  -22), S( -26,  -66), 
        S(   3,   16), S(  40,   45), S(  35,   72), S(  46,   56), S(  23,   82), S(  38,   65), S(  31,   83), S( -26,   28), 
        S( -34,   30), S(  32,   68), S(  33,   79), S( -25,   97), S(  -5,   90), S(  42,   82), S(  40,   71), S( -32,   41), 
        S( -55,   20), S( -13,   50), S( -37,   78), S( -47,   97), S( -26,   89), S( -31,   85), S( -54,   63), S( -82,   34), 
        S( -73,   18), S( -69,   34), S( -26,   56), S( -62,   71), S( -64,   66), S( -85,   51), S( -83,   31), S(-128,   21), 
        S( -33,   -4), S(   7,   -2), S( -16,   20), S( -31,   35), S( -38,   35), S( -24,   12), S(  11,  -13), S( -37,    2), 
        S(  78,  -33), S(  55,  -31), S(  35,  -14), S(   0,   -5), S(  -9,    0), S(  19,  -15), S(  65,  -44), S(  63,  -46), 
        S(  55,  -59), S( 109,  -66), S(  78,  -39), S( -39,   -8), S(  30,  -44), S( -13,  -12), S(  80,  -64), S(  75,  -87), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  23,  -28), S( -49,   17), S( -28,   14), S( -38,   10), S( -45,   13), S( -13,  -17), 
        S( -26,   13), S( -36,  -15), S( -75,   39), S( -77,   21), S( -61,   45), S( -93,   33), S(-101,  -25), S(-131,  -24), 
        S(-143,  -25), S(-143,  -25), S(-154,  -35), S(-181,  -74), S(-233, -118), S(-220,  -52), S(-241, -102), S(-244, -180), 
        S(-208, -192), S(-305, -225), S(-290, -281), S(-218, -187), S(-261, -134), S(-226, -161), S(-153,  -52), S(-237, -156), 
        S(-224, -175), S(-359, -265), S(-338, -288), S(  48,  -34), S(-340, -177), S(-233, -175), S(-284, -203), S(-217, -191), 
        S(-185, -202), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    5);
}
