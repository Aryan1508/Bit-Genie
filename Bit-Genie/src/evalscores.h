
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 107,  148);

    constexpr int stacked = S(  -6,  -16);

    constexpr int isolated = S( -24,  -16);

    constexpr int passed_connected = S(  19,   12);

    constexpr int passed_tempo = S(  36,   45);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -19,   42), S( -63,   20), S( -59,   -5), S( -47,  -57), S( -40,  -36), S( -73,   -3), S( -59,    2), S( -94,   35), 
        S( -27,   35), S( -22,   14), S(   4,    5), S(  16,  -13), S(  28,   -7), S(  78,   -5), S(  49,   16), S(  15,   29), 
        S( -44,   22), S( -26,    4), S(  -5,   -4), S(  -3,  -16), S(  23,  -21), S(  11,  -13), S(  -2,   -6), S( -12,   -3), 
        S( -50,   -2), S( -34,  -10), S( -10,  -16), S(   8,  -13), S(  11,  -16), S(   2,  -18), S( -16,  -17), S( -23,  -21), 
        S( -51,   -4), S( -35,  -10), S( -14,  -12), S(  -8,  -13), S(  10,   -8), S(  -4,   -9), S(  12,  -23), S( -15,  -19), 
        S( -49,   -3), S( -33,  -14), S( -21,   -9), S( -14,  -11), S(  -2,    0), S(  12,  -10), S(  21,  -28), S( -24,  -24), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 276,  230), S( 196,  278), S( 224,  295), S( 244,  284), S( 242,  280), S( 204,  252), S( 250,  300), S( 259,  262), 
        S( 104,  189), S( 102,  201), S(  58,  161), S(  45,  121), S(  38,  118), S(  54,  168), S( 109,  185), S(  91,  184), 
        S(  29,  110), S(   7,  107), S( -14,   64), S(  -7,   50), S( -22,   52), S(  -5,   71), S(  11,  112), S(  15,  115), 
        S(  -9,   60), S( -16,   39), S( -39,   23), S( -38,    3), S( -49,   16), S( -41,   34), S( -26,   59), S(  -1,   60), 
        S( -12,    0), S( -52,   -5), S( -40,  -13), S( -47,  -17), S( -53,  -20), S( -53,  -16), S( -57,   12), S(  -2,    2), 
        S( -12,   -2), S( -25,   -7), S( -36,  -15), S( -24,  -13), S( -27,  -25), S( -31,  -18), S( -13,   -9), S(   9,   -5), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  88,  160), S( 143,  112), S( 170,  102), S( 186,  117), S( 134,   88), S( 125,  101), S(  84,   55), S(  53,   92), 
        S(  69,   77), S( 105,   58), S( 102,   17), S(  45,   27), S(  34,   17), S(  60,   18), S(  40,    9), S( -24,   14), 
        S(  47,   52), S(  55,   42), S(  26,   29), S(  22,   23), S(  -3,   23), S(   3,   21), S(  26,   28), S(   7,   31), 
        S(  41,   27), S(  25,   21), S( -12,   12), S( -17,   13), S( -21,   21), S( -20,   19), S(   7,   25), S( -14,   26), 
        S(  21,  -14), S(  17,   14), S( -29,    6), S( -38,    8), S( -44,   13), S( -27,   15), S( -31,   29), S( -21,   17), 
        S(  13,  -13), S(   6,    8), S( -27,   18), S( -28,   21), S(  -7,    2), S( -12,   -2), S(  16,  -12), S(   7,    4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 398,  432);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-136,  -57), S( -59,  -36), S( -30,  -12), S( -52,   -9), S( -16,   -5), S( -75,  -74), S( -59,  -54), S(-102,  -70), 
        S( -44,  -10), S( -38,   13), S(  -2,    5), S(  41,  -11), S( -16,  -16), S(  74,  -29), S(  -4,   -6), S( -22,  -24), 
        S( -32,   -9), S(  21,   -2), S(  15,   19), S(  34,   11), S(  81,  -15), S(  86,   -7), S(  46,   -9), S(  15,  -18), 
        S(   0,   15), S(   1,   15), S(  27,   19), S(  57,   16), S(  30,   12), S(  50,   20), S(  10,   11), S(  40,  -17), 
        S( -12,    4), S(  -5,   11), S(   4,   16), S(  12,   22), S(  22,   21), S(  16,    5), S(  13,    7), S(   4,    0), 
        S( -42,  -13), S( -25,    0), S( -12,  -12), S(  -9,   17), S(  11,    6), S(  -7,  -12), S(   6,  -10), S( -22,  -13), 
        S( -34,    3), S( -30,   -9), S( -29,   -7), S(  -1,  -11), S(  -8,  -14), S( -12,  -18), S( -10,    0), S( -13,   22), 
        S( -47,   -5), S( -24,  -16), S( -56,   -2), S( -32,   -5), S( -26,   -9), S( -19,  -14), S( -19,  -11), S( -38,   -3), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 435,  406);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -40,   22), S( -38,   27), S( -26,   18), S( -52,    9), S( -48,   16), S( -44,    8), S( -14,   -6), S( -40,   -2), 
        S( -31,    7), S( -28,   10), S( -28,   17), S( -30,   10), S( -18,   -4), S( -36,    1), S( -28,    1), S( -19,   -9), 
        S(   4,   22), S(  19,   14), S(   7,    9), S(  23,   -8), S(   8,   -9), S(  58,    6), S(  27,   11), S(  34,    9), 
        S( -16,   25), S(  -5,   24), S(   8,    6), S(  20,   19), S(  31,   11), S(   6,    8), S(   5,    5), S( -26,   28), 
        S(  -6,   23), S( -15,   11), S(  -9,   12), S(  16,   18), S(  16,    7), S(  -2,    3), S( -11,    2), S(  11,   -4), 
        S(   5,   -6), S(   6,   17), S(   2,   13), S(   4,    7), S(   3,   15), S(   8,    5), S(  13,   -3), S(  16,    7), 
        S(  18,    9), S(  11,    0), S(  14,  -13), S(  -6,    0), S(   5,    2), S(  14,  -11), S(  34,    3), S(  21,  -27), 
        S(  18,   10), S(  25,  -13), S(   7,    1), S(  -6,   11), S(   1,   18), S(  -7,   21), S(  11,   -5), S(  34,  -15), 
    };
}

namespace RookEval
{
    constexpr int value = S( 547,  778);

    constexpr int open_file = S(  28,   12);

    constexpr int semi_open_file = S(  26,   -2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   4,   16), S( -24,   27), S(  19,   26), S( -12,   35), S( -15,   26), S(  16,   29), S(   4,   19), S(  47,    6), 
        S( -24,   25), S( -39,   46), S( -20,   51), S(   4,   33), S( -17,   36), S(   4,   29), S(  11,   28), S(  61,   -1), 
        S( -39,   26), S(  -6,   22), S( -22,   31), S( -26,   12), S(  21,   -9), S(  30,   -3), S(  87,  -14), S(  47,  -24), 
        S( -38,   24), S( -40,   28), S( -31,   25), S( -25,   11), S( -21,   -4), S( -11,   -4), S(  10,   -4), S(  -6,   -2), 
        S( -41,   12), S( -44,    7), S( -47,    8), S( -36,    8), S( -30,    2), S( -43,    8), S(   6,  -29), S( -12,  -16), 
        S( -44,    2), S( -41,   -6), S( -43,    3), S( -35,   -3), S( -22,  -16), S( -14,  -20), S(  14,  -41), S(   2,  -43), 
        S( -33,  -17), S( -40,   -8), S( -30,   -9), S( -27,  -13), S( -16,  -16), S(  -8,  -24), S(   1,  -34), S( -13,  -33), 
        S( -20,   -4), S( -22,   -7), S( -24,    2), S( -15,  -12), S(  -6,  -16), S(  -1,  -12), S(  19,  -29), S( -15,  -25), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1256, 1472);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   7,   10), S(  -6,   14), S(  10,   29), S(  42,   16), S(  20,   43), S(  50,   47), S(  37,   40), S(   3,   32), 
        S(   2,   21), S( -29,   53), S( -22,   70), S( -15,   69), S(  -7,   83), S(   0,   93), S( -24,   86), S(  45,   71), 
        S(  15,   15), S(  18,   10), S(   0,   53), S(  15,   40), S(  10,   74), S(  56,   85), S(  58,   81), S(  82,   28), 
        S(   1,   43), S(  14,   23), S( -12,   51), S(   2,   47), S(  -7,   65), S(  13,   43), S(  17,   73), S(  26,   50), 
        S(   7,   35), S(  -1,   39), S(   6,   12), S(   7,   36), S(  14,   18), S(   8,   23), S(  20,   38), S(  39,   19), 
        S(   5,   10), S(  19,   -7), S(  10,   22), S(  13,    5), S(  20,    5), S(  15,   26), S(  40,   -3), S(  35,  -13), 
        S(  17,   11), S(  22,  -17), S(  27,  -15), S(  33,  -14), S(  31,  -16), S(  37,  -32), S(  41,  -47), S(  60,  -30), 
        S(  22,  -10), S(  23,  -17), S(  25,   -9), S(  30,   -3), S(  30,  -21), S(  19,  -26), S(  37,   -1), S(  28,   -4), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-102, -108), S( -21,  -50), S( -16,  -22), S( -23,  -13), S( -18,   10), S(   4,    4), S(  -3,  -14), S( -20,  -38), 
        S(  -1,    8), S(  34,   39), S(  32,   58), S(  41,   45), S(  30,   63), S(  42,   60), S(  32,   66), S( -11,   22), 
        S( -10,   23), S(  31,   59), S(  35,   71), S(  -1,   82), S(  10,   76), S(  52,   72), S(  47,   63), S( -12,   32), 
        S( -32,   12), S(   5,   43), S(  -3,   64), S(   0,   80), S(  15,   74), S(  -1,   71), S( -16,   49), S( -43,   21), 
        S( -51,    8), S( -40,   26), S( -11,   49), S( -18,   59), S( -31,   56), S( -46,   41), S( -50,   22), S( -75,    3), 
        S( -38,   -5), S(  -8,    4), S( -28,   22), S( -37,   33), S( -45,   34), S( -36,   15), S(  -7,   -5), S( -55,    5), 
        S(  57,  -21), S(  38,  -20), S(  20,   -7), S( -14,    1), S( -23,    5), S(   3,   -8), S(  46,  -32), S(  43,  -35), 
        S(  38,  -49), S(  94,  -57), S(  63,  -34), S( -56,   -4), S(  15,  -39), S( -28,   -9), S(  64,  -56), S(  60,  -78), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  17,  -25), S( -50,   16), S( -29,   13), S( -40,    8), S( -45,    9), S( -13,  -20), 
        S( -27,   10), S( -39,  -21), S( -69,  -13), S( -72,  -25), S( -54,   -9), S( -80,  -21), S( -95,  -67), S(-115,  -60), 
        S(-125,  -62), S(-124,  -60), S(-132,  -68), S(-164,  -95), S(-212, -123), S(-193, -100), S(-209, -122), S(-223, -202), 
        S(-194, -170), S(-255, -174), S(-287, -253), S(-180, -158), S(-253, -146), S(-195, -160), S(-117,  -36), S(-208, -141), 
        S(-198, -161), S(-346, -258), S(-315, -282), S(  79,  -21), S(-332, -169), S(-215, -168), S(-269, -199), S(-213, -190), 
        S(-187, -203), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    4);
}
