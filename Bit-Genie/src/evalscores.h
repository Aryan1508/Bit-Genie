
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 106,  152);

    constexpr int stacked = S(  -6,  -17);

    constexpr int isolated = S( -22,  -17);

    constexpr int passed_connected = S(  22,   11);

    constexpr int passed_tempo = S(  40,   47);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -26,   56), S( -88,   37), S( -70,    4), S( -55,  -52), S( -44,  -35), S( -95,    7), S( -71,   10), S(-107,   47), 
        S( -24,   39), S( -22,   14), S(   8,   12), S(  27,    4), S(  39,   12), S(  77,   -5), S(  48,   17), S(  17,   32), 
        S( -43,   25), S( -25,    3), S(  -5,   -5), S(  -4,  -17), S(  22,  -22), S(  11,  -15), S(  -1,   -7), S( -10,   -3), 
        S( -50,    0), S( -33,  -11), S( -10,  -17), S(   7,  -13), S(  10,  -16), S(   2,  -18), S( -14,  -18), S( -22,  -22), 
        S( -51,   -1), S( -34,  -11), S( -14,  -12), S(  -8,  -13), S(  10,   -8), S(  -4,   -8), S(  13,  -24), S( -15,  -19), 
        S( -49,   -1), S( -32,  -15), S( -21,  -10), S( -14,   -8), S(  -2,    2), S(  12,  -10), S(  22,  -31), S( -23,  -25), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 286,  234), S( 163,  298), S( 198,  316), S( 225,  300), S( 228,  293), S( 173,  266), S( 228,  314), S( 240,  272), 
        S(  72,  212), S(  70,  227), S(  24,  177), S(  14,  118), S(   2,  112), S(  12,  187), S(  78,  204), S(  46,  208), 
        S(  18,  125), S(  -9,  124), S( -21,   74), S( -12,   54), S( -26,   56), S( -19,   82), S( -25,  130), S( -14,  133), 
        S( -16,   70), S( -25,   48), S( -44,   27), S( -44,    5), S( -55,   20), S( -59,   45), S( -56,   75), S( -12,   70), 
        S( -17,    3), S( -61,    2), S( -44,  -11), S( -51,  -16), S( -58,  -18), S( -67,  -11), S( -79,   23), S( -14,    5), 
        S( -16,    0), S( -28,   -6), S( -39,  -14), S( -30,  -22), S( -34,  -32), S( -34,  -19), S( -19,   -8), S(   0,   -3), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  74,  172), S( 161,  107), S( 192,   87), S( 201,  104), S( 145,   77), S( 145,   96), S(  98,   46), S(  61,   95), 
        S(  59,   84), S( 119,   54), S(  98,    4), S(  32,    8), S(  20,   -6), S(  61,   13), S(  40,    7), S( -29,   14), 
        S(  43,   57), S(  50,   48), S(  23,   32), S(  20,   25), S(  -5,   24), S(  -1,   24), S(  22,   30), S(  -1,   36), 
        S(  38,   29), S(  21,   24), S( -14,   15), S( -20,   16), S( -24,   23), S( -25,   22), S(   0,   31), S( -19,   31), 
        S(  19,  -15), S(  13,   17), S( -30,    6), S( -39,    9), S( -47,   16), S( -34,   20), S( -41,   37), S( -26,   19), 
        S(  12,  -14), S(   4,   10), S( -28,   21), S( -31,   23), S(  -7,   -2), S( -13,   -4), S(  12,  -14), S(   5,    4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 387,  454);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-147,  -36), S( -74,  -31), S( -44,   -5), S( -71,   -1), S( -21,   -1), S( -85,  -76), S( -68,  -55), S(-107,  -57), 
        S( -44,   -5), S( -39,   19), S(  -4,    8), S(  45,  -16), S( -18,  -15), S(  74,  -33), S(  -7,   -3), S( -23,  -22), 
        S( -32,   -5), S(  20,    0), S(  14,   18), S(  32,   11), S(  78,  -18), S(  83,   -9), S(  44,   -8), S(  14,  -16), 
        S(  -1,   21), S(   0,   18), S(  26,   19), S(  56,   15), S(  30,   10), S(  49,   20), S(  10,   13), S(  40,  -14), 
        S( -13,    9), S(  -6,   14), S(   4,   15), S(  12,   22), S(  21,   20), S(  16,    3), S(  12,    9), S(   3,    4), 
        S( -43,   -9), S( -26,    2), S( -11,  -16), S(  -9,   17), S(  11,    6), S(  -6,  -16), S(   5,   -8), S( -23,   -9), 
        S( -35,    9), S( -31,   -6), S( -30,   -5), S(  -1,   -9), S(  -8,  -13), S( -12,  -15), S( -11,    3), S( -14,   28), 
        S( -55,   12), S( -25,   -6), S( -56,    4), S( -32,    0), S( -26,   -4), S( -20,  -10), S( -20,   -3), S( -40,    5), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 424,  426);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -44,   32), S( -58,   41), S( -35,   27), S( -75,   23), S( -71,   27), S( -58,   14), S( -19,    0), S( -47,    7), 
        S( -30,    9), S( -29,   12), S( -29,   19), S( -38,   17), S( -19,   -3), S( -37,    4), S( -29,    4), S( -18,  -10), 
        S(   3,   27), S(  17,   18), S(   6,    8), S(  22,  -11), S(   7,  -11), S(  56,    5), S(  24,   17), S(  34,   11), 
        S( -17,   31), S(  -5,   26), S(   8,    4), S(  20,   17), S(  32,    7), S(   6,    7), S(   5,    4), S( -27,   32), 
        S(  -7,   28), S( -14,   12), S(  -8,   10), S(  16,   15), S(  16,    3), S(  -2,   -1), S( -11,    3), S(  11,   -2), 
        S(   5,   -4), S(   6,   18), S(   2,   13), S(   4,    5), S(   4,   14), S(   8,    4), S(  13,   -2), S(  15,   11), 
        S(  17,   13), S(  11,    2), S(  15,  -13), S(  -6,    2), S(   5,    4), S(  13,  -10), S(  33,    5), S(  21,  -24), 
        S(  18,   13), S(  24,  -11), S(   6,    9), S(  -6,   17), S(   0,   24), S(  -7,   28), S(  12,   -8), S(  35,  -18), 
    };
}

namespace RookEval
{
    constexpr int value = S( 534,  811);

    constexpr int open_file = S(  27,   10);

    constexpr int semi_open_file = S(  26,   -1);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  -1,   22), S( -42,   39), S(   6,   33), S( -31,   46), S( -27,   32), S(  10,   33), S(  -3,   25), S(  41,    9), 
        S( -24,   33), S( -41,   57), S( -23,   62), S(   0,   42), S( -20,   45), S(   1,   38), S(   6,   36), S(  57,    3), 
        S( -40,   35), S(  -7,   30), S( -24,   39), S( -27,   17), S(  19,   -6), S(  28,    1), S(  99,  -21), S(  46,  -23), 
        S( -39,   32), S( -41,   36), S( -32,   31), S( -27,   16), S( -22,    0), S( -11,    0), S(  10,   -1), S(  -5,    2), 
        S( -41,   18), S( -44,   12), S( -47,   14), S( -36,   12), S( -30,    6), S( -41,   10), S(   7,  -28), S( -12,  -13), 
        S( -43,    7), S( -41,   -2), S( -43,    7), S( -35,    0), S( -21,  -14), S( -13,  -18), S(  15,  -41), S(   2,  -42), 
        S( -33,  -12), S( -40,   -4), S( -29,   -6), S( -27,   -8), S( -15,  -13), S(  -8,  -22), S(   0,  -31), S( -12,  -31), 
        S( -20,    2), S( -21,   -3), S( -23,    6), S( -14,   -9), S(  -5,  -14), S(   0,   -8), S(  19,  -28), S( -14,  -20), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1226, 1517);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   6,   10), S( -16,   23), S(   3,   37), S(  46,    8), S(   1,   59), S(  43,   46), S(  29,   45), S(  -8,   40), 
        S(  -3,   32), S( -35,   72), S( -31,   93), S( -26,   89), S( -20,  106), S( -10,  114), S( -32,  108), S(  37,   86), 
        S(  12,   21), S(  17,    9), S(  -5,   63), S(  12,   46), S(   6,   82), S(  49,   95), S(  53,   89), S(  81,   18), 
        S(  -5,   58), S(  11,   26), S( -16,   61), S(   1,   51), S( -10,   74), S(  11,   47), S(  13,   81), S(  23,   57), 
        S(   6,   37), S(  -4,   43), S(   5,   12), S(   7,   37), S(  14,   17), S(   7,   23), S(  18,   42), S(  37,   19), 
        S(   3,   14), S(  18,   -8), S(   9,   24), S(  12,    4), S(  18,    4), S(  14,   26), S(  39,   -3), S(  36,  -23), 
        S(  15,   18), S(  21,  -17), S(  26,  -14), S(  31,  -14), S(  29,  -15), S(  37,  -37), S(  46,  -70), S(  65,  -55), 
        S(  24,  -19), S(  22,  -20), S(  24,  -10), S(  28,    2), S(  29,  -20), S(  19,  -25), S(  42,   -9), S(  32,   -3), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-107, -130), S( -12,  -61), S( -14,  -28), S( -24,   -7), S( -15,   16), S(   3,    5), S(  -5,  -20), S( -24,  -58), 
        S(   2,   14), S(  39,   43), S(  35,   69), S(  45,   53), S(  26,   77), S(  40,   63), S(  32,   79), S( -21,   26), 
        S( -26,   28), S(  32,   65), S(  35,   77), S( -17,   92), S(   1,   86), S(  46,   79), S(  42,   69), S( -26,   38), 
        S( -48,   18), S(  -8,   48), S( -26,   74), S( -32,   91), S( -13,   85), S( -23,   81), S( -43,   59), S( -70,   31), 
        S( -67,   15), S( -62,   32), S( -25,   54), S( -50,   68), S( -58,   63), S( -77,   49), S( -78,   30), S(-113,   17), 
        S( -35,   -3), S(   3,    0), S( -19,   20), S( -32,   33), S( -38,   35), S( -25,   12), S(   9,  -12), S( -42,    4), 
        S(  72,  -29), S(  51,  -29), S(  32,  -14), S(  -3,   -5), S( -12,    0), S(  16,  -14), S(  59,  -42), S(  56,  -41), 
        S(  51,  -56), S( 105,  -64), S(  74,  -38), S( -42,   -5), S(  27,  -41), S( -16,  -10), S(  76,  -61), S(  72,  -83), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  21,  -28), S( -51,   18), S( -28,   14), S( -38,   10), S( -45,   12), S( -12,  -20), 
        S( -25,   12), S( -36,  -16), S( -72,   21), S( -75,    5), S( -58,   26), S( -88,   13), S( -99,  -40), S(-125,  -38), 
        S(-137,  -39), S(-137,  -38), S(-147,  -47), S(-176,  -82), S(-227, -120), S(-212,  -69), S(-232, -110), S(-238, -188), 
        S(-207, -185), S(-289, -209), S(-291, -273), S(-208, -179), S(-259, -138), S(-219, -163), S(-142,  -48), S(-228, -152), 
        S(-216, -171), S(-355, -263), S(-331, -287), S(  58,  -30), S(-337, -174), S(-227, -173), S(-279, -202), S(-216, -191), 
        S(-186, -202), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    6);
}
