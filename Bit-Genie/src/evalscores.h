
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 106,  149);

    constexpr int stacked = S(  -6,  -15);

    constexpr int isolated = S( -23,  -17);

    constexpr int passed_connected = S(  22,   11);

    constexpr int passed_tempo = S(  40,   44);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -27,   48), S( -84,   29), S( -70,   -1), S( -54,  -54), S( -45,  -34), S( -91,    4), S( -70,    6), S(-106,   41), 
        S( -25,   33), S( -22,   11), S(   6,   10), S(  24,    2), S(  35,    9), S(  77,   -5), S(  47,   15), S(  16,   28), 
        S( -43,   21), S( -25,    3), S(  -5,   -5), S(  -4,  -16), S(  22,  -21), S(  10,  -14), S(  -1,   -8), S( -10,   -4), 
        S( -50,   -2), S( -33,  -11), S( -10,  -17), S(   7,  -13), S(  10,  -16), S(   2,  -18), S( -15,  -18), S( -22,  -22), 
        S( -51,   -4), S( -34,  -11), S( -14,  -12), S(  -8,  -13), S(  10,   -8), S(  -4,   -9), S(  13,  -24), S( -14,  -20), 
        S( -49,   -4), S( -32,  -15), S( -21,   -9), S( -14,   -9), S(  -2,    2), S(  12,  -10), S(  22,  -29), S( -23,  -26), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 282,  229), S( 171,  290), S( 203,  308), S( 228,  294), S( 230,  289), S( 181,  261), S( 233,  308), S( 244,  266), 
        S(  79,  201), S(  77,  217), S(  31,  168), S(  19,  115), S(  10,  110), S(  24,  179), S(  86,  197), S(  59,  197), 
        S(  17,  116), S( -10,  116), S( -22,   69), S( -12,   53), S( -27,   56), S( -19,   78), S( -16,  122), S(  -8,  125), 
        S( -15,   64), S( -25,   44), S( -45,   26), S( -43,    5), S( -55,   19), S( -58,   41), S( -50,   68), S( -10,   65), 
        S( -16,    2), S( -61,    0), S( -44,  -10), S( -50,  -15), S( -57,  -17), S( -66,  -11), S( -77,   20), S( -11,    6), 
        S( -15,   -1), S( -28,   -5), S( -39,  -13), S( -29,  -19), S( -33,  -30), S( -34,  -17), S( -17,   -6), S(   2,   -2), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  76,  167), S( 156,  108), S( 187,   92), S( 198,  109), S( 143,   81), S( 139,   99), S(  94,   50), S(  58,   95), 
        S(  61,   85), S( 118,   56), S( 100,    8), S(  34,   13), S(  23,    1), S(  63,   17), S(  41,   10), S( -28,   16), 
        S(  44,   55), S(  50,   47), S(  23,   32), S(  20,   25), S(  -5,   25), S(  -1,   25), S(  22,   31), S(   0,   37), 
        S(  39,   29), S(  21,   24), S( -15,   15), S( -20,   15), S( -24,   23), S( -25,   22), S(   0,   30), S( -19,   31), 
        S(  19,  -14), S(  13,   17), S( -31,    7), S( -40,    9), S( -47,   15), S( -34,   19), S( -41,   36), S( -26,   20), 
        S(  12,  -12), S(   4,   10), S( -28,   19), S( -31,   23), S(  -7,   -1), S( -14,    0), S(  13,  -10), S(   5,    6), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 387,  442);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-145,  -42), S( -70,  -33), S( -40,   -9), S( -66,   -4), S( -20,   -4), S( -83,  -77), S( -66,  -56), S(-106,  -61), 
        S( -44,  -10), S( -39,   14), S(  -3,    6), S(  45,  -15), S( -18,  -15), S(  75,  -32), S(  -7,   -5), S( -23,  -24), 
        S( -32,   -9), S(  20,   -1), S(  14,   19), S(  32,   12), S(  79,  -14), S(  85,   -8), S(  44,   -9), S(  14,  -19), 
        S(   0,   15), S(   0,   15), S(  26,   19), S(  55,   16), S(  29,   13), S(  49,   21), S(   9,   12), S(  40,  -17), 
        S( -12,    4), S(  -6,   11), S(   3,   16), S(  11,   22), S(  20,   21), S(  15,    5), S(  12,    7), S(   4,    0), 
        S( -42,  -14), S( -26,    0), S( -12,  -12), S( -10,   17), S(  10,    7), S(  -8,  -12), S(   5,   -9), S( -22,  -13), 
        S( -34,    5), S( -30,   -9), S( -30,   -7), S(  -1,  -11), S(  -9,  -14), S( -12,  -18), S( -11,    0), S( -13,   22), 
        S( -53,    7), S( -23,  -16), S( -56,   -1), S( -32,   -5), S( -26,   -9), S( -19,  -14), S( -18,  -11), S( -40,    2), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 424,  416);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -44,   28), S( -53,   37), S( -33,   24), S( -69,   17), S( -65,   23), S( -55,   11), S( -18,   -3), S( -46,    4), 
        S( -31,    7), S( -29,   11), S( -29,   18), S( -37,   15), S( -19,   -4), S( -38,    3), S( -30,    3), S( -19,  -10), 
        S(   4,   22), S(  17,   16), S(   5,   10), S(  22,   -7), S(   7,   -8), S(  56,    7), S(  24,   15), S(  33,    9), 
        S( -17,   26), S(  -6,   25), S(   6,    7), S(  18,   21), S(  30,   12), S(   5,    9), S(   5,    5), S( -27,   29), 
        S(  -6,   24), S( -15,   12), S( -10,   13), S(  14,   19), S(  15,    8), S(  -3,    3), S( -11,    3), S(  11,   -4), 
        S(   5,   -6), S(   6,   17), S(   1,   13), S(   3,    7), S(   3,   16), S(   7,    5), S(  13,   -2), S(  16,    7), 
        S(  18,    9), S(  11,    0), S(  14,  -14), S(  -6,    1), S(   4,    3), S(  13,  -11), S(  34,    3), S(  21,  -27), 
        S(  18,   10), S(  25,  -14), S(   8,    1), S(  -6,   11), S(   1,   19), S(  -6,   22), S(  12,   -9), S(  35,  -19), 
    };
}

namespace RookEval
{
    constexpr int value = S( 530,  794);

    constexpr int open_file = S(  27,   13);

    constexpr int semi_open_file = S(  27,   -2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   0,   19), S( -38,   33), S(  10,   30), S( -27,   42), S( -24,   30), S(  12,   32), S(  -2,   22), S(  44,    7), 
        S( -25,   26), S( -41,   48), S( -22,   54), S(   1,   35), S( -20,   39), S(   1,   31), S(   6,   31), S(  60,    0), 
        S( -40,   27), S(  -7,   23), S( -23,   32), S( -27,   13), S(  19,   -7), S(  29,   -2), S(  99,  -20), S(  46,  -24), 
        S( -39,   25), S( -42,   29), S( -32,   26), S( -27,   12), S( -22,   -3), S( -11,   -4), S(   9,   -3), S(  -6,   -1), 
        S( -42,   12), S( -45,    8), S( -48,    9), S( -37,    9), S( -31,    3), S( -43,    8), S(   6,  -29), S( -13,  -16), 
        S( -44,    2), S( -42,   -4), S( -44,    4), S( -36,   -2), S( -22,  -16), S( -15,  -19), S(  13,  -40), S(   2,  -43), 
        S( -33,  -16), S( -41,   -8), S( -30,   -9), S( -28,  -12), S( -16,  -16), S(  -8,  -24), S(   0,  -34), S( -12,  -34), 
        S( -19,   -5), S( -22,   -7), S( -24,    2), S( -15,  -11), S(  -6,  -16), S(   0,  -13), S(  19,  -29), S( -14,  -26), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1218, 1497);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   5,    9), S( -14,   19), S(   4,   34), S(  46,   10), S(   5,   53), S(  45,   44), S(  31,   42), S(  -6,   36), 
        S(  -3,   25), S( -36,   66), S( -31,   85), S( -26,   82), S( -20,   98), S( -11,  106), S( -33,  101), S(  37,   80), 
        S(  12,   16), S(  17,    8), S(  -4,   59), S(  12,   44), S(   6,   79), S(  50,   90), S(  52,   86), S(  81,   18), 
        S(  -5,   53), S(  11,   23), S( -16,   58), S(   0,   51), S( -10,   72), S(  11,   46), S(  13,   77), S(  22,   53), 
        S(   5,   34), S(  -4,   41), S(   5,   13), S(   6,   38), S(  13,   19), S(   7,   23), S(  18,   39), S(  36,   17), 
        S(   3,   11), S(  18,  -10), S(   9,   22), S(  12,    4), S(  18,    4), S(  14,   26), S(  39,   -5), S(  35,  -23), 
        S(  14,   15), S(  21,  -20), S(  26,  -17), S(  31,  -16), S(  29,  -17), S(  37,  -38), S(  45,  -66), S(  63,  -49), 
        S(  23,  -19), S(  22,  -22), S(  24,  -12), S(  28,   -4), S(  29,  -23), S(  18,  -28), S(  40,   -8), S(  31,   -4), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-106, -125), S( -15,  -60), S( -15,  -27), S( -24,   -9), S( -16,   14), S(   3,    4), S(  -4,  -19), S( -23,  -53), 
        S(   1,   11), S(  38,   40), S(  34,   65), S(  44,   50), S(  27,   73), S(  41,   62), S(  32,   75), S( -19,   24), 
        S( -22,   25), S(  32,   63), S(  35,   73), S( -13,   86), S(   3,   79), S(  48,   75), S(  43,   65), S( -23,   34), 
        S( -44,   15), S(  -5,   46), S( -20,   68), S( -23,   85), S(  -5,   77), S( -18,   75), S( -36,   54), S( -63,   25), 
        S( -64,   12), S( -58,   30), S( -23,   52), S( -42,   64), S( -53,   60), S( -70,   46), S( -73,   27), S(-103,   10), 
        S( -38,   -4), S(   0,    4), S( -23,   23), S( -35,   35), S( -41,   35), S( -29,   15), S(   3,   -6), S( -47,    4), 
        S(  68,  -24), S(  48,  -22), S(  30,   -8), S(  -5,   -1), S( -14,    4), S(  14,  -10), S(  57,  -34), S(  54,  -37), 
        S(  49,  -53), S( 104,  -60), S(  73,  -37), S( -44,   -7), S(  26,  -42), S( -17,  -12), S(  75,  -59), S(  72,  -81), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  19,  -26), S( -55,   19), S( -28,   13), S( -39,    9), S( -46,   10), S( -13,  -18), 
        S( -27,   11), S( -39,  -18), S( -73,    9), S( -76,   -6), S( -59,   13), S( -87,    0), S(-100,  -50), S(-123,  -46), 
        S(-134,  -47), S(-134,  -45), S(-143,  -53), S(-173,  -85), S(-223, -118), S(-207,  -79), S(-225, -112), S(-234, -192), 
        S(-203, -178), S(-277, -197), S(-290, -268), S(-200, -174), S(-258, -140), S(-214, -164), S(-135,  -45), S(-223, -149), 
        S(-211, -169), S(-353, -262), S(-327, -286), S(  64,  -28), S(-336, -173), S(-224, -172), S(-276, -201), S(-215, -191), 
        S(-186, -202), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    4);
}
