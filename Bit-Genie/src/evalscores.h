
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

namespace PawnEval
{
    constexpr int stacked = S( -7, -19);

    constexpr int isolated = S(-23, -10);

    constexpr int passed_connected = S( 12,  19);

    constexpr int value = S(115, 155);

    constexpr int psqt[64]
    {
        S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), 
        S(  6,  22), S(-13,  15), S(-44, -12), S(-66, -28), S(-40, -12), S(-38,  -8), S(-35,  11), S(-58,  38), 
        S(-17,  68), S( -6,  48), S(  2,  11), S(-11, -46), S(  5, -44), S( 62, -16), S( 48,  13), S( 14,  30), 
        S(-25,  38), S(-16,  17), S( -6,   1), S( -5, -19), S( 14, -28), S(  7, -11), S(  0,   7), S( -9,  14), 
        S(-34,   9), S(-27,   0), S(-11, -18), S(  4, -22), S(  5, -19), S( -1, -16), S(-16,  -4), S(-21, -13), 
        S(-35,   3), S(-27,  -1), S(-13, -15), S( -9, -18), S(  7, -14), S( -4,  -6), S(  6, -17), S(-15, -12), 
        S(-33,   4), S(-26,  -5), S(-18,  -8), S(-14, -17), S( -2,  -5), S( 10, -11), S( 11, -22), S(-22, -18), 
        S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), 
    };

    constexpr int passed[64]
    {
        S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), 
        S(258, 254), S(247, 250), S(259, 257), S(268, 264), S(254, 250), S(250, 248), S(282, 284), S(290, 287), 
        S(157, 154), S(153, 158), S(106, 153), S( 94, 161), S( 89, 143), S(114, 136), S(147, 150), S(145, 160), 
        S( 72, 101), S( 51,  97), S( 29,  60), S( 23,  53), S( 12,  55), S( 41,  57), S( 68,  93), S( 69,  89), 
        S( 24,  57), S( 17,  33), S( -4,  28), S(-15,  11), S(-15,  13), S(  3,  22), S( 24,  43), S( 37,  46), 
        S( -2,  14), S(-21,   1), S(-20,   1), S(-25,   5), S(-30,  -8), S(-20,  -7), S(-13, -12), S(  8,  -6), 
        S( -2,   7), S(-10,   1), S(-17,  -4), S(  8,  21), S( 13,  17), S(-14, -11), S( -1, -15), S( 19, -10), 
        S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), 
    };

    constexpr int passer_blocked[64]
    {
        S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), 
        S(121, 126), S(137, 136), S(142, 141), S(152, 154), S(125, 126), S( 96,  99), S( 72,  75), S( 71,  75), 
        S( 69,  72), S( 58,  52), S( 63,  61), S( 64,  67), S( 49,  60), S( 24,  29), S( 11,  20), S(  7,  43), 
        S( 35,  34), S( 45,  20), S( 30,  18), S( 25,  19), S(  8,  14), S( 11,  10), S( 15,   6), S(  2,   2), 
        S( 30,  12), S( 15,   0), S( -1,   1), S( -7,   7), S( -4,   6), S( -8,  -9), S(  1,  -2), S(  5,   4), 
        S(  6,  -5), S( -2,  -8), S(-15,  -3), S(-21,   5), S(-18,   0), S( -2,   0), S( -6, -12), S( -6,  -6), 
        S( -1, -19), S( -2, -12), S(-13,  -5), S( -6,  15), S(  6,  14), S( -7,  -6), S( -1, -10), S(  3, -17), 
        S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), S(  0,   0), 
    };

    constexpr int passed_tempo = S( 21,  48);
}

namespace KnightEval
{
    constexpr int value = S(413, 429);

    constexpr int psqt[64]
    {
        S(-94, -82), S(-37, -36), S( -5,  -7), S(-22, -19), S( -6,  -2), S(-46, -45), S(-46, -47), S(-101, -101), 
        S(-26, -10), S(-16,   7), S(  9,  -1), S(  5,  10), S(  0,  -4), S( 35,  -5), S( -2,  -4), S(-36, -25), 
        S(-26, -20), S( 12,   0), S( 13,   6), S( 31,  17), S( 50,  -4), S( 52,  15), S( 24,  11), S( -3,   0), 
        S(  0,   1), S(  7,   6), S( 27,  14), S( 52,  19), S( 29,  16), S( 44,  21), S( 12,   9), S( 27,  11), 
        S( -5,  -5), S( -4,  -6), S(  9,  12), S( 18,  23), S( 24,  18), S( 18,  11), S( 15,  14), S(  7,   3), 
        S(-30, -14), S(-17,  -5), S(-10, -11), S( -1,   5), S(  9,   6), S( -7,  -9), S(  6,  -3), S(-17, -21), 
        S(-15, -12), S(-18,  -9), S(-21, -14), S(  1, -13), S( -5, -11), S( -7, -21), S(-11, -10), S( -2,  -7), 
        S(-34, -34), S(-16, -14), S(-31, -23), S(-19, -15), S(-17,  -8), S(-14, -20), S(-12, -25), S(-18, -11), 
    };

    constexpr int mobility[9]
    {
        S(-125, -115), S(-49, -60), S(-11,  17), S(  3,  44), S( 20,  44), S( 24,  46), S( 34,  48), S( 44,  41), 
        S( 54,  34), 
    };
}

namespace BishopEval
{
    constexpr int value = S(446, 403);

    constexpr int psqt[64]
    {
        S(-20, -10), S(-13, -12), S(-30, -17), S(-14,  -2), S(-13, -14), S(-12,  -7), S( -4,  -1), S(-19, -14), 
        S(-19, -15), S(-10,   1), S( -8,  -2), S(-25, -21), S( -4,  -3), S(-16,   4), S(-11,   0), S(-22, -19), 
        S(  3,   4), S(  6,   3), S(  7,   2), S(  9,   2), S(  4,   0), S( 28,  17), S( 22,   5), S( 28,   5), 
        S( -1,   2), S(  1,  14), S(  6,   8), S( 20,  23), S( 22,  10), S( 10,  15), S(  5,  -7), S(-10,   2), 
        S( -2,   1), S( -9,   1), S( -6,  21), S( 15,  16), S( 12,   9), S( -3,   7), S( -5,  -8), S(  8,   5), 
        S(  1,   3), S(  8,  19), S(  4,   9), S(  4,   4), S(  5,  11), S(  9,   7), S(  8,   1), S( 12,   0), 
        S( 16,   5), S(  8,  -6), S(  9, -11), S( -5,  -1), S(  4,   1), S(  8,  -2), S( 27,   6), S( 10,  -1), 
        S(  9, -11), S( 18,   2), S(  8,   1), S(  3,   0), S(  4,   0), S(  1,  19), S(-10,  -7), S( 10,   4), 
    };

    constexpr int mobility[14]
    {
        S(-80, -70), S(-76, -67), S(-34,  11), S(-16,  50), S(  1,  47), S(  9,  56), S( 26,  74), S( 37,  78), 
        S( 43,  74), S( 46,  78), S( 50,  77), S( 49,  63), S( 53,  36), S( 61,  39), 
    };
}

namespace RookEval
{
    constexpr int value = S(606, 795);

    constexpr int psqt[64]
    {
        S( 28,  17), S( 14,  26), S( 44,  16), S( 27,  29), S( 17,  20), S( 15,  15), S( 14,  15), S( 32,   8), 
        S(  5,  21), S(  1,  43), S( 20,  41), S( 22,  30), S( 17,  23), S( 22,  18), S( 23,  16), S( 31,  15), 
        S(  1,  12), S( 11,  12), S(  6,  23), S(  3,   7), S( 16,   3), S( 28,   1), S( 38,   4), S( 16,  -1), 
        S(  0,   9), S( -3,   9), S(  3,  13), S(  0,   4), S( -3,  -1), S(  3,  14), S(  7,   0), S(  2,  -2), 
        S(-11,  -2), S(-14,   0), S(-12,   5), S( -8,   1), S( -8,  -5), S(-14,  -2), S( -4,  -1), S(-11, -16), 
        S(-17,  -4), S(-24,  10), S(-17,  -4), S(-11, -15), S(-12,  -6), S( -5,  -4), S(  5, -13), S( -6, -19), 
        S(-19, -12), S(-21,  -5), S(-12,  -7), S(-11,  -6), S( -5,  -7), S( -3,  -6), S( -1, -11), S(-20,   0), 
        S( -6,  18), S( -7,   4), S( -6,  17), S(  0, -10), S(  4,  -8), S(  9,   3), S( 17, -36), S(-10, -10), 
    };

    constexpr int mobility[15]
    {
        S(-57, -69), S(-28, -58), S(-15,  52), S(  0,  72), S( 10,  84), S( 15,  76), S( 18,  75), S( 22,  83), 
        S( 27,  69), S( 32,  67), S( 35,  70), S( 38,  63), S( 38,  65), S( 43,  53), S( 45,  32), 
    };

    constexpr int open_file = S( 22,  17);

    constexpr int semi_open_file = S( 22,  17);
}

namespace QueenEval
{
    constexpr int value = S(1313, 1510);

    constexpr int psqt[64]
    {
        S(  5,   3), S( 22,  38), S( 41,  49), S( 41,  42), S( 57,  66), S( 49,  48), S( 43,  41), S( 34,  57), 
        S(  6, -15), S( -7,  11), S( 11,  23), S( 24,  43), S( 33,  47), S( 41,  70), S( 21,  57), S( 68,  58), 
        S( 14,   3), S(  9,  22), S( 17,  18), S( 28,  34), S( 35,  57), S( 71,  73), S( 67,  72), S( 73,  70), 
        S(  5,   6), S( 17,  11), S(  6,  12), S( 14,  23), S( 18,  26), S( 25,  38), S( 39,  50), S( 35,  27), 
        S( 12,  13), S(  7,  13), S(  9,  17), S( 18,  14), S( 17,  23), S( 17,  25), S( 28,  32), S( 33,  26), 
        S(  4,   2), S( 16,  13), S( 16,  21), S( 15,  20), S( 19,  18), S( 22,  21), S( 33,  29), S( 24,  23), 
        S( 10,  -8), S( 15,   1), S( 22,  14), S( 27,  19), S( 26,  15), S( 24,  10), S( 22,   3), S( 32,   5), 
        S( 13,  16), S( 14,   5), S( 21,  20), S( 28,  14), S( 25,  14), S( 11,  -9), S(  4, -10), S(-13, -33), 
    };

    constexpr int mobility[28]
    {
        S(-62, -48), S(-70, -36), S(-66, -49), S(-45, -50), S(-27, -46), S(  4, -45), S( -7, -37), S(-10, -23), 
        S(  0,  -6), S(  6,  17), S( 12,  28), S( 17,  35), S( 23,  41), S( 28,  47), S( 31,  52), S( 34,  62), 
        S( 35,  69), S( 40,  72), S( 41,  73), S( 44,  73), S( 49,  76), S( 53,  63), S( 56,  69), S( 65,  66), 
        S( 60,  85), S( 79,  84), S(104, 111), S(108, 131), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-92, -75), S(-32, -27), S(-16,  -2), S(-23, -24), S(-23,   0), S(  7,  12), S(  0,  -1), S(-14,  -8), 
        S( -7, -12), S( 23,  30), S( 13,  18), S( 23,   9), S( 19,  23), S( 34,  30), S( 17,  18), S(  0,   6), 
        S( 11,  11), S( 22,  52), S( 28,  64), S( 20,  78), S( 22,  72), S( 51,  55), S( 48,  48), S(  6,  14), 
        S( -9,  -3), S( 23,  33), S( 29,  69), S( 45,  84), S( 57,  82), S( 34,  77), S( 27,  46), S( -2,   7), 
        S(-22, -11), S(  0,  21), S( 22,  51), S( 34,  67), S( 22,  64), S( 11,  47), S(  3,  24), S(-18, -15), 
        S(-16, -15), S(  0,   6), S(  7,  29), S(  9,  39), S( -3,  44), S( -4,  24), S( -1,   6), S(-18,  -7), 
        S( 23, -19), S( 16,   4), S( 13,  10), S(-17,  29), S(-19,  32), S( -4,  13), S( 24, -23), S( 17, -33), 
        S(  3, -58), S( 56, -66), S( 36, -25), S(-47,  29), S(  0, -29), S(-27,   0), S( 31, -63), S( 22, -97), 
    };

    constexpr int danger_tempo = S(-44,   0);

    constexpr int safety_table[100]
    {
        S( 13,  13), S(  0,   0), S(  7,  -7), S( -7,  13), S( -1,  16), S( -6,   1), S(-22,  17), S(  4,  -9), 
        S(-10,  -3), S(-22, -31), S(-60, -53), S(-50, -58), S(-28, -50), S(-64, -54), S(-63, -92), S(-95, -75), 
        S(-85, -81), S(-81, -81), S(-88, -87), S(-119, -107), S(-183, -125), S(-158, -142), S(-163, -139), S(-170, -223), 
        S(-152, -142), S(-205, -126), S(-263, -223), S(-131, -120), S(-234, -151), S(-143, -127), S(-79, -16), S(-175, -122), 
        S(-172, -145), S(-330, -250), S(-287, -268), S(107,  -8), S(-323, -162), S(-197, -161), S(-256, -196), S(-210, -189), 
        S(-189, -205), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S(-96, -40), S(-336, -191), S(-126, -36), 
        S(-400, -400), S(-400, -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  0,   4);
}
