
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 107,  146);

    constexpr int stacked = S(  -6,  -15);

    constexpr int isolated = S( -24,  -16);

    constexpr int passed_connected = S(  20,   12);

    constexpr int passed_tempo = S(  38,   44);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -22,   42), S( -69,   21), S( -62,   -6), S( -48,  -59), S( -41,  -37), S( -78,   -3), S( -63,    3), S( -99,   35), 
        S( -27,   33), S( -23,   12), S(   3,    6), S(  18,   -9), S(  29,   -3), S(  77,   -6), S(  48,   14), S(  14,   28), 
        S( -44,   21), S( -26,    3), S(  -5,   -5), S(  -4,  -16), S(  22,  -21), S(  10,  -13), S(  -2,   -7), S( -12,   -3), 
        S( -51,   -2), S( -34,  -10), S( -10,  -17), S(   7,  -13), S(  11,  -16), S(   2,  -18), S( -16,  -17), S( -23,  -21), 
        S( -51,   -4), S( -35,  -11), S( -14,  -12), S(  -8,  -13), S(  10,   -8), S(  -3,   -9), S(  12,  -23), S( -15,  -19), 
        S( -49,   -3), S( -33,  -15), S( -21,   -9), S( -14,  -10), S(  -1,    1), S(  12,  -10), S(  21,  -29), S( -23,  -25), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 278,  228), S( 188,  280), S( 218,  298), S( 239,  285), S( 238,  282), S( 197,  253), S( 245,  302), S( 255,  261), 
        S(  97,  191), S(  94,  205), S(  50,  162), S(  37,  118), S(  29,  114), S(  46,  170), S( 103,  187), S(  81,  185), 
        S(  24,  111), S(   1,  109), S( -19,   66), S( -11,   50), S( -25,   53), S( -11,   71), S(   3,  113), S(   7,  115), 
        S( -13,   60), S( -20,   40), S( -42,   24), S( -41,    3), S( -52,   16), S( -47,   35), S( -34,   61), S(  -5,   60), 
        S( -16,    1), S( -56,   -3), S( -42,  -13), S( -49,  -17), S( -55,  -20), S( -58,  -15), S( -64,   14), S(  -6,    3), 
        S( -14,   -2), S( -26,   -6), S( -37,  -14), S( -27,  -16), S( -30,  -28), S( -33,  -18), S( -15,   -8), S(   6,   -4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  84,  163), S( 147,  111), S( 176,   98), S( 190,  114), S( 137,   85), S( 129,  100), S(  87,   54), S(  52,   94), 
        S(  67,   79), S( 110,   57), S( 103,   12), S(  42,   23), S(  31,   11), S(  62,   16), S(  41,    8), S( -26,   14), 
        S(  47,   53), S(  55,   42), S(  26,   29), S(  21,   23), S(  -4,   24), S(   2,   21), S(  26,   26), S(   5,   32), 
        S(  41,   30), S(  24,   22), S( -12,   12), S( -18,   14), S( -22,   21), S( -21,   19), S(   5,   26), S( -15,   28), 
        S(  21,  -12), S(  18,   16), S( -29,    7), S( -38,   10), S( -45,   14), S( -29,   17), S( -34,   32), S( -22,   19), 
        S(  14,  -10), S(   6,   11), S( -26,   20), S( -30,   23), S(  -7,    2), S( -11,    0), S(  16,  -10), S(   8,    6), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 395,  431);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-139,  -52), S( -63,  -35), S( -34,  -11), S( -56,   -8), S( -18,   -4), S( -78,  -75), S( -61,  -55), S(-103,  -67), 
        S( -44,   -9), S( -39,   14), S(  -3,    5), S(  43,  -13), S( -17,  -16), S(  75,  -31), S(  -5,   -5), S( -21,  -23), 
        S( -32,   -8), S(  21,   -2), S(  14,   18), S(  33,   10), S(  79,  -16), S(  86,   -9), S(  45,   -9), S(  15,  -18), 
        S(   0,   15), S(   1,   15), S(  26,   18), S(  56,   15), S(  29,   12), S(  49,   19), S(  10,   11), S(  41,  -17), 
        S( -12,    4), S(  -6,   11), S(   3,   15), S(  11,   21), S(  21,   20), S(  15,    4), S(  12,    7), S(   4,    0), 
        S( -41,  -13), S( -25,    0), S( -12,  -13), S(  -9,   16), S(  10,    5), S(  -8,  -13), S(   5,  -10), S( -22,  -13), 
        S( -33,    4), S( -30,   -9), S( -30,   -8), S(  -1,  -12), S(  -8,  -14), S( -11,  -19), S( -10,    0), S( -12,   23), 
        S( -48,   -1), S( -22,  -15), S( -55,   -1), S( -30,   -5), S( -25,   -9), S( -19,  -14), S( -18,  -10), S( -38,   -2), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 431,  405);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -42,   25), S( -42,   29), S( -28,   19), S( -57,   10), S( -53,   18), S( -48,   10), S( -15,   -6), S( -42,   -1), 
        S( -33,    8), S( -29,   10), S( -29,   16), S( -33,   11), S( -19,   -4), S( -36,    0), S( -29,    1), S( -20,   -8), 
        S(   4,   22), S(  18,   14), S(   6,    8), S(  22,   -9), S(   6,   -8), S(  58,    4), S(  26,   10), S(  34,    9), 
        S( -16,   26), S(  -6,   23), S(   7,    5), S(  19,   16), S(  30,    9), S(   5,    7), S(   5,    4), S( -26,   28), 
        S(  -6,   23), S( -15,   11), S( -10,   11), S(  15,   16), S(  15,    7), S(  -4,    1), S( -11,    2), S(  11,   -3), 
        S(   5,   -6), S(   6,   16), S(   2,   12), S(   3,    6), S(   3,   14), S(   8,    4), S(  12,   -3), S(  16,    7), 
        S(  18,   10), S(  11,    0), S(  14,  -13), S(  -6,    0), S(   5,    1), S(  14,  -12), S(  34,    3), S(  21,  -26), 
        S(  18,   11), S(  25,  -13), S(   8,    2), S(  -6,   12), S(   2,   18), S(  -6,   22), S(  12,   -5), S(  34,  -16), 
    };
}

namespace RookEval
{
    constexpr int value = S( 544,  776);

    constexpr int semi_open_file = S(  30,   -1);

    constexpr int open_file[9]
    {
        S(   0,    0), S(  14,   16), S(  17,   15), S(  17,   14), S(  16,    8), S(  14,  -12), S(   4,  -12), S(   2,   -2), 
        S(  -3,   -6), 
    };

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   8,   15), S( -27,   29), S(  18,   27), S( -14,   37), S( -15,   27), S(  16,   29), S(   3,   19), S(  49,    4), 
        S( -19,   23), S( -35,   45), S( -16,   51), S(   7,   34), S( -13,   37), S(   8,   29), S(  13,   27), S(  65,   -3), 
        S( -36,   25), S(  -4,   23), S( -20,   31), S( -22,   12), S(  25,   -8), S(  29,   -2), S(  92,  -17), S(  48,  -26), 
        S( -38,   24), S( -43,   29), S( -31,   25), S( -24,   11), S( -21,   -4), S( -14,   -3), S(   7,   -4), S(  -6,   -3), 
        S( -44,   13), S( -46,    8), S( -48,    9), S( -36,    9), S( -30,    2), S( -45,    8), S(   3,  -30), S( -14,  -16), 
        S( -46,    3), S( -44,   -5), S( -44,    3), S( -36,   -3), S( -22,  -16), S( -17,  -20), S(  12,  -41), S(   0,  -43), 
        S( -34,  -16), S( -42,   -9), S( -29,  -10), S( -27,  -13), S( -16,  -17), S( -10,  -24), S(  -2,  -35), S( -14,  -34), 
        S( -21,   -4), S( -23,   -7), S( -24,    1), S( -15,  -12), S(  -6,  -16), S(  -2,  -13), S(  17,  -30), S( -16,  -25), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1246, 1469);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   7,   10), S(  -9,   15), S(   8,   30), S(  42,   14), S(  15,   45), S(  48,   46), S(  35,   40), S(  -1,   33), 
        S(  -2,   24), S( -32,   59), S( -25,   75), S( -18,   73), S( -12,   87), S(  -4,   97), S( -27,   90), S(  42,   73), 
        S(  13,   16), S(  18,    9), S(  -2,   54), S(  14,   40), S(   9,   75), S(  53,   86), S(  56,   82), S(  81,   24), 
        S(  -2,   47), S(  13,   24), S( -14,   54), S(   2,   47), S(  -8,   66), S(  12,   44), S(  15,   74), S(  24,   51), 
        S(   6,   35), S(  -3,   40), S(   6,   12), S(   7,   36), S(  15,   17), S(   7,   23), S(  19,   38), S(  38,   18), 
        S(   4,   11), S(  19,   -8), S(  10,   22), S(  13,    5), S(  20,    4), S(  15,   25), S(  40,   -5), S(  35,  -16), 
        S(  17,   12), S(  22,  -18), S(  27,  -16), S(  32,  -15), S(  31,  -17), S(  38,  -35), S(  43,  -54), S(  62,  -36), 
        S(  23,  -14), S(  23,  -19), S(  26,  -11), S(  30,   -4), S(  31,  -24), S(  19,  -28), S(  39,   -3), S(  30,   -3), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-103, -113), S( -19,  -53), S( -16,  -24), S( -23,  -11), S( -17,   11), S(   4,    4), S(  -3,  -15), S( -21,  -42), 
        S(   0,    8), S(  35,   37), S(  33,   58), S(  42,   45), S(  30,   66), S(  42,   60), S(  33,   69), S( -13,   22), 
        S( -14,   23), S(  32,   57), S(  36,   68), S(  -5,   81), S(   8,   75), S(  51,   70), S(  46,   61), S( -16,   32), 
        S( -35,   13), S(   2,   42), S(  -8,   63), S(  -6,   79), S(   9,   74), S(  -6,   70), S( -22,   50), S( -49,   22), 
        S( -55,   10), S( -45,   26), S( -15,   49), S( -26,   60), S( -38,   56), S( -54,   41), S( -58,   23), S( -83,    6), 
        S( -39,   -4), S(  -7,    4), S( -29,   23), S( -39,   34), S( -45,   34), S( -35,   15), S(  -5,   -5), S( -54,    5), 
        S(  60,  -22), S(  39,  -20), S(  21,   -7), S( -14,    1), S( -22,    6), S(   5,   -8), S(  48,  -32), S(  45,  -34), 
        S(  41,  -49), S(  95,  -56), S(  64,  -34), S( -53,   -4), S(  18,  -38), S( -25,   -9), S(  67,  -55), S(  63,  -78), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  18,  -24), S( -52,   18), S( -28,   14), S( -38,    8), S( -44,    9), S( -12,  -21), 
        S( -25,    9), S( -38,  -22), S( -69,   -7), S( -73,  -21), S( -56,   -3), S( -82,  -15), S( -96,  -64), S(-117,  -57), 
        S(-128,  -58), S(-126,  -56), S(-135,  -65), S(-166,  -94), S(-215, -124), S(-199,  -95), S(-214, -122), S(-227, -202), 
        S(-199, -175), S(-263, -182), S(-290, -258), S(-186, -163), S(-255, -145), S(-201, -163), S(-122,  -39), S(-213, -144), 
        S(-202, -163), S(-348, -259), S(-318, -283), S(  75,  -23), S(-334, -171), S(-218, -170), S(-271, -200), S(-214, -190), 
        S(-186, -203), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    4);
}
