
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))


namespace PawnEval
{
    constexpr int value = S( 127,  146);

    constexpr int stacked = S( -10,  -20);

    constexpr int isolated = S( -36,    9);

    constexpr int passed_connected = S(  31,    9);

    constexpr int psqt[64]
    {
        S(  14,    9), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(   6,   22), S(  -6,    6), S( -37,  -24), S( -56,  -34), S( -49,   -9), S( -48,  -16), S( -33,    5), S( -53,   27), 
        S(  -7,   53), S(   9,   30), S(  13,   -6), S(  -8,  -58), S(  -3,  -30), S(  51,   -1), S(  33,   30), S(   6,   42), 
        S( -14,   27), S(   0,    0), S(   7,  -18), S(   1,  -35), S(  12,  -26), S(  -1,    6), S(  -5,    8), S(  -3,    2), 
        S( -28,   -6), S( -12,  -18), S(   1,  -37), S(   5,  -23), S(   2,   -8), S(  -7,   -5), S( -16,   -7), S( -14,  -29), 
        S( -31,   -9), S( -12,  -18), S(   0,  -33), S(  -2,  -26), S(  15,  -25), S(   2,  -11), S(  13,  -32), S( -26,    0), 
        S( -34,    2), S( -12,  -21), S(  -8,  -24), S(  -6,  -32), S(   1,  -19), S(  16,  -26), S(   7,  -19), S( -37,   -2), 
        S(  -3,   -2), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(  -5,  -15), S(   4,   -4), S(  -3,   -6), S(   4,   -7), S(  -1,   -4), S(  -8,   -9), S(   0,   -1), 
        S( 263,  245), S( 251,  235), S( 266,  242), S( 270,  261), S( 252,  261), S( 242,  240), S( 270,  300), S( 285,  298), 
        S( 165,  159), S( 163,  146), S( 119,  158), S( 108,  171), S(  90,  160), S( 100,  154), S( 132,  166), S( 146,  174), 
        S(  71,  113), S(  76,   92), S(  52,   49), S(  26,   68), S(   9,   74), S(  30,   71), S(  55,  111), S(  70,   97), 
        S(  25,   72), S(  42,   21), S(  20,   29), S(   3,    9), S(   2,    3), S(  10,   28), S(  28,   42), S(  34,   54), 
        S(   5,   15), S(  -6,  -14), S(   1,  -11), S( -12,    7), S( -13,   -3), S( -16,    4), S(  -5,   -1), S(   7,    2), 
        S(   8,   -3), S(   6,   -9), S(  -5,  -14), S(  18,   10), S(  11,   31), S( -14,   -3), S(  -5,   -7), S(  31,  -12), 
        S(  12,    6), S(   5,    3), S(   2,  -15), S(   8,  -12), S(  10,  -10), S(   8,  -11), S(   6,    5), S(   7,  -12), 
    };

    constexpr int passer_blocked[64]
    {
        S(  -2,   -4), S(   5,  -13), S(  11,   -6), S(  12,    4), S(   4,   -8), S(   7,   -8), S(   0,  -10), S(  -7,   -1), 
        S( 118,  118), S( 144,  121), S( 142,  127), S( 157,  143), S( 135,  133), S(  88,   93), S(  64,   75), S(  62,   72), 
        S(  70,   65), S(  67,   45), S(  68,   68), S(  55,   77), S(  36,   76), S(  11,   42), S(   0,   36), S(   4,   59), 
        S(  31,   51), S(  49,    9), S(  37,    9), S(  11,   25), S(  -7,   25), S(  -4,   28), S(   2,   17), S(   7,   16), 
        S(  34,   20), S(  18,    4), S(   9,   -9), S(  -9,  -10), S( -16,   13), S( -22,    7), S(  -1,   -2), S(   4,   14), 
        S(  -5,    2), S( -16,    1), S( -15,   -4), S( -19,    5), S( -19,   13), S(   6,   -2), S( -16,    0), S( -13,    9), 
        S(  -5,   -4), S(   0,    4), S( -15,    9), S(  -9,   32), S(  11,   16), S(  -8,    5), S( -12,    5), S(  -5,   -1), 
        S(  -8,   16), S(  10,   16), S(  -6,   16), S(   1,   11), S(   1,    7), S(   9,    8), S(   3,  -14), S(   3,   10), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 409,  436);

    constexpr int mobility[9]
    {
        S(-133, -116), S( -46,  -70), S( -21,    8), S(  -4,   34), S(  18,   35), S(  33,   50), S(  37,   49), S(  37,   52), 
        S(  68,   21), 
    };

    constexpr int psqt[64]
    {
        S( -79,  -99), S( -23,  -50), S(   4,   -8), S( -11,  -24), S(   3,    1), S( -43,  -36), S( -56,  -33), S( -87, -113), 
        S( -15,   -8), S(  -4,   -5), S(  15,  -11), S(  -4,   24), S(  -8,    9), S(  24,    9), S( -12,   10), S( -23,  -32), 
        S( -12,  -29), S(  22,  -12), S(  20,   -1), S(  30,   14), S(  36,   -2), S(  56,   26), S(  30,   14), S(   9,    0), 
        S(  11,  -10), S(  16,  -10), S(  36,    2), S(  61,   14), S(  41,    5), S(  36,   29), S(  23,   14), S(  37,    3), 
        S(   3,  -19), S(   6,  -17), S(  18,    6), S(  19,   17), S(  13,   25), S(   7,   28), S(  10,   26), S(  17,   -2), 
        S( -19,  -24), S( -10,  -14), S(  -2,  -20), S(  -3,    5), S(  -1,   12), S( -13,   -8), S(  10,  -15), S( -23,  -37), 
        S( -20,  -11), S( -15,  -25), S( -32,    2), S( -11,    1), S( -10,    2), S(  -9,   -3), S( -20,  -25), S(  -5,  -17), 
        S( -44,  -45), S( -25,  -25), S( -40,  -28), S( -30,  -28), S( -15,   -4), S(  -8,  -11), S( -17,  -27), S( -20,  -25), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 458,  381);

    constexpr int mobility[14]
    {
        S( -71,  -85), S( -73,  -79), S( -26,   -1), S( -18,   36), S(   9,   36), S(  18,   70), S(  24,   64), S(  32,   66), 
        S(  53,   63), S(  44,   68), S(  51,   64), S(  55,   68), S(  60,   42), S(  61,   51), 
    };

    constexpr int psqt[64]
    {
        S( -11,  -20), S(  -6,  -17), S( -19,  -28), S(  -8,  -14), S(  -2,  -25), S(  -5,  -16), S(   2,  -14), S(  -9,   -2), 
        S(  -9,  -21), S(   0,   -9), S( -10,  -13), S( -16,  -29), S(  -2,  -12), S( -18,   -7), S(   0,   -6), S( -15,   -8), 
        S(   8,    7), S(   6,   -1), S(  10,   -8), S(   4,   -7), S(   3,   -6), S(  35,   12), S(  18,    8), S(  24,   12), 
        S(   9,   16), S(   4,   25), S(  -3,   14), S(   8,   30), S(   7,   21), S(  -1,   28), S(  -7,    4), S(  -6,   17), 
        S(   6,   16), S(  -3,   14), S( -12,   23), S(  14,   25), S(   3,   21), S(   6,   22), S(   1,    3), S(  17,   18), 
        S(  -6,    1), S(   2,   21), S(   2,    9), S(   7,    5), S(   9,   12), S(   5,    6), S(   5,    0), S(   5,   -1), 
        S(  23,    7), S(  16,   -1), S(  23,   -3), S(   5,    4), S(  16,    6), S(  16,    1), S(  39,   13), S(  13,   -2), 
        S(  16,  -15), S(  31,    8), S(  22,    7), S(  18,    5), S(  18,    6), S(   9,   22), S(  -7,   -5), S(  16,    2), 
    };
}

namespace RookEval
{
    constexpr int value = S( 615,  787);

    constexpr int open_file = S(  32,   17);

    constexpr int semi_open_file = S(  35,   18);

    constexpr int mobility[15]
    {
        S( -45,  -76), S( -26,  -67), S(  -3,   46), S(  10,   64), S(  15,   76), S(  24,   68), S(  30,   68), S(  33,   79), 
        S(  34,   57), S(  44,   54), S(  47,   56), S(  44,   50), S(  46,   52), S(  47,   46), S(  52,   20), 
    };

    constexpr int psqt[64]
    {
        S(  34,    2), S(  23,   10), S(  59,    0), S(  39,   12), S(  18,    4), S(  21,   -2), S(   2,   20), S(  20,   -6), 
        S(  -5,    3), S(   9,   23), S(  32,   21), S(  27,   10), S(   4,    8), S(   9,    5), S(  15,   27), S(  22,   34), 
        S( -14,   17), S(   8,   -6), S(  -3,    7), S(  12,  -11), S(  -4,   19), S(  26,   18), S(  38,    4), S(  15,   -1), 
        S(   0,    7), S(  -3,    8), S(   3,   12), S(   0,    4), S(  -2,   -1), S(   4,   14), S(   5,    0), S(   2,   -2), 
        S( -11,   -2), S( -14,    0), S( -12,    5), S(  -8,    1), S(  -8,   -5), S( -12,   -2), S(  -8,    3), S(  -2,  -26), 
        S(  -7,  -16), S( -30,    4), S(  -4,   -8), S( -21,  -18), S(  -3,   -7), S( -17,    0), S(  13,  -12), S( -18,  -27), 
        S( -20,  -21), S( -19,    1), S(  -6,  -13), S( -12,  -15), S(  -1,  -12), S(   6,  -21), S(  15,  -23), S( -16,  -14), 
        S(   9,    6), S(   2,    8), S(   7,    2), S( -13,    0), S(  16,  -22), S(  -6,   11), S(  27,  -50), S( -26,   -1), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1322, 1476);

    constexpr int mobility[28]
    {
        S( -74,  -34), S( -65,  -39), S( -66,  -41), S( -33,  -64), S( -36,  -62), S(  20,  -61), S(   3,  -52), S(   5,  -39), 
        S(  10,  -14), S(  19,    1), S(  15,   22), S(  28,   19), S(  14,   51), S(  37,   32), S(  18,   60), S(  48,   54), 
        S(  30,   74), S(  55,   60), S(  52,   70), S(  61,   60), S(  60,   66), S(  68,   46), S(  59,   55), S(  79,   50), 
        S(  70,   74), S(  95,   68), S( 109,   98), S( 115,  115), 
    };

    constexpr int psqt[64]
    {
        S(   9,  -11), S(  40,   23), S(  46,   37), S(  54,   30), S(  72,   64), S(  62,   36), S(  55,   36), S(  58,   45), 
        S(   9,  -29), S(   5,  -19), S(   2,    7), S(  37,   27), S(  45,   37), S(  54,   55), S(  26,   42), S(  78,   44), 
        S(  13,  -12), S(   8,    9), S(  18,    4), S(  27,   23), S(  40,   48), S(  81,   63), S(  78,   61), S(  77,   78), 
        S(   8,   -8), S(  31,   -6), S(   0,   -3), S(  25,    6), S(  25,   12), S(  35,   23), S(  48,   34), S(  30,   18), 
        S(   9,   -1), S(  -3,    3), S(   4,    7), S(  13,   12), S(  13,   26), S(   9,   39), S(  23,   32), S(  28,   40), 
        S(  13,   -5), S(  16,   13), S(  16,   21), S(  16,   20), S(  19,   18), S(  22,   21), S(  33,   29), S(  24,   23), 
        S(  10,   -8), S(  15,    1), S(  23,   15), S(  27,   19), S(  26,   16), S(  24,   11), S(  22,    3), S(  32,    5), 
        S(  13,   16), S(  13,    5), S(  21,   20), S(  29,   15), S(  26,   14), S(  11,   -9), S(   1,  -10), S( -15,  -33), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S( -92,  -75), S( -32,  -27), S( -18,   -6), S( -12,   -8), S( -16,   -7), S(  11,   -3), S(   4,   -9), S( -10,  -16), 
        S(  -9,  -14), S(  11,   43), S(   3,   35), S(  23,    9), S(  19,   23), S(  34,   30), S(  17,   18), S(   0,    6), 
        S(  11,   11), S(  27,   61), S(  25,   70), S(  25,   64), S(  18,   83), S(  49,   63), S(  43,   55), S(  -4,   27), 
        S( -16,   14), S(  10,   50), S(  19,   86), S(  32,  104), S(  46,  100), S(  19,   91), S(  27,   45), S(  -2,    7), 
        S( -22,  -11), S(  10,    8), S(  20,   34), S(  22,   50), S(  28,   51), S(  17,   37), S(  13,   12), S( -12,  -13), 
        S( -13,   -5), S(   6,   16), S(   8,   44), S(  14,   48), S(  -5,   62), S(  -8,   42), S(  -1,    6), S( -18,   -7), 
        S(  23,  -19), S(  16,    4), S(  13,   11), S( -17,   32), S( -20,   32), S(  -4,   13), S(  22,  -22), S(  17,  -33), 
        S(   2,  -58), S(  55,  -62), S(  36,  -24), S( -44,   30), S(   2,  -27), S( -24,    8), S(  46,  -77), S(  37, -115), 
    };

    constexpr int safety_table[100]
    {
        S(  28,   -3), S(  16,  -15), S( -28,   -4), S(  -9,   13), S( -26,   18), S( -18,    2), S( -31,   15), S( -15,   -8), 
        S( -26,  -10), S( -46,  -35), S( -67,  -64), S( -72,  -71), S( -52,  -63), S( -72,  -67), S( -90, -104), S(-100,  -87), 
        S( -93,  -90), S( -97,  -93), S( -97,  -94), S(-149, -122), S(-194, -138), S(-165, -151), S(-173, -152), S(-195, -233), 
        S(-163, -156), S(-210, -135), S(-268, -232), S(-134, -126), S(-237, -157), S(-147, -134), S( -82,  -21), S(-177, -125), 
        S(-174, -148), S(-331, -253), S(-287, -269), S( 107,   -8), S(-323, -162), S(-197, -161), S(-256, -196), S(-210, -189), 
        S(-189, -205), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-391, -413), 
        S(-410, -386), S(-392, -415), S(-414, -388), S(-415, -393), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(   3,    0);
}
