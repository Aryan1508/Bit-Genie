
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S(  99,  154);

    constexpr int stacked = S(  -4,  -16);

    constexpr int isolated = S( -18,  -16);

    constexpr int passed_connected = S(  18,    4);

    constexpr int passed_tempo = S(  44,   48);

    constexpr int support = S(  11,   11);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -23,   75), S( -89,   61), S( -69,   23), S( -52,  -37), S( -37,  -19), S(-114,   32), S( -80,   34), S(-123,   72), 
        S( -14,   38), S( -12,   13), S(  21,   11), S(  39,   17), S(  53,   25), S(  96,   -4), S(  56,   21), S(  27,   35), 
        S( -37,   27), S( -17,    4), S(  -1,   -3), S(  -1,  -14), S(  28,  -20), S(  18,  -12), S(   4,   -5), S(  -5,    0), 
        S( -44,    2), S( -27,  -10), S(  -5,  -15), S(  10,  -12), S(  16,  -15), S(   8,  -17), S(  -6,  -17), S( -18,  -19), 
        S( -49,   -3), S( -33,  -14), S( -14,  -11), S(  -8,  -11), S(   9,   -7), S(  -5,   -7), S(  15,  -30), S( -10,  -23), 
        S( -45,    1), S( -23,  -12), S( -17,   -4), S( -13,   -5), S(   0,    6), S(   0,    0), S(  19,  -23), S( -33,  -19), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 301,  244), S( 120,  340), S( 165,  357), S( 202,  329), S( 212,  323), S(  99,  313), S( 186,  361), S( 215,  304), 
        S(  38,  252), S(  43,  269), S(   5,  207), S(   6,  122), S( -16,  122), S( -61,  238), S(  16,  249), S( -39,  262), 
        S(   7,  143), S( -13,  143), S( -21,   85), S( -10,   62), S( -29,   66), S( -16,   92), S( -42,  156), S( -31,  154), 
        S( -20,   80), S( -27,   59), S( -44,   36), S( -43,   12), S( -56,   28), S( -59,   55), S( -62,   90), S( -19,   80), 
        S( -18,   10), S( -61,   14), S( -42,   -5), S( -50,  -10), S( -54,  -12), S( -61,   -5), S( -70,   34), S( -18,   16), 
        S( -18,    3), S( -29,   -2), S( -37,  -13), S( -28,  -23), S( -28,  -33), S( -27,  -21), S( -13,   -8), S(  -3,    1), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  60,  191), S( 202,   88), S( 229,   63), S( 225,   93), S( 168,   66), S( 191,   77), S( 124,   21), S(  69,   86), 
        S(  51,  102), S( 120,   66), S(  95,   13), S(  30,    5), S(  19,  -13), S(  55,   19), S(  35,    9), S( -46,   24), 
        S(  41,   69), S(  52,   59), S(  27,   38), S(  23,   31), S(  -3,   31), S(  -1,   32), S(  32,   34), S(  -1,   44), 
        S(  41,   36), S(  23,   32), S( -12,   21), S( -17,   22), S( -22,   30), S( -28,   32), S(   0,   42), S( -19,   40), 
        S(  21,  -10), S(  20,   28), S( -28,   13), S( -35,   13), S( -43,   24), S( -37,   31), S( -34,   51), S( -24,   28), 
        S(  13,  -13), S(   4,   14), S( -26,   23), S( -26,   24), S(   0,   -2), S( -10,   -3), S(  10,  -11), S(   7,    7), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 395,  501);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-173,  -32), S(-133,   -9), S( -80,   16), S(-122,   24), S( -36,   12), S(-105,  -71), S(-107,  -42), S(-122,  -54), 
        S( -50,    1), S( -41,   25), S(  -5,   17), S(  51,  -12), S( -14,  -11), S(  79,  -28), S( -13,    4), S( -24,  -21), 
        S( -34,    1), S(  22,    8), S(  18,   27), S(  34,   22), S(  83,   -9), S(  91,   -1), S(  46,   -1), S(  13,  -10), 
        S(  -2,   28), S(   1,   26), S(  29,   31), S(  59,   26), S(  33,   21), S(  53,   31), S(   9,   22), S(  38,   -8), 
        S( -14,   12), S(  -5,   20), S(   7,   25), S(  13,   33), S(  23,   31), S(  20,   12), S(  16,   14), S(   4,    8), 
        S( -43,   -6), S( -24,    8), S( -10,   -6), S(  -8,   26), S(  12,   15), S(  -5,   -5), S(   6,   -2), S( -23,   -6), 
        S( -34,   14), S( -32,    0), S( -28,    0), S(  -1,   -4), S(  -8,   -8), S(  -8,  -14), S(  -6,    6), S(  -8,   30), 
        S( -69,   39), S( -27,   -7), S( -58,   10), S( -34,    4), S( -24,   -2), S( -20,   -7), S( -24,    0), S( -42,   15), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 430,  470);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -49,   44), S( -91,   66), S( -47,   40), S(-121,   55), S(-117,   56), S( -76,   32), S( -26,   19), S( -52,   24), 
        S( -29,   20), S( -22,   23), S( -23,   30), S( -41,   33), S( -12,    9), S( -32,   17), S( -25,   16), S( -16,   -1), 
        S(   4,   40), S(  21,   31), S(  12,   22), S(  30,    2), S(  18,    1), S(  63,   20), S(  23,   31), S(  35,   25), 
        S( -16,   44), S(  -1,   40), S(  14,   18), S(  27,   33), S(  38,   23), S(  10,   22), S(  12,   15), S( -26,   45), 
        S(  -3,   39), S(  -9,   24), S(  -2,   25), S(  21,   32), S(  21,   19), S(   5,   13), S(  -6,   15), S(  15,   10), 
        S(   8,    5), S(  11,   30), S(   7,   26), S(   8,   20), S(   9,   28), S(  12,   17), S(  18,    9), S(  19,   19), 
        S(  21,   22), S(  17,    9), S(  19,   -2), S(  -2,   13), S(   8,   17), S(  17,    1), S(  44,   10), S(  24,  -16), 
        S(  23,   22), S(  27,   -1), S(  10,   13), S(  -5,   27), S(   7,   32), S(  -2,   36), S(  10,    4), S(  43,  -16), 
    };
}

namespace RookEval
{
    constexpr int value = S( 536,  882);

    constexpr int open_file = S(  28,   12);

    constexpr int semi_open_file = S(  26,   -2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   0,   52), S( -52,   75), S(   3,   66), S( -30,   78), S( -22,   63), S(   8,   66), S(  -2,   55), S(  42,   40), 
        S( -24,   60), S( -40,   86), S( -20,   91), S(   4,   70), S( -17,   73), S(   7,   64), S(  14,   61), S(  59,   29), 
        S( -40,   63), S(  -6,   58), S( -21,   67), S( -21,   42), S(  24,   20), S(  37,   26), S( 104,    4), S(  46,    3), 
        S( -38,   59), S( -39,   64), S( -26,   58), S( -21,   42), S( -16,   25), S(  -2,   23), S(  15,   24), S(  -3,   27), 
        S( -38,   44), S( -42,   38), S( -43,   39), S( -31,   37), S( -26,   32), S( -33,   32), S(  13,   -5), S(  -6,   10), 
        S( -41,   30), S( -37,   23), S( -39,   33), S( -30,   26), S( -14,   10), S(  -6,    4), S(  22,  -19), S(   7,  -22), 
        S( -29,   10), S( -36,   20), S( -25,   18), S( -22,   15), S( -10,   10), S(   3,   -3), S(  12,  -13), S(  -7,  -10), 
        S( -14,   20), S( -18,   20), S( -19,   29), S( -10,   15), S(   0,   10), S(   4,   13), S(  24,   -6), S(  -1,   -7), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1254, 1678);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   5,   31), S( -33,   75), S(  -9,   85), S(  60,   26), S( -28,  128), S(  35,   89), S(  21,   91), S( -17,   87), 
        S(  -4,   60), S( -31,  102), S( -35,  134), S( -35,  137), S( -33,  160), S( -14,  165), S( -34,  160), S(  33,  130), 
        S(  13,   50), S(  17,   38), S(  -2,   94), S(  15,   78), S(  10,  116), S(  48,  138), S(  47,  128), S(  78,   50), 
        S(  -6,   95), S(  16,   53), S( -13,   92), S(   6,   82), S(  -8,  112), S(  14,   80), S(  14,  118), S(  25,   91), 
        S(  10,   65), S(  -1,   73), S(  11,   39), S(  11,   65), S(  18,   45), S(  12,   51), S(  23,   69), S(  40,   48), 
        S(   6,   44), S(  24,   16), S(  13,   51), S(  18,   29), S(  24,   29), S(  20,   52), S(  45,   21), S(  41,    1), 
        S(  16,   49), S(  26,   10), S(  31,   10), S(  34,   14), S(  34,   10), S(  41,   -9), S(  56,  -53), S(  78,  -79), 
        S(  29,    2), S(  25,    6), S(  25,   20), S(  30,   27), S(  35,    1), S(  23,   -2), S(  49,   -4), S(  37,   14), 
    };
}

namespace KingEval
{
    constexpr int pawn_shield[4]
    {
        S( -50,   11), S( -13,   10), S(  22,   -2), S(  47,  -26), 
    };

    constexpr int psqt[64]
    {
        S(-128, -208), S(  39,  -88), S(  -4,  -34), S( -31,    8), S(   1,   26), S(  -2,    9), S( -14,  -33), S( -32, -125), 
        S(   7,   17), S(  47,   51), S(  33,   81), S(  48,   62), S(  -4,   98), S(  22,   73), S(  17,   93), S( -65,   34), 
        S( -87,   41), S(  28,   78), S(  26,   89), S( -73,  114), S( -41,  104), S(  19,   95), S(  28,   79), S( -71,   50), 
        S( -94,   30), S( -30,   60), S( -86,   93), S(-134,  118), S( -71,  104), S( -50,   96), S( -92,   78), S(-128,   46), 
        S( -89,   25), S( -77,   43), S( -16,   62), S( -71,   79), S( -57,   71), S( -80,   57), S( -76,   36), S(-162,   33), 
        S( -17,   -6), S(  30,   -1), S(   2,   23), S( -14,   38), S( -22,   39), S(  -7,   14), S(  30,  -12), S( -18,   -2), 
        S( 103,  -38), S(  81,  -32), S(  59,  -14), S(  25,   -5), S(  19,   -1), S(  42,  -15), S(  96,  -49), S(  91,  -52), 
        S(  41,  -67), S(  77,  -61), S(  44,  -32), S( -17,  -13), S(  70,  -59), S( -33,  -10), S(  62,  -64), S(  64,  -94), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  22,  -29), S( -49,   17), S( -31,   16), S( -42,   12), S( -48,   14), S( -17,  -14), 
        S( -29,   12), S( -36,  -19), S( -85,   74), S( -86,   49), S( -71,   82), S(-109,   79), S(-109,    3), S(-149,    5), 
        S(-161,    5), S(-159,    2), S(-171,  -10), S(-193,  -62), S(-248, -119), S(-240,   -8), S(-263,  -87), S(-259, -157), 
        S(-206, -216), S(-352, -308), S(-278, -333), S(-253, -222), S(-282, -105), S(-251, -142), S(-226,  -75), S(-292, -181), 
        S(-292, -207), S(-389, -281), S(-391, -295), S( -36,  -64), S(-363, -202), S(-287, -195), S(-327, -215), S(-229, -195), 
        S(-177, -197), S(-208, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    5);
}
