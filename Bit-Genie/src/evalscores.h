
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 107,  146);

    constexpr int stacked = S(  -6,  -15);

    constexpr int isolated = S( -24,  -16);

    constexpr int passed_connected = S(  20,   12);

    constexpr int passed_tempo = S(  38,   44);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -21,   41), S( -66,   20), S( -61,   -6), S( -47,  -59), S( -41,  -37), S( -76,   -3), S( -61,    2), S( -96,   35), 
        S( -26,   33), S( -22,   12), S(   5,    5), S(  18,  -11), S(  29,   -5), S(  78,   -6), S(  49,   15), S(  15,   28), 
        S( -43,   21), S( -25,    3), S(  -5,   -5), S(  -3,  -16), S(  23,  -21), S(  11,  -13), S(  -1,   -7), S( -11,   -3), 
        S( -50,   -2), S( -34,  -10), S( -11,  -16), S(   8,  -13), S(  11,  -16), S(   1,  -18), S( -15,  -17), S( -23,  -21), 
        S( -51,   -4), S( -35,  -11), S( -14,  -12), S(  -8,  -13), S(  10,   -8), S(  -4,   -9), S(  12,  -23), S( -15,  -19), 
        S( -49,   -3), S( -33,  -14), S( -20,   -9), S( -14,  -11), S(  -2,    0), S(  13,  -10), S(  21,  -28), S( -24,  -25), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 277,  228), S( 191,  279), S( 220,  297), S( 241,  284), S( 240,  280), S( 200,  253), S( 247,  301), S( 257,  261), 
        S( 100,  190), S(  97,  203), S(  53,  161), S(  41,  119), S(  33,  116), S(  49,  169), S( 106,  186), S(  85,  184), 
        S(  27,  110), S(   4,  108), S( -16,   66), S(  -8,   50), S( -23,   53), S(  -8,   71), S(   6,  113), S(  10,  114), 
        S( -10,   61), S( -18,   40), S( -40,   23), S( -39,    3), S( -50,   16), S( -44,   35), S( -30,   61), S(  -3,   60), 
        S( -13,    1), S( -54,   -3), S( -40,  -12), S( -47,  -16), S( -53,  -19), S( -55,  -15), S( -60,   14), S(  -4,    3), 
        S( -12,   -2), S( -25,   -6), S( -37,  -14), S( -25,  -14), S( -28,  -26), S( -31,  -17), S( -14,   -8), S(   8,   -4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  86,  162), S( 145,  111), S( 173,  100), S( 188,  115), S( 136,   87), S( 127,  101), S(  86,   55), S(  54,   93), 
        S(  68,   77), S( 108,   57), S( 102,   14), S(  44,   24), S(  32,   13), S(  61,   16), S(  40,    8), S( -24,   14), 
        S(  47,   51), S(  55,   40), S(  26,   28), S(  21,   23), S(  -4,   23), S(   3,   20), S(  26,   26), S(   5,   31), 
        S(  40,   28), S(  24,   21), S( -11,   11), S( -18,   13), S( -22,   21), S( -20,   18), S(   6,   25), S( -15,   27), 
        S(  20,  -14), S(  17,   14), S( -30,    6), S( -38,    8), S( -44,   13), S( -29,   15), S( -33,   30), S( -23,   18), 
        S(  13,  -13), S(   5,    9), S( -28,   18), S( -29,   22), S(  -7,    1), S( -12,   -1), S(  15,  -11), S(   6,    5), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 396,  431);

    constexpr int behind_pawn = S(   5,   11);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-137,  -54), S( -61,  -35), S( -32,  -11), S( -54,   -8), S( -17,   -5), S( -77,  -74), S( -60,  -55), S(-102,  -68), 
        S( -43,   -9), S( -38,   14), S(  -2,    6), S(  43,  -12), S( -16,  -15), S(  75,  -30), S(  -4,   -6), S( -22,  -24), 
        S( -32,   -8), S(  21,   -1), S(  16,   19), S(  34,   12), S(  81,  -15), S(  87,   -7), S(  47,   -9), S(  16,  -18), 
        S(   1,   15), S(   2,   15), S(  28,   20), S(  58,   16), S(  31,   13), S(  51,   20), S(  11,   12), S(  41,  -17), 
        S( -12,    5), S(  -5,   11), S(   5,   16), S(  12,   22), S(  22,   21), S(  17,    5), S(  14,    7), S(   5,    0), 
        S( -42,  -13), S( -25,    0), S( -12,  -12), S( -10,   15), S(  10,    5), S(  -7,  -12), S(   6,  -10), S( -22,  -13), 
        S( -35,    3), S( -32,  -11), S( -31,   -8), S(  -1,  -12), S(  -9,  -15), S( -13,  -19), S( -13,   -2), S( -16,   20), 
        S( -48,   -3), S( -26,  -19), S( -56,   -2), S( -31,   -5), S( -25,   -9), S( -22,  -15), S( -21,  -14), S( -40,   -3), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 434,  406);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -42,   24), S( -40,   28), S( -27,   19), S( -54,    9), S( -50,   17), S( -46,    9), S( -14,   -6), S( -41,   -2), 
        S( -31,    7), S( -28,   10), S( -28,   16), S( -31,   10), S( -19,   -4), S( -36,    1), S( -28,    1), S( -19,   -9), 
        S(   4,   22), S(  19,   14), S(   7,    8), S(  23,   -8), S(   7,   -8), S(  59,    5), S(  27,   10), S(  34,    9), 
        S( -16,   25), S(  -5,   24), S(   7,    5), S(  20,   17), S(  32,   10), S(   6,    7), S(   5,    5), S( -26,   28), 
        S(  -6,   23), S( -15,   12), S(  -9,   12), S(  16,   17), S(  16,    7), S(  -3,    2), S( -11,    2), S(  11,   -4), 
        S(   5,   -6), S(   6,   16), S(   2,   13), S(   3,    7), S(   3,   15), S(   8,    5), S(  13,   -3), S(  16,    7), 
        S(  18,   10), S(  11,    0), S(  15,  -13), S(  -6,    0), S(   5,    2), S(  14,  -11), S(  34,    3), S(  21,  -27), 
        S(  18,   10), S(  25,  -13), S(   7,    1), S(  -6,   12), S(   1,   18), S(  -7,   21), S(  11,   -5), S(  34,  -16), 
    };
}

namespace RookEval
{
    constexpr int value = S( 544,  778);

    constexpr int open_file = S(  28,   12);

    constexpr int semi_open_file = S(  27,   -2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   3,   17), S( -27,   28), S(  18,   26), S( -15,   36), S( -17,   26), S(  16,   29), S(   3,   20), S(  46,    5), 
        S( -24,   25), S( -40,   47), S( -20,   52), S(   3,   33), S( -18,   37), S(   4,   29), S(  10,   28), S(  61,   -1), 
        S( -39,   26), S(  -6,   23), S( -22,   31), S( -26,   12), S(  21,   -8), S(  30,   -3), S(  90,  -16), S(  47,  -24), 
        S( -39,   24), S( -41,   28), S( -31,   25), S( -26,   11), S( -21,   -4), S( -11,   -4), S(  10,   -4), S(  -6,   -2), 
        S( -42,   12), S( -44,    7), S( -47,    9), S( -36,    8), S( -30,    2), S( -43,    8), S(   6,  -29), S( -13,  -16), 
        S( -45,    2), S( -42,   -6), S( -43,    3), S( -36,   -3), S( -22,  -16), S( -14,  -20), S(  14,  -41), S(   2,  -43), 
        S( -33,  -17), S( -41,   -8), S( -30,  -10), S( -27,  -13), S( -16,  -17), S(  -8,  -25), S(   0,  -34), S( -13,  -34), 
        S( -20,   -5), S( -22,   -7), S( -24,    2), S( -15,  -12), S(  -6,  -16), S(  -1,  -13), S(  18,  -29), S( -15,  -25), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1249, 1472);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   7,   10), S(  -7,   15), S(   9,   29), S(  42,   15), S(  17,   44), S(  49,   46), S(  36,   40), S(   1,   32), 
        S(   0,   22), S( -31,   56), S( -24,   73), S( -17,   72), S( -10,   85), S(  -2,   95), S( -25,   88), S(  44,   72), 
        S(  14,   16), S(  18,    9), S(   0,   54), S(  15,   41), S(   9,   75), S(  55,   86), S(  57,   82), S(  82,   26), 
        S(   0,   45), S(  13,   23), S( -13,   53), S(   2,   47), S(  -7,   66), S(  13,   44), S(  16,   74), S(  25,   51), 
        S(   7,   35), S(  -2,   40), S(   6,   12), S(   8,   36), S(  15,   18), S(   8,   23), S(  20,   38), S(  38,   18), 
        S(   5,   10), S(  19,   -8), S(  10,   22), S(  13,    5), S(  20,    5), S(  15,   25), S(  40,   -4), S(  35,  -15), 
        S(  17,   11), S(  22,  -18), S(  27,  -16), S(  32,  -15), S(  31,  -16), S(  38,  -34), S(  42,  -51), S(  60,  -33), 
        S(  22,  -12), S(  22,  -18), S(  25,  -10), S(  30,   -4), S(  30,  -22), S(  19,  -27), S(  38,   -2), S(  29,   -4), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-102, -111), S( -20,  -52), S( -16,  -23), S( -23,  -12), S( -17,   10), S(   4,    4), S(  -3,  -14), S( -21,  -40), 
        S(  -1,    8), S(  34,   38), S(  32,   58), S(  41,   45), S(  30,   65), S(  42,   60), S(  32,   68), S( -12,   22), 
        S( -12,   23), S(  32,   57), S(  36,   69), S(  -3,   81), S(   9,   75), S(  51,   70), S(  46,   62), S( -14,   31), 
        S( -33,   12), S(   3,   42), S(  -6,   64), S(  -3,   80), S(  12,   74), S(  -4,   70), S( -20,   50), S( -47,   21), 
        S( -53,    9), S( -43,   27), S( -13,   49), S( -22,   60), S( -35,   56), S( -50,   41), S( -55,   23), S( -80,    5), 
        S( -38,   -4), S(  -7,    4), S( -28,   23), S( -38,   34), S( -44,   35), S( -35,   15), S(  -6,   -4), S( -55,    5), 
        S(  59,  -21), S(  39,  -20), S(  21,   -6), S( -13,    1), S( -22,    6), S(   4,   -7), S(  47,  -31), S(  44,  -34), 
        S(  40,  -50), S(  95,  -57), S(  64,  -34), S( -54,   -4), S(  16,  -39), S( -27,   -9), S(  65,  -55), S(  62,  -78), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  18,  -25), S( -52,   17), S( -28,   13), S( -39,    8), S( -45,    9), S( -12,  -20), 
        S( -26,    9), S( -38,  -22), S( -69,   -9), S( -73,  -23), S( -55,   -5), S( -81,  -18), S( -95,  -65), S(-116,  -59), 
        S(-126,  -60), S(-125,  -57), S(-133,  -65), S(-165,  -94), S(-213, -123), S(-196,  -96), S(-211, -121), S(-225, -200), 
        S(-197, -172), S(-259, -178), S(-289, -255), S(-183, -161), S(-254, -146), S(-198, -162), S(-120,  -38), S(-211, -142), 
        S(-200, -162), S(-347, -259), S(-317, -282), S(  77,  -22), S(-333, -170), S(-216, -169), S(-270, -200), S(-214, -190), 
        S(-187, -203), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    4);
}
