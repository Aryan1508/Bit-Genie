
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 106,  159);

    constexpr int stacked = S(  -7,  -18);

    constexpr int isolated = S( -22,  -19);

    constexpr int passed_connected = S(  27,   15);

    constexpr int passed_tempo = S(  46,   50);

    constexpr int phalanx[8]
    {
        S(   0,    0), S(   2,  -11), S(   0,    3), S(  21,   18), S(  55,   72), S( 190,  255), S(  65,  203), S(   0,    0), 
    };

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -20,   81), S( -94,   67), S( -69,   27), S( -53,  -36), S( -39,  -18), S(-117,   37), S( -82,   41), S(-122,   79), 
        S( -15,   42), S( -11,   17), S(  18,   14), S(  38,   16), S(  53,   25), S(  97,   -3), S(  63,   26), S(  33,   33), 
        S( -41,   30), S( -22,    8), S(  -2,    0), S(   2,  -14), S(  29,  -19), S(  15,  -12), S(   5,   -3), S(  -5,    1), 
        S( -49,    3), S( -31,   -8), S( -11,  -13), S(   8,   -8), S(  12,  -13), S(   4,  -15), S(  -8,  -17), S( -16,  -20), 
        S( -46,    2), S( -27,   -7), S(  -8,   -8), S(  -2,   -9), S(  16,   -3), S(   4,   -4), S(  24,  -22), S(  -7,  -17), 
        S( -46,    7), S( -26,   -3), S( -16,    2), S( -10,   -1), S(   2,   14), S(  19,    1), S(  32,  -18), S( -16,  -18), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 308,  251), S( 112,  351), S( 160,  368), S( 197,  339), S( 215,  330), S(  92,  321), S( 177,  373), S( 210,  315), 
        S(  36,  256), S(  30,  270), S(   2,  204), S(   3,  121), S( -19,  120), S( -73,  241), S(  -4,  248), S( -38,  267), 
        S(   5,  142), S( -22,  141), S( -28,   81), S( -19,   58), S( -34,   61), S( -22,   88), S( -61,  154), S( -30,  150), 
        S( -24,   80), S( -33,   56), S( -49,   33), S( -47,    8), S( -60,   25), S( -65,   53), S( -81,   93), S( -19,   78), 
        S( -24,    6), S( -74,    8), S( -49,  -10), S( -58,  -11), S( -65,  -15), S( -76,   -7), S( -97,   31), S( -19,    7), 
        S( -20,   -1), S( -32,   -7), S( -42,  -14), S( -30,  -21), S( -38,  -35), S( -35,  -21), S( -18,  -13), S(  -1,   -4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  58,  196), S( 211,   86), S( 238,   57), S( 233,   91), S( 168,   66), S( 197,   75), S( 132,   15), S(  78,   86), 
        S(  55,  101), S( 122,   61), S(  99,   10), S(  29,    3), S(  17,  -16), S(  64,    9), S(  43,   -8), S( -37,   22), 
        S(  41,   68), S(  50,   54), S(  20,   36), S(  15,   29), S(  -9,   27), S(  -2,   26), S(  28,   25), S(  -1,   40), 
        S(  37,   36), S(  18,   30), S( -15,   19), S( -22,   18), S( -26,   28), S( -25,   27), S(  -5,   41), S( -26,   42), 
        S(  15,  -14), S(   8,   23), S( -35,   10), S( -44,   13), S( -54,   21), S( -42,   27), S( -51,   48), S( -32,   25), 
        S(   9,  -16), S(   3,    8), S( -32,   24), S( -34,   29), S(  -5,   -6), S(  -9,   -6), S(  17,  -19), S(   3,    5), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 416,  519);

    constexpr int mobility[9]
    {
        S(-125, -114), S( -49,  -60), S( -11,   17), S(   3,   43), S(  20,   43), S(  24,   45), S(  34,   47), S(  44,   40), 
        S(  54,   33), 
    };

    constexpr int psqt[64]
    {
        S(-178,  -39), S(-140,   -8), S( -79,   19), S(-127,   31), S( -37,   18), S(-111,  -70), S(-106,  -39), S(-132,  -61), 
        S( -49,    3), S( -43,   30), S(  -3,   20), S(  51,   -8), S( -17,   -6), S(  82,  -25), S( -10,    6), S( -26,  -17), 
        S( -33,    4), S(  23,   12), S(  17,   34), S(  36,   28), S(  87,   -4), S(  93,    6), S(  48,    4), S(  13,  -10), 
        S(  -2,   33), S(   2,   31), S(  29,   37), S(  59,   33), S(  32,   27), S(  52,   38), S(  11,   25), S(  41,   -5), 
        S( -13,   16), S(  -5,   25), S(   5,   32), S(  12,   38), S(  22,   38), S(  18,   19), S(  14,   19), S(   4,   10), 
        S( -42,   -3), S( -25,   13), S( -10,   -2), S(  -8,   33), S(  12,   21), S(  -5,   -2), S(   7,    2), S( -23,   -4), 
        S( -36,   17), S( -33,    4), S( -28,    5), S(  -1,    1), S(  -8,   -3), S( -11,   -7), S( -10,   11), S( -13,   35), 
        S( -72,   42), S( -26,   -4), S( -59,   14), S( -34,    9), S( -27,    3), S( -19,   -5), S( -21,   -1), S( -47,   20), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 444,  486);

    constexpr int mobility[14]
    {
        S( -79,  -70), S( -75,  -67), S( -33,   12), S( -14,   51), S(   2,   46), S(   9,   56), S(  25,   74), S(  36,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   35), S(  61,   38), 
    };

    constexpr int psqt[64]
    {
        S( -49,   54), S( -93,   78), S( -47,   49), S(-127,   66), S(-116,   65), S( -71,   40), S( -27,   25), S( -45,   28), 
        S( -21,   25), S( -18,   32), S( -18,   39), S( -37,   42), S(  -7,   17), S( -28,   24), S( -18,   22), S(  -9,    5), 
        S(  15,   45), S(  32,   38), S(  18,   32), S(  37,   10), S(  22,    9), S(  73,   27), S(  37,   38), S(  46,   29), 
        S(  -6,   49), S(   7,   48), S(  21,   27), S(  33,   42), S(  45,   32), S(  19,   29), S(  19,   23), S( -17,   52), 
        S(   5,   47), S(  -2,   31), S(   4,   32), S(  28,   41), S(  29,   28), S(  11,   20), S(   2,   21), S(  23,   12), 
        S(  17,   11), S(  18,   37), S(  15,   32), S(  16,   26), S(  16,   35), S(  21,   24), S(  25,   15), S(  28,   26), 
        S(  30,   27), S(  23,   17), S(  27,    4), S(   6,   20), S(  16,   23), S(  26,    7), S(  47,   20), S(  32,  -14), 
        S(  26,   31), S(  36,    3), S(  17,   20), S(   3,   34), S(  10,   40), S(   3,   42), S(  22,    4), S(  47,   -7), 
    };
}

namespace RookEval
{
    constexpr int value = S( 550,  908);

    constexpr int open_file = S(  29,   14);

    constexpr int semi_open_file = S(  28,   -3);

    constexpr int mobility[15]
    {
        S( -58,  -70), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  20,   65), S( -39,   91), S(  18,   83), S( -17,   96), S(  -6,   78), S(  23,   81), S(   5,   73), S(  61,   54), 
        S(  -7,   74), S( -26,  102), S(  -7,  108), S(  16,   86), S(  -3,   89), S(  19,   81), S(  26,   78), S(  82,   40), 
        S( -25,   77), S(  10,   72), S(  -8,   83), S( -11,   58), S(  39,   34), S(  49,   42), S( 129,   14), S(  71,   12), 
        S( -23,   74), S( -25,   78), S( -15,   73), S( -11,   58), S(  -4,   40), S(   8,   38), S(  33,   35), S(  14,   40), 
        S( -25,   56), S( -25,   51), S( -32,   53), S( -20,   52), S( -13,   44), S( -23,   49), S(  28,    6), S(   7,   23), 
        S( -28,   44), S( -23,   35), S( -26,   45), S( -19,   39), S(  -4,   23), S(   5,   17), S(  37,   -7), S(  23,  -11), 
        S( -15,   23), S( -23,   33), S( -13,   32), S( -10,   28), S(   2,   23), S(  11,   14), S(  19,    3), S(   7,    2), 
        S(  -1,   33), S(  -4,   33), S(  -7,   43), S(   3,   27), S(  13,   23), S(  18,   25), S(  40,    6), S(   5,    9), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1334, 1732);

    constexpr int mobility[28]
    {
        S( -63,  -49), S( -71,  -37), S( -67,  -50), S( -46,  -51), S( -28,  -47), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  36,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  61,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(  18,   45), S( -24,   92), S(   4,  102), S(  75,   40), S( -17,  141), S(  47,  103), S(  36,  102), S(  -4,   96), 
        S(   6,   81), S( -27,  127), S( -30,  161), S( -28,  161), S( -27,  185), S( -12,  194), S( -34,  185), S(  43,  150), 
        S(  23,   67), S(  32,   51), S(   4,  118), S(  22,   99), S(  15,  140), S(  56,  162), S(  65,  149), S(  96,   66), 
        S(   4,  115), S(  24,   73), S(  -6,  113), S(  12,  101), S(  -1,  131), S(  24,   98), S(  24,  136), S(  34,  111), 
        S(  19,   85), S(   9,   91), S(  19,   55), S(  18,   84), S(  27,   62), S(  21,   70), S(  32,   89), S(  51,   69), 
        S(  15,   65), S(  33,   33), S(  22,   71), S(  26,   46), S(  32,   47), S(  28,   71), S(  54,   40), S(  52,   16), 
        S(  25,   69), S(  35,   27), S(  40,   26), S(  45,   28), S(  44,   24), S(  52,    4), S(  66,  -47), S(  97,  -85), 
        S(  41,   23), S(  35,   24), S(  38,   32), S(  41,   43), S(  43,   20), S(  33,   17), S(  68,    6), S(  52,   25), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-131, -213), S(  38,  -87), S(  -5,  -35), S( -34,    7), S(   0,   26), S(  -4,   13), S( -15,  -32), S( -36, -132), 
        S(   1,   16), S(  38,   50), S(  30,   84), S(  44,   64), S(  -6,  100), S(  18,   77), S(  11,   97), S( -72,   36), 
        S( -98,   41), S(  22,   81), S(  17,   93), S( -82,  117), S( -55,  109), S(  12,   99), S(  23,   82), S( -83,   52), 
        S(-108,   30), S( -45,   63), S(-104,   96), S(-150,  121), S( -91,  108), S( -66,   99), S(-115,   83), S(-149,   48), 
        S(-105,   26), S( -96,   45), S( -39,   65), S( -93,   82), S( -77,   74), S(-104,   61), S( -95,   40), S(-193,   38), 
        S( -35,   -6), S(   8,    2), S( -20,   27), S( -37,   42), S( -45,   43), S( -31,   18), S(  12,  -11), S( -42,    0), 
        S(  83,  -39), S(  61,  -31), S(  37,  -11), S(   0,   -1), S(  -9,    4), S(  21,  -14), S(  69,  -45), S(  65,  -51), 
        S(  59,  -69), S( 117,  -73), S(  84,  -46), S( -42,  -10), S(  34,  -54), S( -12,  -17), S(  86,  -72), S(  84, -100), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  28,  -35), S( -47,   14), S( -30,   14), S( -43,   12), S( -49,   14), S( -15,  -19), 
        S( -29,   11), S( -34,  -26), S( -89,   85), S( -88,   54), S( -74,   92), S(-114,   93), S(-111,   11), S(-157,    8), 
        S(-168,   10), S(-165,    7), S(-179,   -4), S(-200,  -54), S(-258, -120), S(-249,    4), S(-278,  -81), S(-269, -145), 
        S(-225, -206), S(-380, -313), S(-297, -330), S(-270, -229), S(-295, -112), S(-261, -151), S(-237,  -77), S(-302, -184), 
        S(-303, -213), S(-404, -285), S(-408, -308), S( -43,  -64), S(-373, -205), S(-293, -199), S(-333, -217), S(-232, -197), 
        S(-179, -198), S(-210, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    5);
}
