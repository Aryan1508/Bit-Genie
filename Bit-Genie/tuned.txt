
namespace PawnEval
{
    constexpr int value = S( 128,  146);

    constexpr int stacked = S( -19,   -8);

    constexpr int isolated = S( -11,  -19);

    constexpr int passed_connected = S(  20,   12);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(   1,   25), S( -27,    0), S( -53,  -24), S( -77,  -38), S( -33,  -22), S( -48,    1), S( -23,   -1), S( -44,   24), 
        S(  -6,   51), S(  -9,   31), S(  11,   -4), S(  -3,  -38), S(   7,  -28), S(  44,    1), S(  38,   26), S(  23,   17), 
        S(  -9,   23), S(   0,    0), S(   4,  -13), S( -14,  -18), S(   0,  -12), S(   2,  -14), S(  11,   -8), S(   3,    1), 
        S( -20,   -8), S( -15,  -17), S( -14,  -20), S(  -1,   -9), S(  -1,   -8), S(  -1,  -21), S(  -7,  -19), S( -20,  -26), 
        S( -25,  -12), S( -12,  -19), S(  -4,  -20), S(  -7,  -22), S(  16,  -18), S(   2,  -20), S(  -4,   -5), S( -21,  -11), 
        S( -22,  -10), S( -14,  -20), S( -13,  -25), S(  -9,  -32), S(   3,  -17), S(   7,  -18), S(  -4,   -4), S( -25,  -18), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 247,  246), S( 234,  237), S( 269,  259), S( 264,  253), S( 266,  247), S( 251,  241), S( 294,  279), S( 304,  298), 
        S( 172,  139), S( 166,  147), S( 136,  137), S( 124,  148), S(  95,  138), S( 112,  125), S( 142,  141), S( 147,  149), 
        S(  92,   87), S(  80,   84), S(  51,   44), S(  45,   43), S(  36,   42), S(  57,   46), S(  80,   78), S(  85,   74), 
        S(  51,   40), S(  45,   18), S(  22,   11), S(   1,    0), S(  10,    5), S(  20,    7), S(  43,   44), S(  56,   37), 
        S(  16,   -2), S(   5,  -15), S(  -1,  -11), S( -27,   -8), S( -23,  -18), S(  -8,  -18), S(  14,  -24), S(  18,    8), 
        S(  14,  -10), S(   9,  -14), S(   4,  -15), S(  13,   25), S(  24,   25), S( -24,  -13), S(  -8,    0), S(  10,   10), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 132,  135), S( 128,  123), S( 130,  128), S( 141,  158), S( 115,  117), S(  86,  110), S(  71,   64), S(  69,   60), 
        S(  67,   71), S(  64,   64), S(  50,   74), S(  47,   60), S(  35,   73), S(  11,   45), S(  10,   15), S(   2,   27), 
        S(  35,   20), S(  53,    6), S(  26,    5), S(  10,   29), S(  -4,   10), S(  -1,    3), S(  23,   -4), S(  13,    7), 
        S(  17,    0), S(  20,  -13), S(  -9,  -14), S( -21,  -11), S(   2,  -13), S(   1,  -19), S(   8,  -15), S(  16,   -9), 
        S(  -3,  -21), S(   4,  -18), S(  -8,  -20), S( -23,  -10), S( -22,  -16), S( -13,  -14), S(  10,   -4), S( -15,  -21), 
        S( -13,  -35), S(   7,  -27), S(  -5,  -22), S(  -1,    1), S(   7,    8), S(   5,   -5), S( -13,   -7), S(  10,  -23), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 412,  417);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-103,  -96), S( -37,  -44), S( -11,  -14), S( -27,  -26), S(   4,    3), S( -54,  -55), S( -51,  -53), S(-106, -113), 
        S( -27,  -24), S(  -4,   -9), S(  13,  -12), S(  -7,   24), S(  -9,    6), S(  21,    9), S(  -2,    9), S( -43,  -33), 
        S( -19,  -34), S(  19,    1), S(  11,   20), S(  18,   33), S(  29,   19), S(  36,   35), S(  18,   25), S( -15,   -3), 
        S(  10,    6), S(  10,  -11), S(  27,   12), S(  37,   40), S(  27,   33), S(  36,   40), S(  23,   15), S(  30,   25), 
        S(   9,  -21), S(   7,  -14), S(  12,    6), S(  17,   10), S(  27,   10), S(  10,    6), S(  10,   14), S(  21,   -6), 
        S( -19,  -30), S( -13,  -25), S( -11,  -11), S(  -1,   -5), S(   8,   21), S(  -1,    5), S(   3,    1), S( -16,  -33), 
        S(  -9,   -8), S( -10,  -15), S(  -9,  -27), S(  -8,   -2), S(  -7,   -9), S( -16,  -32), S(  -1,    1), S(   9,  -17), 
        S( -23,  -28), S(  -7,  -28), S( -26,  -38), S( -16,  -29), S(  -3,  -23), S(  -3,   -8), S( -15,  -39), S( -24,   -3), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 432,  413);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -11,  -21), S(  -2,   -5), S( -17,  -15), S( -24,  -15), S(  -7,  -25), S( -24,  -22), S(   6,    6), S( -28,  -20), 
        S(  -9,  -29), S(   1,  -13), S(   2,   -1), S( -13,  -14), S( -17,   12), S( -10,    3), S( -21,    6), S( -14,   -6), 
        S(  11,  -10), S(  17,   12), S(  -5,   17), S(  -7,   13), S(  -3,   16), S(  27,   34), S(  26,   20), S(  37,   22), 
        S(  11,   -9), S(   2,    1), S(  -7,   -3), S(   5,   37), S(   6,   29), S(  -4,   23), S(   9,    8), S(   3,    5), 
        S( -10,    5), S(   9,   -8), S( -10,    9), S(   4,   32), S(  -2,   25), S(   8,    4), S(  -5,   -7), S(  -2,   11), 
        S(  -5,   13), S(  16,   15), S(  15,    1), S(   5,   18), S(  17,   10), S(  -3,   20), S(  10,   15), S(  18,   16), 
        S(  23,   16), S(   4,   11), S(  -4,    8), S(   2,   -1), S(  -1,   12), S(   4,   -8), S(  20,   25), S(  -3,   14), 
        S(  21,   -3), S(  21,   18), S(   8,    6), S(  14,   -5), S( -10,    5), S(   7,    4), S( -24,  -11), S(  20,   20), 
    };
}

namespace RookEval
{
    constexpr int value = S( 625,  772);

    constexpr int open_file = S(   5,   31);

    constexpr int semi_open_file = S(   5,   30);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  22,   27), S(  21,   20), S(  34,    8), S(  33,   16), S(   9,    8), S(   9,   16), S(  21,   16), S(  40,    1), 
        S(  20,    3), S(  14,   28), S(  36,   34), S(  37,   29), S(  30,   38), S(  37,   19), S(  20,   26), S(  23,   30), 
        S(  11,   -6), S(  21,   21), S(  20,   10), S(  -1,   -3), S(   7,   18), S(  34,   12), S(  23,   19), S(   3,   13), 
        S(  16,    4), S(  12,   -4), S(  14,   19), S(   6,  -10), S(  11,    9), S(  -9,   24), S(  -2,    1), S(  -2,    6), 
        S(  -3,  -10), S(  -3,  -14), S(  -8,   -5), S(   1,   -1), S(  -2,   -8), S(  -4,   -8), S( -14,    6), S(   0,  -15), 
        S(  -6,    0), S( -16,    0), S(  -7,  -14), S(  -9,  -16), S( -14,   -1), S( -12,    8), S(  -3,    3), S(  -6,  -23), 
        S(  -5,  -28), S(  -8,    2), S(  -7,   -5), S(   3,  -22), S(  -7,    1), S( -17,    0), S(  -3,  -20), S( -11,  -15), 
        S( -14,    2), S(  -2,   -4), S(   5,   -2), S( -15,    7), S( -11,    8), S(   4,   15), S(  11,  -17), S( -19,  -26), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1331, 1492);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   9,   13), S(  19,   26), S(  32,   40), S(  30,   41), S(  51,   52), S(  50,   50), S(  46,   35), S(  44,   48), 
        S(   2,  -27), S(  -1,  -17), S(   4,    7), S(  33,   30), S(  44,   34), S(  47,   74), S(  29,   42), S(  69,   72), 
        S(   8,   -8), S(   0,   13), S(  25,    4), S(  38,   24), S(  28,   45), S(  74,   60), S(  78,   88), S(  59,   72), 
        S(  18,   -5), S(  30,   14), S(  -2,   -2), S(  25,    7), S(  30,   15), S(  31,   34), S(  52,   43), S(  45,   42), 
        S(  25,    7), S(  10,    0), S(   2,    7), S(  24,    4), S(   8,    8), S(  20,   14), S(  44,   24), S(  33,   28), 
        S(  11,   -6), S(  25,   12), S(  17,    9), S(   5,    8), S(  14,    9), S(  36,   20), S(  40,   40), S(  33,   32), 
        S(  19,    6), S(  11,   13), S(   8,   27), S(  18,   22), S(  13,   23), S(  21,   16), S(  15,   -1), S(  42,   20), 
        S(  24,   33), S(  23,   19), S(  18,   31), S(  27,   25), S(  16,   26), S(  17,    5), S(  -4,  -17), S(  -5,  -20), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S( -81,  -72), S( -24,  -22), S( -19,   -5), S( -24,  -23), S( -24,   -1), S(  11,   10), S(   5,   -1), S( -13,   -5), 
        S(   1,  -16), S(  26,   35), S(  27,   23), S(  28,   14), S(  21,   20), S(  31,   29), S(  29,   24), S(   3,    3), 
        S(  23,   14), S(  37,   57), S(  44,   75), S(  33,   85), S(  38,   82), S(  61,   47), S(  36,   45), S(   7,    6), 
        S( -15,   -1), S(  36,   41), S(  39,   61), S(  47,   76), S(  55,   72), S(  47,   71), S(  18,   33), S( -10,   -4), 
        S(  -9,  -10), S(   8,   13), S(  34,   42), S(  29,   54), S(  28,   56), S(  26,   38), S(   5,   11), S( -18,  -29), 
        S(  -6,  -10), S(  12,   -1), S(  19,   17), S(  16,   22), S(  13,   28), S(   5,    7), S(  -1,  -10), S( -15,  -22), 
        S(   9,  -24), S(   7,    2), S(   4,   -2), S(  -8,   14), S( -18,   14), S(   6,   -6), S(   8,  -37), S(   4,  -47), 
        S(   7,  -43), S(  42,  -43), S(  21,  -17), S( -45,   12), S(  -9,  -42), S( -15,  -18), S(  12,  -47), S(  28,  -79), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S( -17,    5), S(   4,  -10), S(  -3,   -5), S(  -6,  -17), S( -15,    1), S( -32,   -4), 
        S( -14,   10), S( -44,  -19), S( -65,  -48), S( -56,  -55), S( -43,  -52), S( -62,  -60), S( -91,  -97), S(-100,  -86), 
        S(-116,  -96), S(-107,  -94), S(-115, -102), S(-147, -120), S(-184, -140), S(-143, -154), S(-175, -153), S(-204, -237), 
        S(-149, -157), S(-211, -133), S(-271, -233), S(-134, -133), S(-239, -161), S(-154, -142), S( -79,  -22), S(-179, -131), 
        S(-178, -154), S(-332, -254), S(-291, -276), S( 102,  -16), S(-324, -165), S(-201, -166), S(-254, -193), S(-210, -189), 
        S(-189, -205), S(-211, -227), S(-234, -214), S(-235, -147), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };
}

namespace MiscEval
{
    constexpr int control = S(   3,    1);
}
