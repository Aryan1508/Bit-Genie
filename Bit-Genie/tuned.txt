
namespace PawnEval
{
    constexpr int value = S( 133,  131);

    constexpr int stacked = S( -25,    4);

    constexpr int isolated = S( -79,   64);

    constexpr int passed_connected = S( 100,  -75);

    constexpr int psqt[64]
    {
        S(  42,  -44), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(   6,   22), S(  28,  -25), S( -17,  -82), S( -33,  -45), S( -70,    8), S( -50,  -33), S(  -1,  -31), S( -23,  -20), 
        S(  46,  -16), S(  42,  -44), S(  15,  -55), S(  -9,  -54), S(  23,   28), S(  83,   42), S( -14,   99), S(  -8,   59), 
        S(  14,  -13), S(  34,  -74), S(  11,  -45), S(  -9,  -25), S(  -3,    4), S( -31,   53), S( -15,   10), S(  -3,   -9), 
        S( -25,  -29), S(  15,  -69), S(   4,  -56), S( -11,    1), S( -14,   19), S( -23,   10), S( -25,   -2), S( -13,  -41), 
        S( -35,  -12), S(  18,  -67), S(   2,  -52), S( -12,  -11), S(   7,  -12), S( -19,   20), S(   4,  -29), S( -60,   42), 
        S( -23,  -24), S(  22,  -80), S(  -9,  -38), S(  -5,  -32), S(   4,   -6), S(  21,  -14), S( -17,   17), S( -71,   37), 
        S(  15,  -34), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(  20,  -84), S(  16,  -36), S(  -8,  -44), S(  23,  -53), S(   3,  -30), S( -30,  -59), S(  10,  -14), 
        S( 300,  206), S( 269,  184), S( 291,  201), S( 261,  281), S( 245,  287), S( 240,  222), S( 219,  368), S( 289,  299), 
        S( 179,  159), S( 175,  134), S(  95,  200), S(  95,  206), S(  59,  203), S(  52,  236), S(  65,  239), S( 108,  214), 
        S(  51,  126), S(  90,   97), S(  51,   69), S(  -1,  116), S( -45,  141), S(  -7,  120), S(  27,  154), S(  58,  102), 
        S( -17,  104), S(  59,   19), S(  24,   49), S(  -9,   29), S(  -3,   21), S(   9,   47), S(  18,   54), S(  31,   50), 
        S(   3,   13), S(  17,  -41), S(  15,  -16), S( -29,   35), S(  -3,    2), S( -18,   24), S( -12,   19), S(  -9,   30), 
        S(  34,    3), S(  45,  -49), S(  14,  -28), S(  46,  -15), S(  14,   36), S( -15,   -7), S( -12,   -8), S(  61,   -5), 
        S(  55,   -5), S(  52,   -9), S(  37,  -36), S(  56,  -47), S(  46,  -20), S(  27,  -42), S(  13,  -10), S(  39,  -26), 
    };

    constexpr int passer_blocked[64]
    {
        S(  18,  -36), S(  50,  -46), S(  52,  -42), S(  48,    9), S(  28,  -56), S(  33,  -55), S(  19,  -48), S( -20,   10), 
        S( 131,   80), S( 153,  135), S( 142,  135), S( 174,  154), S( 157,  152), S(  81,  111), S(  69,   81), S(  54,   75), 
        S(  66,   83), S(  73,   72), S(  66,  116), S(  39,  123), S(  13,  134), S( -13,   84), S( -38,  106), S( -15,  114), 
        S(   6,  105), S(  58,    5), S(  48,    9), S(   7,   46), S( -19,   48), S( -21,   70), S(  -2,   22), S(  12,   47), 
        S(  55,   12), S(  24,   16), S(  17,  -10), S(   4,  -14), S( -30,   33), S( -36,   32), S( -15,    1), S(  -1,   28), 
        S( -34,   29), S( -22,   37), S( -11,   13), S( -18,   27), S( -29,   39), S(   3,   18), S( -26,   32), S( -31,   54), 
        S( -12,   46), S( -21,   48), S( -42,   53), S( -54,   80), S(  -1,   36), S( -30,   34), S( -47,   49), S( -53,   54), 
        S( -55,   72), S(   2,   79), S( -57,   65), S( -26,   43), S( -15,   29), S(   0,   36), S(   7,  -10), S(  -4,   58), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 376,  496);

    constexpr int mobility[9]
    {
        S(-144, -136), S( -37, -125), S( -43,  -11), S(  -2,  -17), S(  34,  -14), S(  49,   43), S(  56,   29), S(  27,   93), 
        S( 105,  -28), 
    };

    constexpr int psqt[64]
    {
        S( -36, -179), S(   5, -113), S(  21,  -38), S(  29,  -68), S(  33,  -20), S( -23,  -70), S( -77,  -20), S( -42, -184), 
        S(   8,  -29), S(  38,  -54), S(  25,  -46), S(  -1,   11), S( -30,    3), S( -21,   74), S( -41,   33), S(   8,  -96), 
        S(  26,  -97), S(  52,  -75), S(  40,  -51), S(  36,  -25), S(  36,  -47), S(  58,   13), S(  38,  -18), S(  42,  -60), 
        S(  40,  -74), S(  44,  -80), S(  62,  -57), S(  80,  -33), S(  71,  -58), S(  26,    7), S(  26,   -4), S(  61,  -51), 
        S(  38,  -87), S(  25,  -76), S(  48,  -36), S(  18,  -21), S(  22,  -13), S( -32,   27), S(   2,   25), S(  38,  -41), 
        S(   6,  -89), S(   0,  -56), S(  12,  -57), S(  -5,  -23), S( -19,    1), S( -47,  -11), S(  13,  -47), S( -18,  -91), 
        S( -15,  -67), S(  -7,  -76), S( -18,  -36), S( -33,   -5), S(  -3,  -33), S( -48,   34), S(   5,  -78), S(  12,  -21), 
        S( -62,  -75), S( -35,  -59), S( -69,  -24), S( -46,  -83), S( -20,    5), S( -13,   -4), S( -44,  -64), S(  -3,   -9), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 519,  360);

    constexpr int mobility[14]
    {
        S(  -1, -120), S( -36, -127), S(  22,  -57), S(  17,  -13), S(  57,  -21), S(   7,   82), S(  26,   82), S(  38,   68), 
        S(  91,   60), S(  58,   65), S(  88,   32), S(  60,   66), S(  62,   45), S(   3,   59), 
    };

    constexpr int psqt[64]
    {
        S(  33,  -23), S( -11,    1), S(  38,  -39), S(  24,  -16), S(  46,  -39), S(  10,  -25), S(  32,  -33), S(  15,   -2), 
        S(  21,  -20), S(  47,  -18), S(   3,  -14), S(  15,  -34), S(  13,  -23), S(  -2,  -37), S(  24,  -24), S( -24,  -16), 
        S(   9,    8), S( -11,   -1), S(  23,  -22), S(   0,  -16), S(  -6,   -5), S(  44,    2), S( -14,   13), S( -20,   18), 
        S(  15,   34), S( -22,   40), S( -35,   20), S( -27,   38), S( -26,   30), S( -54,   51), S( -74,   37), S( -55,   63), 
        S( -27,   27), S( -30,   22), S( -33,   18), S( -10,   31), S( -37,   30), S( -26,   47), S(   7,   40), S(  46,   68), 
        S( -49,  -13), S( -19,   39), S(   1,   13), S(  16,    4), S(  37,   21), S(   3,    6), S( -11,   -5), S( -36,  -10), 
        S(  49,   14), S(  44,   20), S(  77,   26), S(  42,   25), S(  70,   22), S(  48,   12), S(  94,   31), S(  42,  -15), 
        S(  37,  -49), S(  62,   20), S(  67,   19), S(  74,   -9), S(  74,    2), S(  34,   23), S(  16,   -2), S(  58,  -26), 
    };
}

namespace RookEval
{
    constexpr int value = S( 648,  749);

    constexpr int open_file = S(  69,  -13);

    constexpr int semi_open_file = S(  82,  -24);

    constexpr int mobility[15]
    {
        S(   3, -133), S(   7, -129), S(  49,    0), S(  41,    6), S(  49,   15), S(  64,   19), S(  55,   15), S(  68,   38), 
        S(  78,   -8), S(  78,  -22), S(  78,  -23), S(  64,  -25), S(  76,  -25), S(  69,   -8), S(  65,  -34), 
    };

    constexpr int psqt[64]
    {
        S(  58,  -75), S(  50,  -73), S( 104,  -90), S(  72,  -73), S(  34,  -49), S(  60,  -84), S( -17,   37), S(   5,  -14), 
        S(  -4,  -29), S(  43,  -55), S(  72,  -61), S(  47,  -44), S( -23,   25), S(  -8,    8), S(  -4,   45), S( -48,  118), 
        S( -52,   40), S(  41,  -94), S( -10,  -14), S(  48,  -93), S( -65,   84), S( -39,   98), S(  38,    4), S(  15,   -1), 
        S(   0,    7), S(  -3,    8), S(   3,   12), S(   0,    4), S(  -2,   -1), S(   4,   14), S(   5,    0), S(   2,   -2), 
        S( -11,   -2), S( -14,    0), S( -12,    5), S(  -8,    1), S(  -8,   -5), S( -12,   -2), S( -31,   41), S(  40,  -76), 
        S(  32,  -80), S( -59,   19), S(  46,  -49), S( -68,   19), S(  40,  -37), S( -61,   39), S(  60,  -28), S( -62,  -29), 
        S(   9,  -79), S(  -7,   38), S(  27,  -59), S( -12,  -26), S(   9,  -51), S(  59,  -86), S(  72,  -88), S(   2,  -29), 
        S(  71,  -42), S(  -5,   70), S(  59,  -76), S( -76,   44), S(  13, -105), S( -69,   -3), S(  33, -132), S( -84,  -27), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1389, 1404);

    constexpr int mobility[28]
    {
        S( -83,    8), S(  -4,  -75), S( -61,  -32), S(  19, -141), S( -36, -128), S(  79, -129), S(  29,  -66), S(  58, -109), 
        S(   2,   33), S(  55,  -48), S(   5,   39), S(  71,  -37), S(  25,   49), S(  99,  -44), S(  46,   34), S( 107,    0), 
        S(  53,   52), S( 124,  -11), S(  77,   81), S( 121,   -4), S(  82,   57), S( 125,  -19), S(  55,   71), S( 101,   22), 
        S(  73,   92), S( 119,   14), S( 112,   94), S( 140,   81), 
    };

    constexpr int psqt[64]
    {
        S(  32,  -21), S(  77,  -14), S(  81,    3), S( 102,  -32), S( 109,   38), S( 117,  -30), S(  81,   43), S( 102,   13), 
        S(  31,  -58), S(  24,  -37), S(  -1,   19), S(  64,   -2), S(  75,   52), S(  63,   41), S(  48,   14), S(  97,    4), 
        S(  41,  -56), S(  26,  -31), S(  50,  -53), S(  50,  -25), S(  49,   23), S( 127,    9), S( 125,   23), S(  89,  101), 
        S(  39,  -40), S(  43,    0), S(   3,    7), S(  38,    3), S(  37,   13), S(  48,   17), S(  84,   -5), S(   9,    2), 
        S(  24,  -57), S( -29,  -33), S( -11,  -11), S(  28,    4), S(  14,   17), S(  22,   61), S(  20,   47), S(  11,   87), 
        S(  20,    7), S(  16,   13), S(  16,   21), S(  16,   20), S(  19,   18), S(  22,   21), S(  33,   29), S(  24,   23), 
        S(  10,   -8), S(  15,    1), S(  23,   15), S(  27,   19), S(  26,   16), S(  24,   11), S(  22,    3), S(  32,    5), 
        S(  13,   16), S(  13,    5), S(  21,   20), S(  29,   15), S(  26,   14), S(  11,   -9), S(   1,  -10), S( -15,  -33), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S( -92,  -75), S( -32,  -27), S( -32,  -35), S( -17,   28), S(  -4,  -12), S(  31,  -24), S(  12,  -14), S( -11,  -32), 
        S( -11,  -18), S(   7,   49), S( -35,   86), S(  23,    9), S(  19,   23), S(  34,   30), S(  17,   18), S(   0,    6), 
        S(  11,   11), S(  53,  102), S(  25,   52), S(  52,   31), S(  15,   80), S(  45,   40), S(  41,   64), S( -15,   55), 
        S( -47,   61), S( -17,  104), S( -13,  155), S( -19,  178), S(  -3,  184), S( -36,  170), S(  27,   45), S(  -2,    7), 
        S( -22,  -11), S(  54,  -74), S(  71,  -51), S(  74,  -32), S(  72,  -12), S(  51,  -15), S(  45,  -40), S(   8,  -30), 
        S(  -6,   -6), S(  11,   23), S(   7,   69), S(  12,   74), S( -20,  110), S( -40,  119), S(  -1,    6), S( -18,   -7), 
        S(  23,  -19), S(  16,    4), S(  13,   11), S( -17,   32), S( -20,   32), S(  -4,   13), S(  22,  -22), S(  17,  -33), 
        S(   2,  -58), S(  55,  -62), S(  36,  -24), S( -44,   30), S(   2,  -27), S( -23,   33), S(  71, -141), S(  75, -162), 
    };

    constexpr int safety_table[100]
    {
        S(  53,  -43), S(  47,  -57), S( -34,  -15), S(  20,  -12), S(  -3,   -8), S(  30,  -36), S(   5,   -8), S(  45,  -50), 
        S(   5,  -23), S(   3,  -65), S( -44,  -81), S( -26, -101), S( -25,  -70), S( -43,  -79), S( -74,  -97), S( -84,  -78), 
        S( -78,  -59), S( -70,  -77), S( -90,  -57), S(-130, -135), S(-207, -146), S(-175, -168), S(-210, -213), S(-206, -282), 
        S(-210, -225), S(-243, -192), S(-301, -287), S(-160, -168), S(-257, -196), S(-174, -180), S(-101,  -59), S(-191, -149), 
        S(-188, -177), S(-338, -275), S(-289, -275), S( 109,   -4), S(-322, -160), S(-197, -161), S(-257, -198), S(-210, -190), 
        S(-189, -205), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -11), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-370, -447), 
        S(-415, -372), S(-414, -402), S(-437, -376), S(-449, -387), 
    };
}

namespace MiscEval
{
    constexpr int control = S(   5,   -5);
}
