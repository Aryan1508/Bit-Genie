
namespace PawnEval
{
    constexpr int value = S( 108,  157);

    constexpr int stacked = S(  -4,  -19);

    constexpr int isolated = S( -25,  -11);

    constexpr int passed_connected = S(  11,   24);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(   4,   27), S( -19,   14), S( -44,   -7), S( -64,  -33), S( -43,  -18), S( -40,   -5), S( -39,    8), S( -65,   32), 
        S( -23,   61), S( -13,   41), S(   2,    5), S(  -8,  -41), S(   8,  -38), S(  67,   -8), S(  52,   19), S(   9,   30), 
        S( -33,   33), S( -23,   11), S(  -9,   -3), S(  -5,  -18), S(  17,  -24), S(   8,  -12), S(  -5,    2), S( -14,    9), 
        S( -39,    3), S( -31,   -6), S( -12,  -18), S(   7,  -18), S(   8,  -17), S(  -1,  -18), S( -20,   -9), S( -25,  -17), 
        S( -38,   -1), S( -32,   -6), S( -15,  -15), S(  -9,  -19), S(   7,  -15), S(  -8,  -10), S(   8,  -14), S( -15,  -14), 
        S( -36,    0), S( -30,   -9), S( -21,  -12), S( -17,  -19), S(  -4,   -7), S(   9,  -10), S(  16,  -17), S( -23,  -20), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 260,  255), S( 241,  254), S( 258,  264), S( 267,  268), S( 254,  254), S( 246,  250), S( 279,  286), S( 287,  283), 
        S( 151,  160), S( 149,  165), S( 114,  158), S( 102,  160), S(  96,  148), S( 109,  144), S( 147,  157), S( 147,  167), 
        S(  69,   99), S(  57,  100), S(  33,   66), S(  27,   58), S(  17,   60), S(  39,   64), S(  62,  100), S(  64,   95), 
        S(  29,   54), S(  24,   35), S(   2,   26), S( -11,   15), S(  -8,   18), S(   7,   29), S(  26,   50), S(  38,   54), 
        S(  -3,    8), S( -16,   -3), S( -18,   -1), S( -22,    3), S( -26,   -7), S( -15,   -9), S(  -4,   -4), S(  15,    4), 
        S(  -5,    2), S(  -4,    0), S( -12,   -5), S(   4,   17), S(   8,   12), S( -10,   -5), S(   6,   -8), S(  30,    1), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 117,  131), S( 135,  132), S( 143,  135), S( 154,  148), S( 122,  119), S(  99,  101), S(  70,   71), S(  65,   71), 
        S(  64,   66), S(  61,   49), S(  70,   54), S(  67,   62), S(  51,   54), S(  30,   32), S(  15,   17), S(   0,   36), 
        S(  33,   32), S(  44,   23), S(  30,   20), S(  28,   20), S(   9,   17), S(  13,   11), S(  18,    8), S(   4,    3), 
        S(  27,   10), S(  13,    3), S(  -5,   -1), S( -11,    4), S(  -8,    5), S(  -6,   -3), S(   4,    2), S(   0,    1), 
        S(  -1,  -11), S(  -2,   -4), S( -21,   -6), S( -26,    1), S( -24,   -1), S(  -5,    0), S(  -9,   -6), S( -11,   -9), 
        S(  -7,  -22), S(  -3,  -10), S( -18,   -4), S( -11,   13), S(   2,   11), S(  -4,   -6), S(   5,  -12), S(   4,  -13), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 415,  431);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-101,  -85), S( -39,  -37), S(  -8,   -9), S( -25,  -19), S(  -8,   -4), S( -50,  -49), S( -47,  -47), S(-102,  -98), 
        S( -32,  -16), S( -22,    3), S(   7,    0), S(  11,    9), S(  -3,   -9), S(  42,   -6), S(   1,   -4), S( -32,  -23), 
        S( -29,  -20), S(  15,    2), S(  19,   13), S(  37,   17), S(  53,    5), S(  59,   18), S(  31,   10), S(   2,   -2), 
        S(   3,    6), S(   4,   11), S(  31,   20), S(  58,   25), S(  33,   17), S(  51,   27), S(  15,   13), S(  32,    6), 
        S(  -9,    0), S(  -2,    0), S(   8,   17), S(  15,   26), S(  25,   24), S(  19,   11), S(  16,   13), S(   7,    3), 
        S( -37,  -16), S( -21,   -4), S(  -9,   -8), S(  -2,   10), S(  13,   10), S(  -4,   -7), S(   7,   -5), S( -19,  -18), 
        S( -21,  -10), S( -22,  -11), S( -25,  -10), S(   3,  -11), S(  -5,  -13), S(  -8,  -18), S( -10,   -6), S(  -5,   -1), 
        S( -34,  -31), S( -20,  -19), S( -37,  -20), S( -23,  -11), S( -21,   -9), S( -14,  -15), S( -14,  -22), S( -22,  -11), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 453,  405);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -25,   -7), S( -15,   -6), S( -28,  -11), S( -18,   -1), S( -16,  -10), S( -16,   -5), S(  -5,   -3), S( -22,  -14), 
        S( -25,  -13), S( -16,    2), S( -12,    3), S( -21,  -14), S(  -7,   -4), S( -20,    0), S( -15,    0), S( -19,  -15), 
        S(   6,   10), S(  12,   10), S(  10,    8), S(  16,    5), S(   7,    1), S(  34,   22), S(  28,   10), S(  34,   10), 
        S(  -5,    8), S(  -1,   21), S(   8,   11), S(  23,   26), S(  29,   18), S(   9,   15), S(   8,    0), S( -11,    8), 
        S(   0,    8), S(  -9,    8), S(  -8,   20), S(  18,   21), S(  17,   14), S(  -2,   11), S(  -5,   -2), S(  11,    5), 
        S(   5,    4), S(   8,   22), S(   4,   15), S(   6,    9), S(   4,   17), S(  10,   10), S(  13,    5), S(  18,    6), 
        S(  20,   10), S(  12,    1), S(  14,   -6), S(  -4,    4), S(   6,    6), S(  12,   -1), S(  32,   13), S(  15,   -4), 
        S(  15,   -4), S(  21,    1), S(   9,    1), S(   2,    6), S(   7,    7), S(  -3,   20), S(  -4,   -3), S(  15,    5), 
    };
}

namespace RookEval
{
    constexpr int value = S( 596,  782);

    constexpr int open_file = S(  28,   12);

    constexpr int semi_open_file = S(  19,    9);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  25,   13), S(   9,   21), S(  43,   20), S(  25,   26), S(  13,   19), S(  19,   21), S(  15,   17), S(  37,   12), 
        S(  -1,   12), S(  -7,   35), S(  13,   38), S(  22,   29), S(  13,   26), S(  23,   23), S(  27,   21), S(  36,   11), 
        S(  -5,   10), S(  12,   15), S(   1,   24), S(  -1,    6), S(  22,    0), S(  33,    3), S(  45,    4), S(  22,   -7), 
        S(  -6,   10), S(  -9,   12), S(  -3,   14), S(  -3,    6), S(  -5,   -5), S(  -1,    7), S(  10,    1), S(   4,   -5), 
        S( -17,    1), S( -19,   -3), S( -19,    0), S( -13,    2), S( -12,   -2), S( -20,   -1), S(  -1,   -8), S(  -8,  -14), 
        S( -23,   -4), S( -30,    3), S( -23,   -5), S( -14,  -11), S( -13,  -12), S(  -6,  -11), S(  10,  -19), S(  -2,  -24), 
        S( -23,  -13), S( -26,   -8), S( -16,  -10), S( -15,  -11), S(  -6,  -13), S(  -4,  -13), S(  -1,  -17), S( -22,   -6), 
        S( -14,    9), S( -11,   -2), S( -13,    9), S(   0,  -11), S(   6,  -12), S(   8,   -3), S(  24,  -29), S( -16,  -18), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1322, 1494);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   6,    6), S(  23,   33), S(  36,   44), S(  40,   39), S(  58,   61), S(  51,   50), S(  46,   44), S(  38,   53), 
        S(   4,   -9), S( -12,    6), S(   5,   28), S(  18,   44), S(  28,   51), S(  35,   68), S(  15,   60), S(  73,   61), 
        S(  15,    5), S(   9,   21), S(  15,   24), S(  24,   34), S(  29,   57), S(  72,   76), S(  71,   76), S(  79,   68), 
        S(   9,   12), S(  19,   15), S(   3,   18), S(  12,   28), S(  14,   32), S(  23,   41), S(  33,   53), S(  38,   32), 
        S(  11,   18), S(   8,   18), S(   8,   19), S(  16,   20), S(  16,   25), S(  13,   25), S(  26,   37), S(  39,   30), 
        S(   8,    5), S(  17,   11), S(  13,   24), S(  14,   17), S(  19,   17), S(  19,   25), S(  35,   26), S(  28,   21), 
        S(  16,   -3), S(  19,    2), S(  24,    9), S(  29,   12), S(  28,    9), S(  29,    5), S(  27,   -3), S(  38,    4), 
        S(  19,   18), S(  18,    6), S(  21,   16), S(  29,   12), S(  26,    9), S(  17,   -6), S(   8,   -6), S(  -8,  -28), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S( -93,  -78), S( -31,  -29), S( -16,   -3), S( -23,  -23), S( -23,    1), S(   7,   11), S(   0,   -2), S( -15,  -11), 
        S(  -6,   -9), S(  24,   33), S(  16,   24), S(  25,   15), S(  21,   29), S(  36,   36), S(  19,   25), S(   0,    9), 
        S(  10,   14), S(  24,   56), S(  29,   68), S(  18,   79), S(  21,   74), S(  52,   60), S(  49,   54), S(   5,   18), 
        S( -11,    0), S(  22,   38), S(  26,   66), S(  40,   81), S(  52,   77), S(  30,   72), S(  23,   48), S(  -6,   11), 
        S( -25,   -7), S(  -4,   23), S(  18,   49), S(  28,   60), S(  15,   56), S(   4,   40), S(  -2,   18), S( -24,  -11), 
        S( -19,  -12), S(  -5,    5), S(   0,   23), S(   1,   32), S( -11,   36), S( -12,   16), S(  -8,   -1), S( -26,  -10), 
        S(  28,  -14), S(  12,   -3), S(   6,    5), S( -26,   23), S( -29,   23), S( -12,    5), S(  18,  -20), S(  17,  -28), 
        S(   9,  -52), S(  64,  -53), S(  40,  -22), S( -53,   21), S(  -2,  -32), S( -36,   -8), S(  38,  -55), S(  31,  -88), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  -8,  -11), S( -19,   -5), S( -24,    7), S( -27,   -5), S( -39,    7), S( -15,  -15), 
        S( -25,   -4), S( -37,  -33), S( -59,  -49), S( -63,  -55), S( -45,  -46), S( -68,  -51), S( -84,  -92), S( -99,  -76), 
        S(-107,  -81), S(-103,  -80), S(-109,  -86), S(-143, -107), S(-189, -125), S(-162, -135), S(-170, -137), S(-195, -218), 
        S(-159, -147), S(-211, -131), S(-266, -226), S(-137, -124), S(-237, -151), S(-150, -132), S( -83,  -18), S(-179, -124), 
        S(-174, -146), S(-332, -251), S(-290, -270), S( 104,   -9), S(-324, -163), S(-199, -162), S(-257, -196), S(-210, -189), 
        S(-189, -205), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    4);
}
