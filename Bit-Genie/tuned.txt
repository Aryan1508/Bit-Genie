
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 108,  152);

    constexpr int stacked = S(  -4,  -17);

    constexpr int isolated = S( -25,  -13);

    constexpr int passed_connected = S(  10,   20);

    constexpr int passed_tempo = S(  17,   17);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  -2,   27), S( -22,   16), S( -51,  -11), S( -67,  -38), S( -47,  -22), S( -38,  -14), S( -45,    2), S( -68,   30), 
        S( -27,   55), S( -17,   37), S(   1,    4), S(  -6,  -38), S(  13,  -36), S(  71,   -8), S(  54,   19), S(  13,   27), 
        S( -36,   26), S( -26,    7), S(  -8,   -6), S(  -3,  -23), S(  19,  -23), S(  13,  -18), S(  -4,   -3), S( -17,    4), 
        S( -44,    0), S( -34,   -7), S( -12,  -17), S(   8,  -20), S(   7,  -19), S(   2,  -19), S( -19,  -13), S( -26,  -19), 
        S( -43,   -7), S( -34,  -10), S( -15,  -16), S(  -9,  -17), S(   8,  -14), S(  -4,  -10), S(   9,  -20), S( -16,  -22), 
        S( -41,   -3), S( -32,  -11), S( -23,   -8), S( -14,  -19), S(  -5,   -7), S(  14,   -9), S(  19,  -20), S( -22,  -25), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 250,  246), S( 238,  257), S( 249,  262), S( 261,  258), S( 246,  245), S( 244,  244), S( 274,  288), S( 283,  280), 
        S( 145,  152), S( 141,  167), S( 107,  158), S(  95,  161), S(  90,  146), S( 102,  141), S( 139,  160), S( 141,  167), 
        S(  63,   88), S(  51,   85), S(  28,   58), S(  22,   49), S(  11,   47), S(  32,   59), S(  56,   83), S(  57,   79), 
        S(  23,   46), S(  18,   30), S(  -3,   20), S( -15,    9), S( -13,    9), S(   2,   18), S(  22,   38), S(  30,   39), 
        S(  -8,    3), S( -18,   -5), S( -23,   -4), S( -25,   -1), S( -28,  -11), S( -13,  -14), S(   2,   -2), S(  20,   -6), 
        S(  -8,   -1), S(  -4,   -3), S(  -9,   -5), S(   0,   14), S(   6,    7), S(   0,   -8), S(   9,   -8), S(  32,   -4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 120,  135), S( 136,  129), S( 149,  136), S( 158,  145), S( 126,  117), S( 102,   96), S(  65,   65), S(  63,   70), 
        S(  64,   65), S(  64,   48), S(  73,   51), S(  68,   63), S(  55,   52), S(  35,   33), S(  18,   12), S(   0,   33), 
        S(  43,   35), S(  47,   27), S(  30,   18), S(  26,   22), S(   9,   18), S(  20,   11), S(  21,    9), S(   9,    7), 
        S(  34,   17), S(  20,    8), S(  -8,    6), S(  -9,    7), S(  -9,   10), S(  -1,    1), S(   9,    8), S(  11,    5), 
        S(   4,   -9), S(  -2,    0), S( -22,   -3), S( -28,    4), S( -23,    1), S(   1,   -5), S(   2,   -1), S(   5,   -2), 
        S(  -2,  -22), S(   1,   -8), S( -15,   -1), S( -12,   12), S(   1,   11), S(   2,   -3), S(  11,   -2), S(   9,   -6), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 422,  428);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-106,  -86), S( -42,  -41), S( -12,  -13), S( -27,  -23), S(  -8,   -2), S( -54,  -49), S( -48,  -46), S(-104,  -96), 
        S( -31,  -18), S( -26,    0), S(  21,   -8), S(  14,    5), S(  11,   -5), S(  47,  -11), S(   5,   -9), S( -26,  -20), 
        S( -26,  -18), S(  20,   -7), S(  22,   16), S(  43,   16), S(  58,    7), S(  65,   12), S(  35,    1), S(   7,  -10), 
        S(  -2,   -3), S(   2,   14), S(  27,   24), S(  60,   25), S(  31,   22), S(  54,   25), S(  11,   12), S(  34,    0), 
        S( -11,   -1), S(  -6,    0), S(   8,   22), S(  16,   26), S(  24,   27), S(  22,   13), S(  20,    9), S(   8,   -1), 
        S( -34,  -17), S( -23,   -3), S( -10,   -3), S(   0,   14), S(  16,   13), S(  -4,   -4), S(   7,  -11), S( -24,  -15), 
        S( -26,  -17), S( -26,  -16), S( -25,  -11), S(   1,  -12), S(  -6,  -10), S(  -3,  -17), S(  -7,  -13), S(  -8,   -2), 
        S( -41,  -30), S( -22,  -26), S( -41,  -25), S( -28,  -18), S( -25,  -13), S( -18,  -17), S( -15,  -29), S( -25,  -17), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 455,  407);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -27,   -3), S( -19,   -2), S( -30,   -7), S( -23,   -5), S( -19,   -7), S( -21,   -7), S(  -8,    1), S( -25,  -12), 
        S( -24,   -6), S( -15,    5), S( -16,    3), S( -20,  -10), S(  -7,   -4), S(  -6,    7), S( -11,    2), S( -12,  -11), 
        S(  -4,   14), S(  13,    9), S(  14,   10), S(  20,    6), S(  12,    7), S(  37,   18), S(  31,    7), S(  33,    8), 
        S(  -9,    8), S(  -3,   20), S(   6,   17), S(  28,   32), S(  28,   22), S(  15,   18), S(   6,    4), S( -12,   11), 
        S(  -7,    9), S( -12,    9), S(  -8,   23), S(  21,   24), S(  17,   19), S(  -1,   15), S(  -5,    3), S(  12,   -4), 
        S(   4,    6), S(   6,   18), S(   4,   15), S(   5,   12), S(   7,   20), S(  10,   12), S(  12,    5), S(  19,    4), 
        S(  20,    3), S(  13,   -1), S(  15,  -10), S(  -2,    3), S(   6,    7), S(  15,    2), S(  34,   11), S(  16,   -8), 
        S(  13,   -5), S(  22,    2), S(   8,   -4), S(   1,    5), S(   2,    8), S(  -3,   13), S(   0,   -1), S(  18,   -1), 
    };
}

namespace RookEval
{
    constexpr int value = S( 591,  776);

    constexpr int open_file = S(  26,   16);

    constexpr int semi_open_file = S(  20,    6);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  21,   19), S(   7,   21), S(  37,   24), S(  22,   28), S(  13,   26), S(  21,   23), S(  18,   19), S(  39,   16), 
        S(  -5,   14), S( -11,   30), S(  10,   32), S(  21,   23), S(  10,   19), S(  26,   20), S(  30,   14), S(  39,    8), 
        S( -10,    8), S(  10,   11), S(  -3,   15), S(  -5,    8), S(  21,   -4), S(  35,   -3), S(  50,   -1), S(  25,   -8), 
        S( -12,    5), S( -10,    7), S(  -8,   13), S(  -7,    5), S(  -8,   -5), S(  -3,    2), S(  12,   -6), S(   5,  -11), 
        S( -24,   -6), S( -25,   -1), S( -23,    3), S( -18,   -1), S( -17,   -5), S( -24,   -3), S(  -2,  -11), S( -13,  -17), 
        S( -30,  -12), S( -33,   -1), S( -28,  -10), S( -19,  -13), S( -15,  -15), S(  -9,  -16), S(  12,  -25), S(  -8,  -29), 
        S( -32,  -17), S( -26,  -13), S( -22,  -11), S( -19,  -14), S( -12,  -18), S(  -6,  -18), S(   6,  -23), S( -34,  -12), 
        S( -18,    3), S( -15,   -5), S( -18,    5), S(  -5,  -11), S(   2,  -16), S(   2,   -9), S(   7,  -24), S( -17,  -23), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1311, 1492);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   8,    9), S(  19,   31), S(  34,   45), S(  44,   45), S(  56,   58), S(  56,   53), S(  50,   45), S(  42,   57), 
        S(  11,   -4), S( -15,   11), S(   6,   34), S(  14,   50), S(  23,   56), S(  44,   74), S(  21,   64), S(  80,   64), 
        S(  17,    5), S(   6,   17), S(  19,   27), S(  19,   42), S(  39,   63), S(  74,   75), S(  76,   72), S(  79,   65), 
        S(   2,   15), S(   9,   15), S(   2,   21), S(   8,   33), S(  15,   38), S(  22,   46), S(  34,   59), S(  33,   37), 
        S(   8,   14), S(   2,   22), S(   3,   23), S(  10,   26), S(  11,   32), S(  13,   32), S(  23,   37), S(  31,   34), 
        S(   7,    8), S(  16,    7), S(  11,   19), S(  13,   14), S(  18,   17), S(  20,   22), S(  33,   21), S(  27,   21), 
        S(  16,   -4), S(  17,   -5), S(  24,    2), S(  31,    6), S(  29,    4), S(  30,   -1), S(  27,   -8), S(  40,   -2), 
        S(  19,   13), S(  17,   -2), S(  17,    9), S(  29,    4), S(  24,    4), S(  13,  -12), S(  10,  -10), S(  -5,  -27), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S( -91,  -77), S( -30,  -29), S( -15,   -5), S( -20,  -18), S( -23,    2), S(   6,   12), S(   2,    3), S( -15,  -15), 
        S(  -6,   -9), S(  23,   27), S(  14,   26), S(  27,   18), S(  22,   31), S(  38,   41), S(  22,   29), S(   1,   12), 
        S(   7,   10), S(  21,   45), S(  24,   56), S(  13,   66), S(  20,   67), S(  57,   65), S(  53,   58), S(   9,   22), 
        S( -10,    0), S(  22,   35), S(  19,   57), S(  33,   70), S(  45,   68), S(  24,   64), S(  20,   44), S( -10,   11), 
        S( -29,   -8), S(  -6,   15), S(  12,   41), S(  21,   54), S(   9,   52), S(  -1,   38), S(  -7,   18), S( -30,   -6), 
        S( -20,  -14), S(  -3,    2), S(  -5,   20), S(  -4,   30), S( -15,   34), S( -17,   21), S( -10,    6), S( -31,   -5), 
        S(  34,  -19), S(  16,   -5), S(   5,    5), S( -30,   19), S( -32,   20), S( -15,    6), S(  27,  -12), S(  24,  -26), 
        S(  14,  -56), S(  68,  -50), S(  41,  -27), S( -59,   15), S(  -2,  -33), S( -39,  -11), S(  42,  -50), S(  36,  -83), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S( -14,  -14), S( -22,   -6), S( -28,    5), S( -31,   -8), S( -40,    4), S( -14,  -21), 
        S( -30,   -9), S( -42,  -40), S( -66,  -56), S( -71,  -59), S( -52,  -55), S( -74,  -61), S( -91,  -94), S(-102,  -84), 
        S(-110,  -88), S(-107,  -85), S(-113,  -88), S(-147, -104), S(-193, -119), S(-164, -131), S(-172, -127), S(-192, -213), 
        S(-162, -141), S(-211, -131), S(-270, -229), S(-142, -130), S(-238, -152), S(-154, -134), S( -86,  -19), S(-181, -125), 
        S(-177, -148), S(-333, -251), S(-289, -268), S( 103,  -10), S(-324, -163), S(-199, -162), S(-257, -196), S(-211, -189), 
        S(-189, -205), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    2);
}
