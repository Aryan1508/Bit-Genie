
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 107,  150);

    constexpr int stacked = S(  -4,  -17);

    constexpr int isolated = S( -26,  -14);

    constexpr int passed_connected = S(  13,   17);

    constexpr int passed_tempo = S(  27,   27);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  -5,   35), S( -33,   16), S( -48,   -3), S( -56,  -45), S( -44,  -27), S( -50,   -4), S( -46,    3), S( -75,   28), 
        S( -27,   48), S( -22,   30), S(   7,   -3), S(   3,  -34), S(  17,  -30), S(  76,   -2), S(  53,   22), S(  11,   28), 
        S( -40,   23), S( -27,    6), S(  -6,   -4), S(  -3,  -17), S(  23,  -20), S(  11,  -13), S(  -4,   -3), S( -13,    0), 
        S( -47,   -2), S( -35,   -8), S( -10,  -17), S(   8,  -14), S(  11,  -16), S(   2,  -18), S( -18,  -14), S( -24,  -20), 
        S( -47,   -4), S( -36,   -8), S( -14,  -12), S(  -8,  -15), S(  10,   -9), S(  -4,   -9), S(   9,  -19), S( -16,  -18), 
        S( -45,   -4), S( -34,  -11), S( -21,  -10), S( -15,  -16), S(  -2,   -3), S(  12,  -10), S(  18,  -24), S( -25,  -24), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 266,  244), S( 227,  264), S( 248,  276), S( 261,  274), S( 253,  264), S( 233,  250), S( 270,  292), S( 278,  273), 
        S( 137,  171), S( 134,  178), S(  96,  163), S(  84,  144), S(  77,  141), S(  92,  154), S( 137,  168), S( 130,  177), 
        S(  56,  105), S(  41,  104), S(  16,   63), S(  11,   51), S(   0,   52), S(  23,   70), S(  46,  107), S(  48,  106), 
        S(  15,   57), S(   9,   38), S( -13,   21), S( -24,    7), S( -25,   15), S( -10,   32), S(   9,   55), S(  23,   58), 
        S(  -8,    5), S( -28,   -7), S( -27,   -8), S( -34,   -8), S( -38,  -16), S( -28,  -16), S( -23,    4), S(  19,    0), 
        S(  -7,    3), S( -13,   -3), S( -23,  -10), S(  -7,    6), S(  -5,   -2), S( -18,  -14), S(   4,  -10), S(  27,   -4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 107,  143), S( 133,  123), S( 150,  122), S( 165,  135), S( 121,  107), S( 108,  102), S(  72,   63), S(  57,   77), 
        S(  66,   63), S(  77,   52), S(  84,   41), S(  63,   49), S(  48,   40), S(  42,   26), S(  26,   10), S( -11,   24), 
        S(  45,   42), S(  57,   35), S(  32,   24), S(  28,   20), S(   4,   18), S(  12,   15), S(  28,   19), S(  14,   16), 
        S(  40,   20), S(  26,   14), S(  -6,    6), S( -12,    9), S( -14,   15), S(  -8,    8), S(  13,   14), S(  -3,   12), 
        S(  14,  -14), S(  12,    8), S( -24,    0), S( -32,    3), S( -33,    6), S( -13,    6), S( -13,    8), S(  -9,    3), 
        S(   8,  -16), S(   8,    0), S( -21,    8), S( -19,   15), S(  -3,    6), S(  -4,   -7), S(  16,  -12), S(  14,   -3), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 416,  432);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-114,  -79), S( -46,  -39), S( -16,  -14), S( -34,  -17), S( -12,   -6), S( -60,  -60), S( -51,  -50), S(-101,  -88), 
        S( -39,  -19), S( -31,    6), S(   3,    4), S(  23,    2), S( -11,  -16), S(  56,  -15), S(   2,   -8), S( -24,  -23), 
        S( -30,  -14), S(  22,    0), S(  19,   19), S(  38,   13), S(  67,   -2), S(  72,    6), S(  43,    1), S(  11,  -12), 
        S(   4,   11), S(   3,   16), S(  31,   21), S(  60,   18), S(  33,   14), S(  54,   22), S(  13,   12), S(  40,   -8), 
        S( -10,    4), S(  -1,    8), S(   6,   19), S(  14,   24), S(  24,   24), S(  19,    8), S(  16,    8), S(   7,    0), 
        S( -40,  -14), S( -23,    1), S( -10,   -9), S(  -6,   18), S(  13,    9), S(  -5,   -8), S(   8,   -8), S( -20,  -14), 
        S( -30,   -4), S( -27,  -10), S( -28,   -6), S(   1,  -10), S(  -7,  -12), S(  -9,  -18), S(  -8,   -2), S(  -9,   11), 
        S( -38,  -22), S( -21,  -20), S( -48,  -11), S( -28,   -7), S( -24,   -9), S( -17,  -13), S( -17,  -15), S( -30,  -10), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 454,  408);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -32,    5), S( -21,    7), S( -23,    2), S( -29,    2), S( -26,    1), S( -26,    1), S(  -8,   -6), S( -29,  -10), 
        S( -28,   -1), S( -23,    8), S( -21,   12), S( -18,   -3), S( -13,   -4), S( -28,   -3), S( -22,   -1), S( -16,  -13), 
        S(   6,   19), S(  19,   16), S(   9,   10), S(  24,   -3), S(  11,   -6), S(  47,   18), S(  33,   10), S(  37,    8), 
        S( -10,   19), S(  -4,   26), S(   9,    8), S(  23,   20), S(  33,   14), S(   9,   10), S(   7,    7), S( -19,   19), 
        S(  -3,   17), S( -13,   14), S(  -8,   16), S(  17,   20), S(  18,   10), S(  -1,    6), S(  -9,    4), S(  13,   -2), 
        S(   6,   -4), S(   7,   19), S(   3,   16), S(   4,   10), S(   4,   19), S(   9,    8), S(  14,    0), S(  18,    8), 
        S(  19,   11), S(  12,    2), S(  15,  -10), S(  -5,    3), S(   6,    5), S(  15,   -8), S(  35,    7), S(  20,  -17), 
        S(  21,    4), S(  25,   -8), S(   8,    0), S(  -4,   12), S(   4,   16), S(  -6,   21), S(   5,    1), S(  26,   -1), 
    };
}

namespace RookEval
{
    constexpr int value = S( 584,  774);

    constexpr int open_file = S(  28,   14);

    constexpr int semi_open_file = S(  24,    2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  17,   13), S(  -2,   21), S(  35,   22), S(  13,   28), S(   3,   22), S(  22,   29), S(  12,   18), S(  44,   11), 
        S( -10,   18), S( -21,   38), S(  -2,   44), S(  14,   30), S(  -1,   30), S(  16,   26), S(  24,   23), S(  49,    4), 
        S( -20,   18), S(   4,   19), S( -11,   27), S( -13,    7), S(  28,   -9), S(  36,   -3), S(  60,   -2), S(  34,  -16), 
        S( -20,   17), S( -24,   20), S( -18,   20), S( -15,    7), S( -13,   -6), S(  -6,   -3), S(  15,   -4), S(   1,   -6), 
        S( -30,    7), S( -31,    1), S( -32,    2), S( -26,    5), S( -23,    0), S( -33,    4), S(   3,  -21), S(  -9,  -16), 
        S( -36,   -2), S( -36,   -5), S( -34,    0), S( -26,   -7), S( -17,  -17), S( -10,  -18), S(  15,  -33), S(   1,  -36), 
        S( -30,  -15), S( -35,   -9), S( -25,   -9), S( -22,  -13), S( -11,  -17), S(  -5,  -22), S(   1,  -27), S( -19,  -19), 
        S( -18,    0), S( -18,   -5), S( -20,    3), S( -10,  -11), S(  -1,  -16), S(   3,  -10), S(  21,  -27), S( -16,  -21), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1303, 1496);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   8,   10), S(  11,   23), S(  25,   35), S(  39,   30), S(  44,   49), S(  55,   53), S(  47,   45), S(  24,   43), 
        S(   8,    3), S( -16,   22), S(  -4,   43), S(   6,   51), S(  15,   61), S(  23,   73), S(   0,   66), S(  62,   62), 
        S(  18,   10), S(  15,   17), S(  12,   36), S(  22,   39), S(  22,   65), S(  67,   80), S(  68,   77), S(  82,   53), 
        S(  10,   23), S(  18,   21), S(   0,   32), S(  10,   39), S(   8,   47), S(  20,   45), S(  26,   63), S(  32,   41), 
        S(  10,   29), S(   6,   29), S(   9,   19), S(  14,   32), S(  18,   24), S(  12,   28), S(  23,   43), S(  39,   28), 
        S(   7,    8), S(  19,    3), S(  12,   28), S(  15,   13), S(  21,   12), S(  17,   32), S(  39,   13), S(  31,    8), 
        S(  21,    4), S(  21,   -5), S(  27,   -3), S(  32,   -1), S(  30,   -3), S(  34,  -10), S(  34,  -18), S(  49,   -6), 
        S(  21,    8), S(  20,   -3), S(  23,    6), S(  29,    4), S(  28,   -4), S(  18,  -14), S(  21,    1), S(   6,  -17), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S( -96,  -88), S( -28,  -37), S( -16,  -10), S( -23,  -19), S( -21,    4), S(   6,    7), S(  -1,   -7), S( -17,  -20), 
        S(  -4,   -2), S(  28,   37), S(  23,   38), S(  32,   27), S(  26,   42), S(  40,   47), S(  26,   40), S(  -3,   15), 
        S(   3,   18), S(  27,   58), S(  32,   71), S(  12,   80), S(  18,   75), S(  54,   68), S(  50,   60), S(   0,   24), 
        S( -17,    6), S(  17,   42), S(  16,   62), S(  28,   77), S(  40,   72), S(  19,   68), S(  10,   47), S( -18,   13), 
        S( -33,    0), S( -16,   23), S(   8,   46), S(  14,   56), S(   1,   51), S( -11,   36), S( -17,   16), S( -40,   -7), 
        S( -27,  -10), S( -12,    6), S( -12,   20), S( -14,   30), S( -24,   31), S( -25,   13), S( -17,   -1), S( -40,   -6), 
        S(  38,  -15), S(  19,  -11), S(   4,    1), S( -33,   11), S( -37,   13), S( -15,    0), S(  27,  -23), S(  25,  -29), 
        S(  19,  -46), S(  75,  -47), S(  47,  -28), S( -66,    7), S(  -1,  -35), S( -43,   -7), S(  45,  -49), S(  42,  -76), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(   4,  -17), S( -28,    2), S( -28,   11), S( -35,    2), S( -41,    4), S( -14,  -22), 
        S( -28,    2), S( -41,  -33), S( -65,  -40), S( -69,  -49), S( -51,  -37), S( -73,  -45), S( -90,  -86), S(-104,  -72), 
        S(-113,  -76), S(-110,  -74), S(-117,  -80), S(-150, -102), S(-196, -123), S(-174, -125), S(-183, -130), S(-206, -211), 
        S(-171, -154), S(-224, -144), S(-275, -234), S(-151, -135), S(-243, -151), S(-165, -143), S( -94,  -24), S(-189, -130), 
        S(-182, -151), S(-337, -254), S(-299, -274), S(  96,  -13), S(-327, -165), S(-204, -164), S(-261, -197), S(-211, -189), 
        S(-188, -204), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
    }

namespace MiscEval
{
    constexpr int control = S(  -1,    4);
}
