
/*
  Bit-Genie is an open-source, UCI-compliant chess engine written by
  Aryan Parekh - https://github.com/Aryan1508/Bit-Genie

  Bit-Genie is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Bit-Genie is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once 
#include "misc.h"

#define mg_score(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define eg_score(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

namespace PawnEval
{
    constexpr int value = S( 107,  147);

    constexpr int stacked = S(  -6,  -15);

    constexpr int isolated = S( -24,  -16);

    constexpr int passed_connected = S(  19,   12);

    constexpr int passed_tempo = S(  36,   45);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( -18,   40), S( -59,   19), S( -58,   -6), S( -47,  -58), S( -40,  -36), S( -70,   -4), S( -58,    2), S( -92,   34), 
        S( -27,   34), S( -22,   14), S(   4,    3), S(  16,  -16), S(  27,  -10), S(  78,   -6), S(  49,   15), S(  15,   28), 
        S( -43,   21), S( -26,    3), S(  -5,   -5), S(  -3,  -16), S(  23,  -21), S(  11,  -13), S(  -2,   -7), S( -12,   -3), 
        S( -50,   -2), S( -34,  -10), S( -10,  -16), S(   8,  -13), S(  11,  -16), S(   2,  -18), S( -16,  -17), S( -23,  -21), 
        S( -51,   -4), S( -35,  -10), S( -14,  -12), S(  -8,  -13), S(  10,   -8), S(  -4,   -9), S(  12,  -23), S( -15,  -19), 
        S( -49,   -3), S( -33,  -14), S( -21,   -9), S( -14,  -11), S(  -2,    0), S(  12,  -10), S(  21,  -28), S( -24,  -24), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 275,  230), S( 200,  276), S( 227,  293), S( 246,  282), S( 243,  278), S( 208,  251), S( 252,  299), S( 261,  262), 
        S( 109,  187), S( 106,  198), S(  64,  160), S(  51,  122), S(  44,  120), S(  60,  166), S( 113,  183), S(  97,  182), 
        S(  32,  109), S(  12,  106), S( -11,   63), S(  -7,   50), S( -21,   52), S(  -2,   69), S(  16,  110), S(  19,  112), 
        S(  -7,   60), S( -14,   38), S( -37,   22), S( -38,    3), S( -48,   15), S( -37,   33), S( -21,   58), S(   1,   59), 
        S( -12,    0), S( -50,   -5), S( -39,  -13), S( -46,  -16), S( -52,  -19), S( -50,  -16), S( -52,   11), S(   0,    1), 
        S( -11,   -2), S( -24,   -7), S( -35,  -14), S( -23,  -11), S( -25,  -23), S( -30,  -18), S( -12,   -9), S(  10,   -5), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  90,  159), S( 142,  113), S( 168,  104), S( 184,  118), S( 133,   90), S( 123,  101), S(  83,   56), S(  53,   91), 
        S(  70,   75), S( 102,   58), S( 101,   19), S(  47,   29), S(  35,   19), S(  59,   18), S(  39,    8), S( -23,   14), 
        S(  48,   51), S(  56,   40), S(  27,   28), S(  23,   23), S(  -3,   23), S(   4,   20), S(  27,   26), S(   8,   30), 
        S(  41,   27), S(  25,   20), S( -11,   11), S( -17,   13), S( -21,   20), S( -19,   18), S(   8,   24), S( -13,   25), 
        S(  21,  -14), S(  18,   14), S( -29,    6), S( -38,    8), S( -44,   13), S( -26,   14), S( -29,   27), S( -20,   16), 
        S(  14,  -13), S(   6,    8), S( -27,   18), S( -28,   21), S(  -7,    2), S( -11,   -2), S(  16,  -12), S(   8,    4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 399,  431);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S(-134,  -60), S( -58,  -36), S( -29,  -12), S( -50,  -10), S( -16,   -5), S( -74,  -73), S( -58,  -54), S(-102,  -72), 
        S( -43,  -10), S( -38,   13), S(  -2,    5), S(  40,  -10), S( -16,  -16), S(  73,  -28), S(  -3,   -6), S( -22,  -24), 
        S( -32,   -9), S(  21,   -2), S(  15,   19), S(  34,   11), S(  81,  -15), S(  86,   -7), S(  46,   -9), S(  15,  -18), 
        S(   1,   15), S(   1,   15), S(  28,   19), S(  57,   16), S(  30,   12), S(  50,   20), S(  10,   11), S(  41,  -17), 
        S( -12,    4), S(  -5,   11), S(   4,   16), S(  12,   22), S(  22,   21), S(  16,    5), S(  13,    7), S(   4,    0), 
        S( -42,  -13), S( -25,    0), S( -12,  -12), S(  -9,   17), S(  11,    6), S(  -7,  -12), S(   6,  -10), S( -22,  -13), 
        S( -33,    3), S( -30,   -9), S( -30,   -7), S(  -1,  -11), S(  -8,  -13), S( -11,  -18), S( -10,    0), S( -12,   22), 
        S( -46,   -7), S( -23,  -16), S( -55,   -2), S( -31,   -5), S( -25,   -9), S( -19,  -14), S( -18,  -11), S( -38,   -4), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 436,  406);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -40,   21), S( -36,   25), S( -25,   17), S( -49,    8), S( -45,   15), S( -42,    8), S( -13,   -6), S( -39,   -3), 
        S( -31,    7), S( -28,   10), S( -28,   16), S( -29,    9), S( -18,   -4), S( -36,    0), S( -28,    1), S( -19,   -9), 
        S(   4,   22), S(  19,   14), S(   7,    8), S(  23,   -8), S(   8,   -8), S(  58,    5), S(  27,   10), S(  34,    9), 
        S( -16,   25), S(  -5,   24), S(   8,    5), S(  20,   17), S(  31,   10), S(   6,    7), S(   5,    5), S( -26,   28), 
        S(  -6,   23), S( -15,   12), S(  -9,   12), S(  15,   17), S(  15,    7), S(  -3,    2), S( -11,    2), S(  12,   -3), 
        S(   5,   -6), S(   6,   17), S(   2,   13), S(   3,    7), S(   3,   15), S(   8,    5), S(  13,   -3), S(  16,    7), 
        S(  18,   10), S(  11,    0), S(  14,  -13), S(  -6,    1), S(   5,    2), S(  14,  -11), S(  34,    3), S(  22,  -26), 
        S(  18,   10), S(  25,  -13), S(   8,    1), S(  -6,   12), S(   1,   18), S(  -6,   21), S(  11,   -4), S(  34,  -14), 
    };
}

namespace RookEval
{
    constexpr int value = S( 551,  776);

    constexpr int open_file = S(  27,   12);

    constexpr int semi_open_file = S(  26,   -2);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(   5,   16), S( -22,   26), S(  21,   25), S(  -9,   34), S( -13,   25), S(  17,   29), S(   5,   19), S(  47,    6), 
        S( -23,   25), S( -39,   46), S( -19,   51), S(   4,   33), S( -16,   36), S(   5,   29), S(  12,   27), S(  61,   -1), 
        S( -38,   26), S(  -5,   22), S( -22,   31), S( -25,   12), S(  22,   -9), S(  31,   -3), S(  84,  -13), S(  47,  -24), 
        S( -37,   24), S( -40,   28), S( -30,   25), S( -25,   11), S( -21,   -4), S( -11,   -4), S(  11,   -4), S(  -5,   -2), 
        S( -41,   12), S( -43,    7), S( -46,    8), S( -36,    8), S( -30,    2), S( -43,    8), S(   6,  -29), S( -12,  -16), 
        S( -44,    2), S( -41,   -6), S( -43,    3), S( -35,   -3), S( -22,  -16), S( -14,  -20), S(  14,  -41), S(   2,  -43), 
        S( -33,  -17), S( -40,   -8), S( -30,   -9), S( -27,  -13), S( -16,  -17), S(  -8,  -25), S(   1,  -34), S( -13,  -33), 
        S( -20,   -4), S( -22,   -7), S( -24,    2), S( -15,  -12), S(  -6,  -16), S(  -1,  -13), S(  19,  -29), S( -15,  -25), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1264, 1467);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   6,    9), S(  -5,   14), S(  11,   28), S(  41,   17), S(  22,   42), S(  50,   47), S(  38,   40), S(   4,   32), 
        S(   1,   19), S( -28,   49), S( -20,   67), S( -13,   67), S(  -5,   80), S(   2,   90), S( -22,   83), S(  45,   69), 
        S(  14,   14), S(  18,   10), S(   2,   52), S(  17,   41), S(  12,   75), S(  57,   85), S(  58,   80), S(  81,   30), 
        S(   1,   41), S(  14,   23), S( -10,   51), S(   4,   49), S(  -4,   66), S(  15,   44), S(  17,   72), S(  25,   49), 
        S(   7,   34), S(  -1,   39), S(   7,   13), S(   9,   38), S(  16,   20), S(   9,   24), S(  20,   38), S(  38,   19), 
        S(   5,   10), S(  19,   -8), S(  11,   23), S(  14,    6), S(  21,    6), S(  16,   26), S(  40,   -3), S(  34,  -11), 
        S(  17,   10), S(  22,  -17), S(  27,  -16), S(  33,  -14), S(  31,  -16), S(  37,  -31), S(  40,  -44), S(  59,  -27), 
        S(  21,   -9), S(  22,  -16), S(  24,   -8), S(  29,   -4), S(  30,  -20), S(  19,  -26), S(  36,    0), S(  26,   -5), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-101, -106), S( -22,  -49), S( -16,  -21), S( -23,  -13), S( -18,    9), S(   4,    4), S(  -3,  -13), S( -20,  -36), 
        S(  -1,    7), S(  33,   38), S(  31,   56), S(  40,   43), S(  30,   61), S(  42,   59), S(  32,   63), S( -10,   21), 
        S(  -9,   22), S(  31,   57), S(  35,   69), S(   0,   81), S(  11,   75), S(  52,   70), S(  47,   62), S( -11,   31), 
        S( -30,   11), S(   6,   42), S(  -1,   63), S(   4,   78), S(  18,   73), S(   1,   69), S( -13,   49), S( -40,   20), 
        S( -49,    8), S( -37,   25), S(  -9,   48), S( -14,   59), S( -27,   55), S( -41,   40), S( -46,   21), S( -70,    2), 
        S( -37,   -5), S(  -9,    5), S( -28,   22), S( -36,   33), S( -44,   34), S( -37,   15), S(  -9,   -4), S( -56,    5), 
        S(  55,  -20), S(  36,  -19), S(  18,   -6), S( -16,    1), S( -25,    6), S(   2,   -7), S(  45,  -31), S(  42,  -34), 
        S(  36,  -49), S(  93,  -56), S(  62,  -34), S( -57,   -3), S(  14,  -38), S( -29,   -9), S(  63,  -55), S(  60,  -77), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S(  17,  -24), S( -49,   15), S( -29,   13), S( -39,    8), S( -45,    9), S( -14,  -20), 
        S( -29,   10), S( -42,  -23), S( -70,  -17), S( -74,  -29), S( -56,  -14), S( -80,  -26), S( -96,  -71), S(-113,  -61), 
        S(-123,  -63), S(-121,  -61), S(-129,  -68), S(-161,  -94), S(-208, -120), S(-190, -105), S(-203, -120), S(-220, -202), 
        S(-189, -165), S(-249, -168), S(-286, -250), S(-176, -155), S(-252, -147), S(-191, -159), S(-114,  -35), S(-206, -140), 
        S(-196, -160), S(-345, -258), S(-313, -281), S(  81,  -20), S(-332, -169), S(-214, -168), S(-268, -199), S(-213, -190), 
        S(-187, -203), S(-211, -227), S(-234, -214), S(-233, -144), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };

    constexpr int attack_weight[5]
    {
        0, 2, 2, 3, 5
    };
}

namespace MiscEval
{
    constexpr int control = S(  -1,    4);
}
