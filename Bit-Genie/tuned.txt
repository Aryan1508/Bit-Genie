
namespace PawnEval
{
    constexpr int value = S( 132,  127);

    constexpr int stacked = S( -17,   -4);

    constexpr int isolated = S( -13,  -26);

    constexpr int passed_connected = S(  11,   22);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  26,    1), S(   3,  -24), S( -22,  -26), S( -83,  -11), S( -52,  -17), S( -25,  -32), S( -17,  -20), S( -26,   -8), 
        S(  17,   16), S(  12,   -1), S(  11,   -2), S(  -8,  -10), S(   3,   -1), S(  25,   35), S(  25,   45), S(  35,    6), 
        S(   7,  -12), S(   8,  -29), S(   4,  -17), S(  -8,  -12), S(  -9,   10), S(  -5,    2), S(   4,  -15), S(   1,  -18), 
        S(  -7,  -36), S(  -5,  -37), S( -10,  -18), S(  -6,    0), S(  -9,    4), S(  -9,  -10), S(  -8,  -27), S( -16,  -33), 
        S(  -9,  -36), S(  -5,  -39), S(  -6,  -20), S(  -7,  -16), S(   3,   -4), S(  -3,  -11), S( -14,    2), S( -15,  -21), 
        S(  -7,  -36), S(  -7,  -39), S(  -2,  -31), S(   0,  -26), S(  11,  -16), S(   2,   -5), S( -18,   10), S( -17,  -33), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 244,  279), S( 274,  211), S( 296,  235), S( 300,  253), S( 285,  249), S( 261,  215), S( 301,  260), S( 298,  269), 
        S( 199,  113), S( 197,  121), S( 158,  107), S( 126,  111), S( 118,   96), S( 146,  100), S( 178,  136), S( 183,  115), 
        S( 118,   54), S( 107,   51), S(  73,   20), S(  61,   20), S(  58,   11), S(  79,   29), S( 109,   53), S( 113,   53), 
        S(  74,   11), S(  60,   -3), S(  36,  -12), S(  22,  -19), S(  32,  -26), S(  46,  -16), S(  68,    2), S(  69,   31), 
        S(  30,  -21), S(  16,  -37), S(   8,  -26), S(   2,  -27), S(  -4,  -36), S(   1,  -35), S(  31,  -43), S(  14,   32), 
        S(  28,  -20), S(  20,  -21), S(   7,  -23), S(  -5,    0), S( -12,   -7), S( -11,    3), S(  -1,   25), S(  10,   40), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 146,   93), S( 116,  129), S( 107,  151), S( 118,  177), S(  94,  122), S(  98,  123), S(  70,   54), S( 102,   30), 
        S(  80,   38), S(  63,   82), S(  20,  101), S(  21,   71), S(   6,   67), S(  -1,   73), S(   5,   44), S(  -1,    2), 
        S(  61,    8), S(  48,   36), S(  21,   31), S(  15,   30), S(   9,    9), S(  11,   15), S(  29,   19), S(  29,    3), 
        S(  43,    6), S(  27,    8), S(  11,  -15), S(  10,  -18), S(  14,  -17), S(   8,   -9), S(  23,    3), S(  27,  -17), 
        S(   6,  -18), S(  20,    2), S(   5,  -35), S(  -1,  -31), S(   3,  -36), S(  10,  -19), S(  24,  -32), S(  19,  -23), 
        S(  15,  -30), S(  24,  -14), S(  19,  -35), S(   1,  -20), S(  -3,   -4), S( -15,   12), S( -13,   18), S(  11,    4), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 394,  447);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S( -75, -129), S( -21,  -55), S(  -4,  -31), S(  -2,  -47), S(   3,  -17), S( -65,  -78), S( -42,  -52), S( -72, -129), 
        S(  -5,  -50), S(  11,  -33), S(  12,   -5), S(  -5,   37), S(  -4,  -25), S(  -2,   43), S(  -9,   22), S( -16,  -15), 
        S(  -1,  -41), S(   1,   22), S(   2,   33), S(  -2,   54), S(   3,   55), S(   7,   68), S(  -2,   51), S( -13,   20), 
        S(  25,   -5), S(  22,   -1), S(  10,   36), S(  14,   60), S(  13,   30), S(   9,   64), S(  15,   14), S(  -4,   39), 
        S(  19,  -18), S(  13,   -5), S(  10,   12), S(  23,   11), S(  16,   28), S(   6,   17), S(   9,   15), S(  12,    3), 
        S(  -1,  -49), S(   7,  -25), S( -15,   -1), S(   2,   12), S(  -3,   25), S( -22,   11), S(  -2,    7), S(   1,  -29), 
        S(   9,  -29), S(   0,  -32), S(  -3,  -28), S(  -8,    4), S( -10,   -4), S( -13,  -12), S(   9,  -12), S(  29,  -11), 
        S( -10,  -23), S(   1,  -29), S(  -1,  -52), S(   4,  -34), S(   0,  -24), S(  -7,  -14), S(  12,  -30), S( -11,  -16), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 406,  442);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S(   7,  -53), S(  20,  -38), S(   5,  -13), S(   4,  -33), S(  11,  -46), S(   1,  -41), S( -14,   -1), S( -11,  -43), 
        S(   8,  -37), S(  -1,  -13), S(   4,  -10), S(  -3,  -11), S( -13,   -4), S( -19,    1), S( -16,   -1), S( -16,  -10), 
        S(  17,   17), S(   5,   35), S( -12,   35), S( -23,   47), S( -25,   33), S(  -1,   64), S(   6,   52), S(   7,   51), 
        S(  18,    2), S(  10,   19), S( -14,   34), S( -11,   52), S( -15,   58), S( -14,   36), S(  -3,   27), S(   9,    8), 
        S(  15,   13), S(   0,    7), S(  -4,   16), S(  -8,   46), S( -19,   47), S( -13,   23), S(  -9,   12), S(  -5,   30), 
        S(  -9,   24), S(   6,   28), S(   0,   26), S(  -9,   30), S(   3,   26), S(  -8,   32), S(  -8,   33), S(   3,   35), 
        S(   8,   37), S(  -7,   33), S( -17,   33), S(  -9,   18), S(  -8,   27), S( -16,   31), S(   1,   54), S( -22,   37), 
        S(  19,   31), S( -10,   41), S(  -3,   26), S(   4,   12), S(  13,   20), S(  22,    6), S( -10,   26), S(  -7,   43), 
    };
}

namespace RookEval
{
    constexpr int value = S( 655,  734);

    constexpr int open_file = S(   2,   35);

    constexpr int semi_open_file = S(   5,   23);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  19,    3), S(  22,   -9), S(  31,    2), S(  28,   -4), S(  22,  -13), S(  29,   15), S(  20,   10), S(  14,   41), 
        S(  30,  -22), S(  38,  -14), S(  50,   -7), S(  38,    7), S(  38,   -8), S(  34,    8), S(  28,   21), S(   5,   55), 
        S(  29,  -31), S(  27,   -2), S(  31,  -14), S(  15,  -20), S(  -6,   33), S(   2,   32), S(   8,   51), S( -11,   35), 
        S(  27,  -29), S(  29,  -31), S(  26,  -24), S(  12,  -18), S(  -3,  -14), S(  -3,   -3), S(   5,    7), S(   8,  -12), 
        S(  17,  -33), S(  10,  -38), S(  10,  -38), S(  10,  -28), S(   5,  -23), S(  11,  -40), S( -19,    2), S(   1,  -26), 
        S(  12,  -45), S(  -2,  -34), S(   9,  -40), S(   3,  -34), S(  -9,  -22), S( -14,  -13), S( -29,   11), S( -24,  -12), 
        S(   1,  -42), S(   3,  -42), S(   1,  -33), S(   0,  -31), S(  -5,  -19), S( -14,  -14), S( -19,  -11), S( -12,  -37), 
        S(   6,  -26), S(  -1,  -22), S(   6,  -24), S( -10,  -11), S( -16,   -2), S(  -7,   -1), S( -16,    4), S(  -6,  -44), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1353, 1470);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(  13,   -9), S(   7,   11), S(  22,   21), S(  21,   41), S(  42,   30), S(  51,   58), S(  50,   64), S(  21,   43), 
        S(  27,  -14), S(  41,  -30), S(  53,  -15), S(  48,    7), S(  66,    8), S(  61,   32), S(  51,   17), S(  72,   88), 
        S(  21,    8), S(  17,   12), S(  52,    0), S(  43,   14), S(  60,   22), S(  81,   68), S(  77,   77), S(  43,   93), 
        S(  38,   -1), S(  33,   10), S(  46,  -11), S(  49,   -2), S(  59,   -2), S(  51,   14), S(  68,   23), S(  43,   36), 
        S(  41,    5), S(  41,   -2), S(  26,    0), S(  49,    2), S(  34,    9), S(  31,    6), S(  51,   19), S(  29,   42), 
        S(  12,    6), S(   8,   14), S(  35,    7), S(  21,    8), S(  20,   15), S(  35,   15), S(   7,   39), S(  -5,   36), 
        S(  20,   21), S(  -1,   19), S(  -8,   26), S(  -7,   32), S(  -6,   29), S( -16,   32), S( -21,   31), S(  14,   48), 
        S(   3,   46), S(  -6,   29), S(  -3,   25), S(   1,   26), S( -10,   32), S(   0,   26), S(  15,   21), S(  13,    7), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-119,  -83), S( -48,  -17), S( -21,    0), S( -11,  -21), S(  -5,    6), S(  -1,   10), S( -12,   -3), S( -41,  -14), 
        S(   8,   -7), S(  37,   43), S(  49,   38), S(  52,   24), S(  56,   36), S(  58,   38), S(  55,   32), S(  13,    0), 
        S(  21,   -9), S(  52,   67), S(  62,   77), S(  63,   79), S(  63,   79), S(  68,   59), S(  59,   52), S(  24,    0), 
        S(   4,  -22), S(  43,   16), S(  58,   47), S(  71,   50), S(  70,   47), S(  63,   46), S(  48,   11), S(  15,  -27), 
        S(   1,  -39), S(  24,  -11), S(  45,   20), S(  54,   23), S(  49,   17), S(  36,   -2), S(  20,  -23), S(   1,  -61), 
        S(  -5,  -45), S(  14,  -34), S(  23,  -19), S(  30,  -13), S(  30,  -12), S(  17,  -30), S(   9,  -43), S(   3,  -59), 
        S(  -4,    0), S(   5,  -26), S(  12,  -32), S(   2,  -23), S(   5,  -24), S(  10,  -39), S(   5,  -43), S(  -3,  -38), 
        S( -23,  -25), S(  12,   -6), S(  -2,   -2), S( -34,  -25), S(  -5,  -48), S(  -5,  -53), S( -11,  -26), S( -12,  -44), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S( -22,   14), S(  16,  -46), S(  13,  -29), S(  11,  -40), S(  -4,  -12), S( -53,    0), 
        S( -44,    6), S( -57,  -33), S( -60,  -64), S( -63,  -73), S( -40,  -68), S( -65,  -77), S( -89, -116), S( -99, -109), 
        S(-102, -122), S( -99, -123), S(-107, -130), S(-145, -149), S(-194, -168), S(-156, -180), S(-174, -183), S(-201, -258), 
        S(-184, -188), S(-245, -169), S(-293, -258), S(-165, -163), S(-248, -185), S(-180, -173), S(-100,  -51), S(-196, -156), 
        S(-187, -170), S(-343, -275), S(-303, -296), S(  96,  -30), S(-331, -176), S(-205, -177), S(-260, -208), S(-211, -192), 
        S(-188, -203), S(-211, -226), S(-234, -214), S(-234, -145), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -401), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };
}

namespace MiscEval
{
    constexpr int control = S(   3,    1);
}
