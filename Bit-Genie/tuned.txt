
namespace PawnEval
{
    constexpr int value = S( 129,  140);

    constexpr int stacked = S( -19,   -4);

    constexpr int isolated = S( -12,  -22);

    constexpr int passed_connected = S(  22,   10);

    constexpr int psqt[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S(  17,    9), S(  -4,   -3), S( -30,  -20), S( -78,  -21), S( -52,  -20), S( -34,  -18), S( -26,   -5), S( -43,   15), 
        S(   4,   42), S(   9,   23), S(   9,   -4), S( -18,  -27), S(  -7,  -22), S(  40,    9), S(  37,   30), S(  28,   11), 
        S(  -4,   15), S(   0,   -7), S(   3,  -19), S(  -7,  -18), S(   3,   -7), S(   0,   -8), S(   7,  -13), S(  -1,   -5), 
        S( -16,  -15), S( -11,  -23), S( -10,  -21), S(  -1,   -7), S(  -4,   -4), S(  -3,  -21), S(  -6,  -24), S( -17,  -30), 
        S( -18,  -17), S( -10,  -25), S(  -5,  -23), S(  -3,  -23), S(  11,  -16), S(   3,  -22), S(  -6,   -4), S( -17,  -16), 
        S( -16,  -17), S( -12,  -26), S(  -6,  -29), S(  -6,  -32), S(   6,  -21), S(   7,  -15), S(  -7,    0), S( -22,  -26), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passed[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 252,  263), S( 261,  233), S( 278,  250), S( 283,  262), S( 269,  252), S( 252,  234), S( 292,  274), S( 296,  279), 
        S( 179,  135), S( 175,  140), S( 140,  131), S( 124,  138), S( 117,  122), S( 125,  121), S( 157,  145), S( 171,  139), 
        S(  99,   77), S(  86,   74), S(  59,   38), S(  49,   34), S(  38,   33), S(  61,   45), S(  88,   75), S(  91,   70), 
        S(  57,   32), S(  49,   10), S(  26,    5), S(   7,   -5), S(  15,   -8), S(  30,    4), S(  50,   24), S(  59,   30), 
        S(  20,  -10), S(   8,  -21), S(   2,  -19), S(  -9,  -12), S( -19,  -23), S( -11,  -21), S(  13,  -27), S(  12,   13), 
        S(  19,  -16), S(  16,  -20), S(   6,  -23), S(   0,    8), S(  -1,    2), S( -15,   -5), S(  -9,    6), S(  16,   16), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };

    constexpr int passer_blocked[64]
    {
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
        S( 134,  110), S( 127,  128), S( 126,  139), S( 134,  162), S( 108,  117), S(  99,  109), S(  71,   61), S(  85,   53), 
        S(  76,   51), S(  66,   61), S(  42,   78), S(  42,   77), S(  27,   73), S(   7,   50), S(   8,   32), S(  -6,   21), 
        S(  48,   13), S(  51,   12), S(  27,   19), S(  11,   34), S(  -7,   23), S(   3,   19), S(  28,    4), S(  18,  -10), 
        S(  32,   -6), S(  24,  -12), S(   8,  -16), S(   0,  -14), S(   4,  -12), S(   1,   -9), S(  17,   -7), S(  14,  -15), 
        S( -10,  -25), S(   9,  -18), S(  -8,  -24), S( -17,  -16), S( -12,  -20), S(   3,  -12), S(  10,  -27), S(   3,  -25), 
        S(  -7,  -39), S(   8,  -29), S(   2,  -27), S(  -8,   -4), S(   0,    1), S( -13,    3), S(  -7,   -3), S(  11,  -21), 
        S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), 
    };
}

namespace KnightEval
{
    constexpr int value = S( 409,  421);

    constexpr int mobility[9]
    {
        S(-125, -115), S( -49,  -61), S( -11,   16), S(   3,   44), S(  20,   44), S(  24,   46), S(  34,   48), S(  44,   41), 
        S(  54,   34), 
    };

    constexpr int psqt[64]
    {
        S( -92, -104), S( -30,  -43), S(  -8,  -17), S( -14,  -30), S(  -4,   -8), S( -58,  -60), S( -45,  -49), S( -90, -114), 
        S( -18,  -32), S(  -3,  -15), S(  14,   -8), S(   1,   25), S(  -7,  -18), S(  17,   18), S(  -7,   12), S( -24,  -17), 
        S( -11,  -36), S(   8,    7), S(   7,   22), S(  12,   40), S(  23,   27), S(  30,   43), S(  12,   32), S( -10,   15), 
        S(  17,   -8), S(  24,  -10), S(  14,   29), S(  29,   46), S(  15,   28), S(  24,   47), S(  18,   12), S(   9,   30), 
        S(  13,  -21), S(   9,   -9), S(  14,    5), S(  23,    7), S(  18,   24), S(  11,   10), S(   9,   16), S(  12,    0), 
        S( -22,  -37), S(   3,  -27), S(  -8,   -9), S(   4,   10), S(  -1,   20), S( -16,    7), S(   4,    0), S(  -5,  -34), 
        S(  -5,  -25), S( -11,  -26), S(  -7,  -29), S(  -6,    1), S(  -9,   -7), S( -12,  -15), S(   2,  -17), S(  15,   -7), 
        S( -24,  -27), S(  -9,  -31), S( -17,  -41), S(  -4,  -31), S(  -4,  -24), S(  -6,  -15), S(   3,  -39), S( -17,  -12), 
    };
}

namespace BishopEval
{
    constexpr int value = S( 423,  420);

    constexpr int mobility[14]
    {
        S( -80,  -70), S( -76,  -67), S( -34,   11), S( -15,   50), S(   2,   47), S(   9,   56), S(  26,   74), S(  37,   78), 
        S(  43,   74), S(  46,   79), S(  51,   77), S(  49,   63), S(  53,   36), S(  61,   39), 
    };

    constexpr int psqt[64]
    {
        S( -11,  -31), S(   4,  -22), S( -12,  -11), S(  -6,  -15), S(  -2,  -28), S( -11,  -22), S( -13,   -2), S( -22,  -27), 
        S(  -6,  -36), S(  -6,  -17), S(   1,  -15), S( -11,  -12), S( -14,   -9), S( -24,    5), S( -22,   -2), S( -18,  -25), 
        S(  18,   -1), S(  10,   15), S(  -7,   18), S( -10,   25), S( -15,   18), S(  10,   40), S(  16,   29), S(  21,   29), 
        S(  13,   -9), S(  13,    8), S(  -9,   19), S(  -1,   38), S(   0,   37), S(  -9,   29), S(   6,   11), S(   2,   10), 
        S(  10,    5), S(   3,   -6), S(  -3,    8), S(  -3,   33), S(  -9,   31), S(  -8,   10), S(  -9,    4), S(   2,   16), 
        S(  -7,   15), S(   8,   19), S(   4,   14), S(  -3,   20), S(  10,   12), S(  -5,   23), S(   0,   20), S(  11,   20), 
        S(  16,   25), S(   6,   16), S(   0,   14), S(  -5,    7), S(  -1,   16), S(  -7,   17), S(  22,   32), S(  -4,   20), 
        S(  22,   11), S(   6,   24), S(   2,   15), S(   4,    6), S(  14,   10), S(  11,    1), S(  -7,    9), S(   2,   23), 
    };
}

namespace RookEval
{
    constexpr int value = S( 632,  763);

    constexpr int open_file = S(   4,   33);

    constexpr int semi_open_file = S(   5,   25);

    constexpr int mobility[15]
    {
        S( -57,  -69), S( -28,  -58), S( -16,   51), S(   0,   72), S(  10,   84), S(  14,   75), S(  18,   74), S(  22,   83), 
        S(  27,   68), S(  32,   66), S(  35,   69), S(  39,   63), S(  39,   65), S(  44,   54), S(  47,   32), 
    };

    constexpr int psqt[64]
    {
        S(  20,   15), S(  19,   12), S(  32,    7), S(  24,   15), S(  17,    6), S(  28,   20), S(  20,   17), S(  24,   25), 
        S(  25,    0), S(  23,   16), S(  40,   20), S(  34,   26), S(  32,   15), S(  33,   22), S(  28,   29), S(  19,   36), 
        S(  21,   -8), S(  25,   14), S(  24,    6), S(  12,   -4), S(   5,   24), S(  14,   21), S(  23,   27), S(   3,   20), 
        S(  18,   -5), S(  17,   -6), S(  19,   -3), S(   9,   -3), S(  -4,   -2), S(  -4,   13), S(  10,   11), S(   9,    1), 
        S(   6,   -7), S(   2,  -16), S(   3,  -16), S(   5,  -12), S(   3,  -10), S(   4,  -21), S( -14,   10), S(   0,  -12), 
        S(  -1,  -20), S( -11,   -9), S(   1,  -19), S(   1,  -19), S(  -9,  -10), S( -15,    4), S( -12,    8), S( -16,   -5), 
        S(  -6,  -23), S(  -5,  -20), S(  -2,  -15), S(  -1,  -17), S(  -6,   -6), S( -13,   -1), S( -10,   -7), S( -16,  -19), 
        S(  -7,   -4), S( -11,    1), S(   0,   -4), S( -14,    7), S( -13,   11), S(  -6,   16), S(   8,  -10), S( -16,  -31), 
    };
}

namespace QueenEval
{
    constexpr int value = S(1335, 1492);

    constexpr int mobility[28]
    {
        S( -62,  -48), S( -70,  -36), S( -66,  -49), S( -45,  -50), S( -27,  -46), S(   4,  -45), S(  -7,  -37), S( -11,  -23), 
        S(   0,   -6), S(   5,   17), S(  12,   28), S(  17,   35), S(  23,   41), S(  28,   47), S(  31,   52), S(  35,   62), 
        S(  36,   69), S(  41,   72), S(  41,   73), S(  45,   73), S(  49,   76), S(  53,   63), S(  57,   69), S(  65,   66), 
        S(  60,   85), S(  82,   84), S( 104,  111), S( 108,  131), 
    };

    constexpr int psqt[64]
    {
        S(   3,   -8), S(  13,   21), S(  26,   33), S(  28,   35), S(  48,   47), S(  52,   55), S(  52,   55), S(  33,   54), 
        S(  11,  -30), S(  13,  -23), S(  28,    1), S(  31,   25), S(  46,   29), S(  43,   50), S(  34,   40), S(  85,   78), 
        S(  17,   -5), S(   5,    8), S(  32,    3), S(  28,   18), S(  39,   38), S(  78,   76), S(  76,   80), S(  69,   87), 
        S(  20,   -3), S(  28,    6), S(  24,   -4), S(  25,    5), S(  36,    9), S(  36,   23), S(  51,   32), S(  47,   42), 
        S(  27,    8), S(  24,    1), S(  11,    2), S(  33,    3), S(  22,   10), S(  18,   10), S(  44,   24), S(  41,   40), 
        S(  11,    8), S(  17,   10), S(  25,    9), S(  13,    8), S(  19,   11), S(  34,   15), S(  25,   35), S(  15,   34), 
        S(  24,   12), S(  14,   15), S(   8,   24), S(   8,   29), S(   5,   27), S(   5,   26), S(   3,   19), S(  33,   27), 
        S(  24,   37), S(  15,   24), S(   9,   23), S(  19,   25), S(   9,   29), S(  21,   13), S(  11,    6), S(  -1,  -13), 
    };
}

namespace KingEval
{
    constexpr int psqt[64]
    {
        S(-104,  -78), S( -39,  -24), S( -19,   -1), S( -18,  -22), S( -16,    2), S(   1,   11), S(  -6,   -2), S( -26,  -10), 
        S(   3,   -9), S(  34,   36), S(  32,   28), S(  38,   16), S(  37,   30), S(  47,   34), S(  35,   25), S(   6,    4), 
        S(  21,    4), S(  41,   61), S(  48,   73), S(  42,   84), S(  44,   81), S(  62,   59), S(  54,   50), S(  16,   10), 
        S(   2,  -10), S(  37,   28), S(  47,   65), S(  61,   72), S(  62,   68), S(  52,   67), S(  40,   32), S(   6,   -7), 
        S(  -8,  -22), S(  15,   10), S(  37,   41), S(  44,   48), S(  39,   44), S(  27,   25), S(  12,    3), S(  -8,  -35), 
        S( -12,  -27), S(   6,  -13), S(  15,    7), S(  21,   15), S(  19,   18), S(   8,   -2), S(   2,  -18), S(  -8,  -31), 
        S(   6,   -9), S(   2,  -15), S(   4,  -11), S(  -7,    5), S(  -5,    5), S(   2,  -13), S(   7,  -43), S(   3,  -46), 
        S(  -9,  -40), S(  41,  -34), S(  14,  -11), S( -46,    4), S(  -8,  -46), S( -15,  -26), S(   5,  -42), S(  15,  -72), 
    };

    constexpr int safety_table[100]
    {
        S(  13,   13), S(   0,    0), S( -12,    3), S(   8,  -22), S(   4,  -11), S(   2,  -23), S( -10,   -3), S( -40,    1), 
        S( -29,   12), S( -54,  -22), S( -59,  -50), S( -65,  -59), S( -45,  -53), S( -66,  -62), S( -92, -100), S(-103,  -91), 
        S(-112, -101), S(-108, -101), S(-115, -108), S(-150, -127), S(-195, -146), S(-154, -161), S(-171, -160), S(-191, -240), 
        S(-170, -165), S(-224, -146), S(-275, -239), S(-146, -139), S(-241, -167), S(-160, -149), S( -87,  -31), S(-184, -137), 
        S(-178, -155), S(-335, -261), S(-294, -279), S( 103,  -17), S(-326, -168), S(-200, -167), S(-257, -201), S(-210, -190), 
        S(-189, -204), S(-211, -227), S(-234, -214), S(-233, -145), S(-322, -224), S( -96,  -40), S(-336, -191), S(-126,  -36), 
        S(-400, -400), S(-400,  -10), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -401), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
        S(-400, -400), S(-400, -400), S(-400, -400), S(-400, -400), 
    };
}

namespace MiscEval
{
    constexpr int control = S(   3,    1);
}
